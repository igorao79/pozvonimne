import { NextRequest, NextResponse } from 'next/server';
import { exec } from 'child_process';
import { promisify } from 'util';
import path from 'path';
import fs from 'fs/promises';

const execAsync = promisify(exec);

// –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ (–≤ –ø–∞–º—è—Ç–∏)
const tempFiles = new Map<string, string>();

export async function GET(
  request: NextRequest,
  { params }: { params: { userId: string } }
) {
  const { userId } = params;
  const { searchParams } = new URL(request.url);
  const action = searchParams.get('action');
  const url = searchParams.get('url');

  try {
    if (action === 'stream' && url) {
      // –ü–æ—Ç–æ–∫–æ–≤–æ–µ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ Mega.nz —Ñ–∞–π–ª–∞
      console.log(`üéµ Streaming Mega.nz file for user ${userId}:`, url);

      return new Promise((resolve, reject) => {
        // –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è
        const tempFileName = `temp_${userId}_${Date.now()}.mp3`;
        const tempFilePath = path.join(process.cwd(), 'temp', tempFileName);

        // –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª —Å Mega.nz
        const command = `megatools dl --no-progress --path "${tempFilePath}" "${url}"`;

        exec(command, async (error, stdout, stderr) => {
          if (error) {
            console.error('‚ùå Megatools error:', error);
            resolve(NextResponse.json(
              { error: '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å —Ñ–∞–π–ª —Å Mega.nz' },
              { status: 500 }
            ));
            return;
          }

          try {
            // –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–∞–∫ –ø–æ—Ç–æ–∫
            const fileBuffer = await fs.readFile(tempFilePath);

            // –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            await fs.unlink(tempFilePath);

            // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ñ–∞–π–ª —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏
            const response = new NextResponse(fileBuffer, {
              headers: {
                'Content-Type': 'audio/mpeg',
                'Content-Length': fileBuffer.length.toString(),
                'Accept-Ranges': 'bytes',
                'Cache-Control': 'public, max-age=3600',
              },
            });

            resolve(response);

          } catch (fileError) {
            console.error('‚ùå File read error:', fileError);
            resolve(NextResponse.json(
              { error: '–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å —Ñ–∞–π–ª' },
              { status: 500 }
            ));
          }
        });
      });
    }

    // –û–±—ã—á–Ω—ã–π GET –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ä–∏–Ω–≥—Ç–æ–Ω–µ
    return NextResponse.json({
      success: true,
      url: 'https://mega.nz/file/example#hash',
      message: '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /api/ringtones/[userId]?action=stream&url=<mega_url> –¥–ª—è –ø–æ—Ç–æ–∫–æ–≤–æ–≥–æ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è'
    });

  } catch (error) {
    console.error('‚ùå API Error:', error);
    return NextResponse.json(
      { error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' },
      { status: 500 }
    );
  }
}

export async function POST(
  request: NextRequest,
  { params }: { params: { userId: string } }
) {
  // –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è POST –∑–∞–ø—Ä–æ—Å–æ–≤
  return NextResponse.json({ success: true });
}

export async function DELETE(
  request: NextRequest,
  { params }: { params: { userId: string } }
) {
  // –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è DELETE –∑–∞–ø—Ä–æ—Å–æ–≤
  return NextResponse.json({ success: true });
}
