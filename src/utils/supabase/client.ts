import { createBrowserClient } from '@supabase/ssr'

export function createClient() {
  return createBrowserClient(
    process.env.NEXT_PUBLIC_SUPABASE_URL!,
    process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!,
    {
      realtime: {
        // –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ–≥–æ WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
        params: {
          eventsPerSecond: 2, // –°–Ω–∏–∂–∞–µ–º –¥–æ 2 —Å–æ–±—ã—Ç–∏–π –≤ —Å–µ–∫—É–Ω–¥—É –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
        },
        heartbeatIntervalMs: 30000, // 30 —Å–µ–∫—É–Ω–¥
        reconnectAfterMs: function (tries: number) {
          // –ë–æ–ª–µ–µ –∞–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–π backoff –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
          return Math.min(tries * 2000, 30000) // –î–æ 30 —Å–µ–∫—É–Ω–¥
        },
        logger: (level: string, message: string, details?: any) => {
          // –¢–∏—Ö–∏–π –ª–æ–≥, —Ç–æ–ª—å–∫–æ –æ—à–∏–±–∫–∏ –∏ –≤–∞–∂–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è
          if (level === 'error') {
            console.error('üîå Supabase Realtime Error:', message, details?.error || details)
          }
          // –£–±–∏—Ä–∞–µ–º verbose –ª–æ–≥–∏ –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
        },
        timeout: 20000 // –°–Ω–∏–∂–∞–µ–º —Ç–∞–π–º–∞—É—Ç –¥–æ 20 —Å–µ–∫—É–Ω–¥
      }
    }
  )
}
