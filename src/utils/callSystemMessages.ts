import { createClient } from '@/utils/supabase/client'

interface SendSystemMessageParams {
  chatId: string
  message: string
  messageType?: 'call_missed' | 'call_ended' | 'system'
}

interface CallDurationFormat {
  totalSeconds: number
}

/**
 * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–∏—Å—Ç–µ–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç –∏—Å–ø–æ–ª—å–∑—É—è —Ñ—É–Ω–∫—Ü–∏—é –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
 */
export const sendSystemMessage = async ({ chatId, message, messageType = 'system' }: SendSystemMessageParams) => {
  const supabase = createClient()

  try {
    console.log('üì§ –°–ò–°–¢–ï–ú–ù–û–ï –°–û–û–ë–©–ï–ù–ò–ï - –ù–∞—á–∞–ª–æ –æ—Ç–ø—Ä–∞–≤–∫–∏:', {
      chatId,
      message,
      messageType,
      timestamp: new Date().toISOString()
    })

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é
    const { data: { user }, error: authError } = await supabase.auth.getUser()
    console.log('üë§ –°–ò–°–¢–ï–ú–ù–û–ï –°–û–û–ë–©–ï–ù–ò–ï - –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', {
      hasUser: !!user,
      userId: user?.id?.substring(0, 8),
      authError: authError ? JSON.stringify(authError) : null
    })

    if (authError || !user) {
      console.error('‚ùå –°–ò–°–¢–ï–ú–ù–û–ï –°–û–û–ë–©–ï–ù–ò–ï - –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω:', authError)
      return false
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —á–∞—Ç–∞ —á–µ—Ä–µ–∑ findOrCreateChatWithUser –µ—Å–ª–∏ chatId –Ω–µ –Ω–∞–π–¥–µ–Ω
    if (!chatId) {
      console.error('‚ùå –°–ò–°–¢–ï–ú–ù–û–ï –°–û–û–ë–©–ï–ù–ò–ï - –ù–µ—Ç chatId –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏')
      return false
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —á–∞—Ç–∞
    console.log('üí¨ –°–ò–°–¢–ï–ú–ù–û–ï –°–û–û–ë–©–ï–ù–ò–ï - –ó–∞–ø—Ä–æ—Å –∫ chats API:', {
      chatId,
      query: 'chats?select=id,name,type&id=eq.' + chatId
    })

    const { data: chatData, error: chatError } = await supabase
      .from('chats')
      .select('id, name, type')
      .eq('id', chatId)
      .single()

    console.log('üí¨ –°–ò–°–¢–ï–ú–ù–û–ï –°–û–û–ë–©–ï–ù–ò–ï - –ü—Ä–æ–≤–µ—Ä–∫–∞ —á–∞—Ç–∞:', {
      chatFound: !!chatData,
      chatId,
      chatData: chatData ? { id: chatData.id, name: chatData.name, type: chatData.type } : null,
      chatError: chatError ? {
        message: chatError.message,
        details: chatError.details,
        hint: chatError.hint,
        code: chatError.code
      } : null
    })

    if (chatError || !chatData) {
      console.error('‚ùå –°–ò–°–¢–ï–ú–ù–û–ï –°–û–û–ë–©–ï–ù–ò–ï - –ß–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω:', {
        chatId,
        chatError: chatError ? {
          message: chatError.message,
          details: chatError.details,
          hint: chatError.hint,
          code: chatError.code
        } : null
      })
      
      // –í–†–ï–ú–ï–ù–ù–û–ï –†–ï–®–ï–ù–ò–ï: –ï—Å–ª–∏ 500 –æ—à–∏–±–∫–∞ - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
      if (chatError && (chatError.message?.includes('500') || chatError.code === 'PGRST301' || chatError.details?.includes('500'))) {
        console.log('üö® –í–†–ï–ú–ï–ù–ù–û–ï –†–ï–®–ï–ù–ò–ï - –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–∏—Å—Ç–µ–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑-–∑–∞ 500 –æ—à–∏–±–∫–∏')
        return true // –í–æ–∑–≤—Ä–∞—â–∞–µ–º true —á—Ç–æ–±—ã –Ω–µ –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ—Ü–µ—Å—Å
      }
      
      return false
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—á–∞—Å—Ç–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —á–∞—Ç–µ
    const { data: participantData, error: participantError } = await supabase
      .from('chat_participants')
      .select('user_id, chat_id')
      .eq('chat_id', chatId)
      .eq('user_id', user.id)
      .single()

    console.log('üë• –°–ò–°–¢–ï–ú–ù–û–ï –°–û–û–ë–©–ï–ù–ò–ï - –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—á–∞—Å—Ç–∏—è –≤ —á–∞—Ç–µ:', {
      isParticipant: !!participantData,
      participantData,
      participantError: participantError ? JSON.stringify(participantError) : null
    })

    if (participantError || !participantData) {
      console.error('‚ùå –°–ò–°–¢–ï–ú–ù–û–ï –°–û–û–ë–©–ï–ù–ò–ï - –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —É—á–∞—Å—Ç–Ω–∏–∫ —á–∞—Ç–∞:', participantError)
      return false
    }

    // –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const { data: profile, error: profileError } = await supabase
      .from('user_profiles')
      .select('display_name, username')
      .eq('id', user.id)
      .single()

    console.log('üë§ –°–ò–°–¢–ï–ú–ù–û–ï –°–û–û–ë–©–ï–ù–ò–ï - –ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', {
      profile,
      profileError: profileError ? JSON.stringify(profileError) : null
    })

    const senderName = profile?.display_name || profile?.username || '–°–∏—Å—Ç–µ–º–∞'

    // –ü—Ä–æ–±—É–µ–º RPC —Ñ—É–Ω–∫—Ü–∏—é
    console.log('üîß –°–ò–°–¢–ï–ú–ù–û–ï –°–û–û–ë–©–ï–ù–ò–ï - –í—ã–∑–æ–≤ RPC send_system_message:', {
      p_chat_id: chatId,
      p_content: message,
      p_message_type: messageType
    })

    const { data: rpcData, error: rpcError } = await supabase.rpc('send_system_message', {
      p_chat_id: chatId,
      p_content: message,
      p_message_type: messageType
    })

    console.log('üîß –°–ò–°–¢–ï–ú–ù–û–ï –°–û–û–ë–©–ï–ù–ò–ï - –†–µ–∑—É–ª—å—Ç–∞—Ç RPC:', {
      rpcData,
      rpcError: rpcError ? {
        message: rpcError.message,
        details: rpcError.details,
        hint: rpcError.hint,
        code: rpcError.code
      } : null
    })

    if (rpcError) {
      console.warn('‚ö†Ô∏è –°–ò–°–¢–ï–ú–ù–û–ï –°–û–û–ë–©–ï–ù–ò–ï - RPC failed, trying fallback insert')
      
      // Fallback: –ø—Ä—è–º–∞—è –≤—Å—Ç–∞–≤–∫–∞
      const insertData = {
        chat_id: chatId,
        sender_id: user.id,
        content: message,
        type: 'text'
      }

      console.log('üìù –°–ò–°–¢–ï–ú–ù–û–ï –°–û–û–ë–©–ï–ù–ò–ï - –î–∞–Ω–Ω—ã–µ –¥–ª—è –ø—Ä—è–º–æ–π –≤—Å—Ç–∞–≤–∫–∏:', insertData)

      const { data: fallbackData, error: fallbackError } = await supabase
        .from('messages')
        .insert(insertData)
        .select()

      console.log('üìù –°–ò–°–¢–ï–ú–ù–û–ï –°–û–û–ë–©–ï–ù–ò–ï - –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä—è–º–æ–π –≤—Å—Ç–∞–≤–∫–∏:', {
        fallbackData,
        fallbackError: fallbackError ? {
          message: fallbackError.message,
          details: fallbackError.details,
          hint: fallbackError.hint,
          code: fallbackError.code
        } : null
      })

      if (fallbackError) {
        console.error('‚ùå –°–ò–°–¢–ï–ú–ù–û–ï –°–û–û–ë–©–ï–ù–ò–ï - Fallback insert failed:', fallbackError)
        return false
      }

      console.log('‚úÖ –°–ò–°–¢–ï–ú–ù–û–ï –°–û–û–ë–©–ï–ù–ò–ï - –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —á–µ—Ä–µ–∑ fallback:', fallbackData)
      return true
    }

    console.log('‚úÖ –°–ò–°–¢–ï–ú–ù–û–ï –°–û–û–ë–©–ï–ù–ò–ï - –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —á–µ—Ä–µ–∑ RPC:', rpcData)
    return true
  } catch (error) {
    console.error('‚ùå –°–ò–°–¢–ï–ú–ù–û–ï –°–û–û–ë–©–ï–ù–ò–ï - Exception:', {
      error,
      message: error instanceof Error ? error.message : 'Unknown error',
      stack: error instanceof Error ? error.stack : undefined
    })
    return false
  }
}

/**
 * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–∏—Å—Ç–µ–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–æ–ø—É—â–µ–Ω–Ω–æ–º –∑–≤–æ–Ω–∫–µ
 */
export const sendMissedCallMessage = async (chatId: string, callerName: string) => {
  const message = `${callerName} –ø—ã—Ç–∞–ª—Å—è –ø–æ–∑–≤–æ–Ω–∏—Ç—å –≤–∞–º`
  return sendSystemMessage({
    chatId,
    message,
    messageType: 'call_missed'
  })
}

/**
 * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∑–≤–æ–Ω–∫–∞ –≤ —á–∏—Ç–∞–µ–º—ã–π –≤–∏–¥
 */
export const formatCallDuration = (totalSeconds: number): string => {
  const hours = Math.floor(totalSeconds / 3600)
  const minutes = Math.floor((totalSeconds % 3600) / 60)
  const secs = totalSeconds % 60

  if (hours > 0) {
    if (hours === 1) {
      return `${hours} —á–∞—Å ${minutes} ${minutes === 1 ? '–º–∏–Ω—É—Ç—É' : minutes < 5 ? '–º–∏–Ω—É—Ç—ã' : '–º–∏–Ω—É—Ç'}`
    } else if (hours < 5) {
      return `${hours} —á–∞—Å–∞ ${minutes} ${minutes === 1 ? '–º–∏–Ω—É—Ç—É' : minutes < 5 ? '–º–∏–Ω—É—Ç—ã' : '–º–∏–Ω—É—Ç'}`
    } else {
      return `${hours} —á–∞—Å–æ–≤ ${minutes} ${minutes === 1 ? '–º–∏–Ω—É—Ç—É' : minutes < 5 ? '–º–∏–Ω—É—Ç—ã' : '–º–∏–Ω—É—Ç'}`
    }
  }

  if (minutes > 0) {
    if (minutes === 1) {
      return `${minutes} –º–∏–Ω—É—Ç—É ${secs} ${secs === 1 ? '—Å–µ–∫—É–Ω–¥—É' : secs < 5 ? '—Å–µ–∫—É–Ω–¥—ã' : '—Å–µ–∫—É–Ω–¥'}`
    } else if (minutes < 5) {
      return `${minutes} –º–∏–Ω—É—Ç—ã ${secs} ${secs === 1 ? '—Å–µ–∫—É–Ω–¥—É' : secs < 5 ? '—Å–µ–∫—É–Ω–¥—ã' : '—Å–µ–∫—É–Ω–¥'}`
    } else {
      return `${minutes} –º–∏–Ω—É—Ç ${secs} ${secs === 1 ? '—Å–µ–∫—É–Ω–¥—É' : secs < 5 ? '—Å–µ–∫—É–Ω–¥—ã' : '—Å–µ–∫—É–Ω–¥'}`
    }
  }

  if (secs === 1) {
    return `${secs} —Å–µ–∫—É–Ω–¥—É`
  } else if (secs < 5) {
    return `${secs} —Å–µ–∫—É–Ω–¥—ã`
  } else {
    return `${secs} —Å–µ–∫—É–Ω–¥`
  }
}

/**
 * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–∏—Å—Ç–µ–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –∑–≤–æ–Ω–∫–∞
 */
export const sendCallEndedMessage = async (chatId: string, durationSeconds: number) => {
  const durationText = formatCallDuration(durationSeconds)
  const message = `–ó–≤–æ–Ω–æ–∫ –±—ã–ª –∑–∞–≤–µ—Ä—à–µ–Ω –∏ –ø—Ä–æ–¥–ª–∏–ª—Å—è ${durationText}`
  
  return sendSystemMessage({
    chatId,
    message,
    messageType: 'call_ended'
  })
}

/**
 * –ù–∞—Ö–æ–¥–∏—Ç –∏–ª–∏ —Å–æ–∑–¥–∞–µ—Ç —á–∞—Ç —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
 */
export const findOrCreateChatWithUser = async (targetUserId: string) => {
  const supabase = createClient()

  try {
    console.log('üîç –ü–û–ò–°–ö –ß–ê–¢–ê - –ù–∞—á–∞–ª–æ –ø–æ–∏—Å–∫–∞/—Å–æ–∑–¥–∞–Ω–∏—è —á–∞—Ç–∞:', {
      targetUserId: targetUserId.substring(0, 8),
      timestamp: new Date().toISOString()
    })

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é
    const { data: { user }, error: authError } = await supabase.auth.getUser()
    console.log('üë§ –ü–û–ò–°–ö –ß–ê–¢–ê - –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', {
      hasUser: !!user,
      userId: user?.id?.substring(0, 8),
      authError: authError ? JSON.stringify(authError) : null
    })

    if (authError || !user) {
      console.error('‚ùå –ü–û–ò–°–ö –ß–ê–¢–ê - –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω:', authError)
      return null
    }

    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —á–∞—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    console.log('üìã –ü–û–ò–°–ö –ß–ê–¢–ê - –ó–∞–≥—Ä—É–∑–∫–∞ —Å–ø–∏—Å–∫–∞ —á–∞—Ç–æ–≤ —á–µ—Ä–µ–∑ get_user_chats')
    const { data: chats, error: chatsError } = await supabase.rpc('get_user_chats')

    console.log('üìã –ü–û–ò–°–ö –ß–ê–¢–ê - –†–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–≥—Ä—É–∑–∫–∏ —á–∞—Ç–æ–≤:', {
      chatsCount: chats?.length || 0,
      chatsError: chatsError ? {
        message: chatsError.message,
        details: chatsError.details,
        code: chatsError.code
      } : null,
      chatsPreview: chats?.slice(0, 3).map((c: any) => ({
        id: c.id,
        name: c.name,
        type: c.type,
        other_participant_id: c.other_participant_id?.substring(0, 8)
      }))
    })

    if (chatsError) {
      console.error('‚ùå –ü–û–ò–°–ö –ß–ê–¢–ê - –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —á–∞—Ç–æ–≤:', chatsError)
      return null
    }

    // –ò—â–µ–º –ø—Ä–∏–≤–∞—Ç–Ω—ã–π —á–∞—Ç —Å —Ü–µ–ª–µ–≤—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
    console.log('üîç –ü–û–ò–°–ö –ß–ê–¢–ê - –ü–æ–∏—Å–∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —á–∞—Ç–∞ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º:', {
      targetUserId: targetUserId.substring(0, 8),
      totalChats: chats?.length || 0
    })

    const targetChat = chats?.find((chat: any) =>
      chat.type === 'private' && chat.other_participant_id === targetUserId
    )

    console.log('üîç –ü–û–ò–°–ö –ß–ê–¢–ê - –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–∏—Å–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —á–∞—Ç–∞:', {
      found: !!targetChat,
      targetChat: targetChat ? {
        id: targetChat.id,
        name: targetChat.name,
        type: targetChat.type,
        other_participant_id: targetChat.other_participant_id?.substring(0, 8)
      } : null
    })

    if (targetChat) {
      console.log('‚úÖ –ü–û–ò–°–ö –ß–ê–¢–ê - –ù–∞–π–¥–µ–Ω —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —á–∞—Ç:', {
        chatId: targetChat.id,
        chatName: targetChat.name
      })
      return targetChat.id
    }

    // –ï—Å–ª–∏ —á–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π
    console.log('üìù –ü–û–ò–°–ö –ß–ê–¢–ê - –ß–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π:', {
      targetUserId: targetUserId.substring(0, 8),
      currentUserId: user.id.substring(0, 8)
    })

    const { data: newChat, error: createError } = await supabase.rpc('create_private_chat', {
      other_user_id: targetUserId
    })

    console.log('üìù –ü–û–ò–°–ö –ß–ê–¢–ê - –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ —á–∞—Ç–∞:', {
      newChat,
      createError: createError ? {
        message: createError.message,
        details: createError.details,
        hint: createError.hint,
        code: createError.code
      } : null
    })

    if (createError) {
      console.error('‚ùå –ü–û–ò–°–ö –ß–ê–¢–ê - –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —á–∞—Ç–∞:', createError)
      return null
    }

    console.log('‚úÖ –ü–û–ò–°–ö –ß–ê–¢–ê - –°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π —á–∞—Ç:', {
      newChat,
      targetUserId: targetUserId.substring(0, 8)
    })
    return newChat
  } catch (error) {
    console.error('‚ùå –ü–û–ò–°–ö –ß–ê–¢–ê - Exception:', {
      error,
      targetUserId: targetUserId.substring(0, 8),
      message: error instanceof Error ? error.message : 'Unknown error',
      stack: error instanceof Error ? error.stack : undefined
    })
    return null
  }
}
