'use client'

/**
 * –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤ –∑–≤–æ–Ω–∫–æ–≤
 * –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç 100% –¥–æ—Å—Ç–∞–≤–∫—É —Å–∏–≥–Ω–∞–ª–æ–≤ —á–µ—Ä–µ–∑ —É—Å—Ç–æ–π—á–∏–≤—ã–µ –∫–∞–Ω–∞–ª—ã
 */

import { createClient } from '@/utils/supabase/client'

interface SendCallSignalParams {
  targetUserId: string
  callerUserId: string
  callerName: string
  event: 'incoming_call' | 'call_accepted' | 'call_rejected' | 'call_ended' | 'call_cancelled'
  extraPayload?: Record<string, any>
}

/**
 * –ù–∞–¥–µ–∂–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–∏–≥–Ω–∞–ª–∞ –∑–≤–æ–Ω–∫–∞ —á–µ—Ä–µ–∑ –ø—Ä—è–º–æ–π –∫–∞–Ω–∞–ª Supabase
 */
export const sendCallSignal = async ({
  targetUserId,
  callerUserId,
  callerName,
  event,
  extraPayload = {}
}: SendCallSignalParams): Promise<boolean> => {
  console.log(`üì° CallSignaling: Sending ${event} signal to user:`, targetUserId.slice(0, 8))
  
  const supabase = createClient()
  
  let signalSent = false
  let attempts = 0
  const maxAttempts = 3
  
  while (!signalSent && attempts < maxAttempts) {
    attempts++
    console.log(`üì° CallSignaling: Attempt ${attempts}/${maxAttempts} to send ${event}`)
    
    try {
      // –°–æ–∑–¥–∞–µ–º –∫–∞–Ω–∞–ª –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ –∫–∞–Ω–∞–ª –ø–æ–ª—É—á–∞—Ç–µ–ª—è
      const receiverChannelId = `calls:${targetUserId}`
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–∏–≥–Ω–∞–ª –Ω–∞–ø—Ä—è–º—É—é —á–µ—Ä–µ–∑ Supabase broadcast
      const payload = {
        caller_id: callerUserId,
        caller_name: callerName,
        timestamp: Date.now(),
        ...extraPayload
      }
      
      console.log(`üì° CallSignaling: Sending ${event} with payload:`, {
        ...payload,
        caller_id: payload.caller_id?.slice(0, 8),
        to_channel: receiverChannelId
      })
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–∏–≥–Ω–∞–ª –Ω–∞–ø—Ä—è–º—É—é –Ω–∞ –∫–∞–Ω–∞–ª –ø–æ–ª—É—á–∞—Ç–µ–ª—è
      const result = await supabase
        .channel(receiverChannelId)
        .send({
          type: 'broadcast',
          event,
          payload
        })
      
      console.log(`üì° CallSignaling: ${event} signal result:`, result)
      
      if (result === 'ok') {
        signalSent = true
        console.log(`‚úÖ CallSignaling: ${event} signal sent successfully`)
      } else {
        throw new Error(`Send failed with result: ${result}`)
      }
      
    } catch (error) {
      console.warn(`‚ùå CallSignaling: ${event} signal attempt ${attempts} failed:`, error)
      
      if (attempts < maxAttempts) {
        console.log(`üîÑ CallSignaling: Retrying ${event} signal...`)
        await new Promise(resolve => setTimeout(resolve, 1000 * attempts)) // –£–≤–µ–ª–∏—á–∏–≤–∞—é—â–∞—è—Å—è –∑–∞–¥–µ—Ä–∂–∫–∞
      }
    }
  }
  
  if (!signalSent) {
    console.error(`üí• CallSignaling: Failed to send ${event} signal after all attempts`)
    return false
  }
  
  return true
}

/**
 * –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–∏–≥–Ω–∞–ª–∞ –≤—Ö–æ–¥—è—â–µ–≥–æ –∑–≤–æ–Ω–∫–∞
 */
export const sendIncomingCallSignal = async (
  targetUserId: string,
  callerUserId: string,
  callerName: string
): Promise<boolean> => {
  return sendCallSignal({
    targetUserId,
    callerUserId,
    callerName,
    event: 'incoming_call'
  })
}

/**
 * –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–∏–≥–Ω–∞–ª–∞ –ø—Ä–∏–Ω—è—Ç–∏—è –∑–≤–æ–Ω–∫–∞
 */
export const sendCallAcceptedSignal = async (
  callerUserId: string,
  accepterUserId: string,
  accepterName: string
): Promise<boolean> => {
  return sendCallSignal({
    targetUserId: callerUserId,
    callerUserId: accepterUserId,
    callerName: accepterName,
    event: 'call_accepted',
    extraPayload: { accepter_id: accepterUserId }
  })
}

/**
 * –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–∏–≥–Ω–∞–ª–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –∑–≤–æ–Ω–∫–∞
 */
export const sendCallRejectedSignal = async (
  callerUserId: string,
  rejecterUserId: string,
  rejecterName: string
): Promise<boolean> => {
  return sendCallSignal({
    targetUserId: callerUserId,
    callerUserId: rejecterUserId,
    callerName: rejecterName,
    event: 'call_rejected',
    extraPayload: { rejector_id: rejecterUserId }
  })
}

/**
 * –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–∏–≥–Ω–∞–ª–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–≤–æ–Ω–∫–∞
 */
export const sendCallEndedSignal = async (
  targetUserId: string,
  senderUserId: string,
  senderName: string
): Promise<boolean> => {
  return sendCallSignal({
    targetUserId,
    callerUserId: senderUserId,
    callerName: senderName,
    event: 'call_ended'
  })
}

/**
 * –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–∏–≥–Ω–∞–ª–∞ –æ—Ç–º–µ–Ω—ã –∑–≤–æ–Ω–∫–∞
 */
export const sendCallCancelledSignal = async (
  targetUserId: string,
  callerUserId: string,
  callerName: string
): Promise<boolean> => {
  return sendCallSignal({
    targetUserId,
    callerUserId,
    callerName,
    event: 'call_cancelled'
  })
}
