'use client'

/**
 * –£—Å—Ç–æ–π—á–∏–≤—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –∫–∞–Ω–∞–ª–æ–≤ Supabase —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º
 * –†–µ—à–∞–µ—Ç –ø—Ä–æ–±–ª–µ–º—É —Å–±—Ä–æ—Å–æ–≤ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —á–µ—Ä–µ–∑ 40 –º–∏–Ω—É—Ç
 */

import { createClient } from '@/utils/supabase/client'
import { createSubscriptionHandler, createReconnectionManager, logSubscriptionError } from './subscriptionHelpers'

interface ChannelConfig {
  channelName: string
  setup: (channel: any) => any
  onSubscribed?: () => void
  onError?: (error: string) => void
  maxReconnectAttempts?: number
  reconnectDelay?: number
  keepAliveInterval?: number
  healthCheckInterval?: number
}

interface ChannelState {
  channel: any
  config: ChannelConfig
  reconnectionManager: any
  keepAliveTimer?: NodeJS.Timeout
  healthCheckTimer?: NodeJS.Timeout
  lastActivity: number
  errorCount: number
  isHealthy: boolean
  isReconnecting: boolean  // –§–ª–∞–≥ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
  recreationCount: number  // –°—á–µ—Ç—á–∏–∫ –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏–π –∫–∞–Ω–∞–ª–∞
}

class ResilientChannelManager {
  private static instance: ResilientChannelManager
  private channels: Map<string, ChannelState> = new Map()
  private supabase = createClient()
  private globalHealthTimer?: NodeJS.Timeout

  private constructor() {
    this.startGlobalHealthMonitoring()
    this.setupGlobalErrorHandling()
  }

  static getInstance(): ResilientChannelManager {
    if (!ResilientChannelManager.instance) {
      ResilientChannelManager.instance = new ResilientChannelManager()
    }
    return ResilientChannelManager.instance
  }

  // –°–æ–∑–¥–∞–Ω–∏–µ —É—Å—Ç–æ–π—á–∏–≤–æ–≥–æ –∫–∞–Ω–∞–ª–∞ —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º
  createResilientChannel(config: ChannelConfig): Promise<any> {
    const {
      channelName,
      setup,
      maxReconnectAttempts = 3,  // –£–º–µ–Ω—å—à–∏–ª–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫
      reconnectDelay = 5000,     // –£–≤–µ–ª–∏—á–∏–ª–∏ –∑–∞–¥–µ—Ä–∂–∫—É –º–µ–∂–¥—É –ø–æ–ø—ã—Ç–∫–∞–º–∏
      keepAliveInterval = 60000, // –£–≤–µ–ª–∏—á–∏–ª–∏ –∏–Ω—Ç–µ—Ä–≤–∞–ª keep-alive –¥–æ 1 –º–∏–Ω—É—Ç—ã
      healthCheckInterval = 120000 // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è –∫–∞–∂–¥—ã–µ 2 –º–∏–Ω—É—Ç—ã
    } = config

    console.log(`üèóÔ∏è [ResilientChannel] Creating resilient channel: ${channelName}`)

    // –£–¥–∞–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫–∞–Ω–∞–ª –µ—Å–ª–∏ –µ—Å—Ç—å
    this.removeChannel(channelName)

    return new Promise((resolve, reject) => {
      const createChannel = () => {
        try {
          // –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –∫–∞–Ω–∞–ª—ã —Å —Ç–µ–º –∂–µ –∏–º–µ–Ω–µ–º
          this.cleanupExistingChannels(channelName)

          console.log(`üì° [ResilientChannel] Creating new channel: ${channelName}`)
          const channel = this.supabase.channel(channelName)

          // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∫–∞–Ω–∞–ª —á–µ—Ä–µ–∑ –ø–µ—Ä–µ–¥–∞–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
          const configuredChannel = setup(channel)

          // –°–æ–∑–¥–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
          const reconnectionManager = createReconnectionManager(
            () => {
              console.log(`üîÑ [ResilientChannel] Reconnecting channel: ${channelName}`)
              // –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–µ—Ç–æ–¥ –∫–ª–∞—Å—Å–∞ –≤–º–µ—Å—Ç–æ —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞ –ª–æ–∫–∞–ª—å–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
              this.recreateChannel(channelName)
            },
            maxReconnectAttempts,
            reconnectDelay
          )

          // –°–æ—Å—Ç–æ—è–Ω–∏–µ –∫–∞–Ω–∞–ª–∞
          const channelState: ChannelState = {
            channel: configuredChannel,
            config,
            reconnectionManager,
            lastActivity: Date.now(),
            errorCount: 0,
            isHealthy: false,
            isReconnecting: false,
            recreationCount: 0
          }

          // –û–ø—Ä–µ–¥–µ–ª—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –∫–∞–Ω–∞–ª–æ–º WebRTC –∏–ª–∏ –∑–≤–æ–Ω–∫–æ–≤
          const isWebRTCOrCallChannel = channelName.includes('webrtc:') || channelName.includes('calls:')
          
          // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
          configuredChannel.subscribe(
            createSubscriptionHandler(`ResilientChannel:${channelName}`, {
              onSubscribed: () => {
                console.log(`‚úÖ [ResilientChannel] Successfully connected: ${channelName}`)
                channelState.isHealthy = true
                channelState.errorCount = 0
                channelState.lastActivity = Date.now()
                reconnectionManager.reset()

                // –ó–∞–ø—É—Å–∫–∞–µ–º keep-alive –∏ health check
                this.startKeepAlive(channelState, keepAliveInterval)
                this.startHealthCheck(channelState, healthCheckInterval)

                config.onSubscribed?.()
                resolve(configuredChannel)
              },
              onError: (error) => {
                console.error(`‚ùå [ResilientChannel] Channel error in ${channelName}:`, error)
                channelState.isHealthy = false
                channelState.errorCount++
                
                // –ü—Ä–∏ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ –æ—à–∏–±–æ–∫ - –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ (—Å –∑–∞—â–∏—Ç–æ–π)
                if (channelState.errorCount >= 3 && !channelState.isReconnecting) {
                  console.log(`üîÑ [ResilientChannel] Too many errors (${channelState.errorCount}), attempting reconnection for ${channelName}`)
                  this.attemptReconnection(channelState)
                }

                config.onError?.(error)
              },
              onTimeout: (error) => {
                console.warn(`‚è±Ô∏è [ResilientChannel] Timeout in ${channelName}:`, error)
                channelState.isHealthy = false
                if (!channelState.isReconnecting) {
                  this.attemptReconnection(channelState)
                }
              },
              onClosed: () => {
                console.log(`üö™ [ResilientChannel] Channel closed: ${channelName}`)
                channelState.isHealthy = false
                if (!channelState.isReconnecting) {
                  this.attemptReconnection(channelState)
                }
              },
              suppressExpectedErrors: isWebRTCOrCallChannel // –ü–æ–¥–∞–≤–ª—è–µ–º –æ–∂–∏–¥–∞–µ–º—ã–µ –æ—à–∏–±–∫–∏ –¥–ª—è WebRTC –∏ –∑–≤–æ–Ω–∫–æ–≤
            })
          )

          // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–∞–Ω–∞–ª–∞
          this.channels.set(channelName, channelState)

        } catch (error) {
          console.error(`üí• [ResilientChannel] Failed to create channel ${channelName}:`, error)
          reject(error)
        }
      }

      createChannel()
    })
  }

  // –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞ –±–µ–∑ —Ä–µ–∫—É—Ä—Å–∏–∏
  private recreateChannel(channelName: string) {
    const channelState = this.channels.get(channelName)
    if (!channelState) {
      console.warn(`‚ö†Ô∏è [ResilientChannel] Cannot recreate - channel not found: ${channelName}`)
      return
    }

    // –ó–∞—â–∏—Ç–∞ –æ—Ç –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    if (channelState.isReconnecting) {
      console.warn(`‚ö†Ô∏è [ResilientChannel] Already reconnecting: ${channelName}`)
      return
    }

    // –ó–∞—â–∏—Ç–∞ –æ—Ç —Å–ª–∏—à–∫–æ–º —á–∞—Å—Ç—ã—Ö –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏–π
    channelState.recreationCount++
    if (channelState.recreationCount > 10) {
      console.error(`üíÄ [ResilientChannel] Too many recreations (${channelState.recreationCount}) for: ${channelName}`)
      this.channels.delete(channelName)
      return
    }

    console.log(`üîÑ [ResilientChannel] Recreating channel: ${channelName} (attempt ${channelState.recreationCount})`)
    channelState.isReconnecting = true
    
    // –û—á–∏—â–∞–µ–º —Ç–∞–π–º–µ—Ä—ã —Ç–µ–∫—É—â–µ–≥–æ –∫–∞–Ω–∞–ª–∞
    this.clearChannelTimers(channelState)
    
    // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π –∫–∞–Ω–∞–ª
    try {
      if (channelState.channel && typeof channelState.channel.unsubscribe === 'function') {
        channelState.channel.unsubscribe()
      }
      this.supabase.removeChannel(channelState.channel)
    } catch (error) {
      console.warn(`‚ö†Ô∏è [ResilientChannel] Error cleaning up old channel:`, error)
    }

    // –ü–µ—Ä–µ—Å–æ–∑–¥–∞–µ–º –∫–∞–Ω–∞–ª —Å —Ç–æ–π –∂–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π
    try {
      this.cleanupExistingChannels(channelName)
      
      const channel = this.supabase.channel(channelName)
      const configuredChannel = channelState.config.setup(channel)
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–∞–Ω–∞–ª–∞
      channelState.channel = configuredChannel
      channelState.lastActivity = Date.now()
      channelState.isHealthy = false
      
      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –∫–∞–Ω–∞–ª–æ–º WebRTC –∏–ª–∏ –∑–≤–æ–Ω–∫–æ–≤ (–¥–ª—è –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è)
      const isWebRTCOrCallChannel = channelName.includes('webrtc:') || channelName.includes('calls:')
      
      // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –∑–∞–Ω–æ–≤–æ
      configuredChannel.subscribe(
        createSubscriptionHandler(`ResilientChannel:${channelName}`, {
          onSubscribed: () => {
            console.log(`‚úÖ [ResilientChannel] Successfully reconnected: ${channelName}`)
            channelState.isHealthy = true
            channelState.errorCount = 0
            channelState.lastActivity = Date.now()
            channelState.isReconnecting = false  // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
            channelState.recreationCount = 0     // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –ø—Ä–∏ —É—Å–ø–µ—Ö–µ
            channelState.reconnectionManager.reset()

            // –ó–∞–ø—É—Å–∫–∞–µ–º keep-alive –∏ health check
            this.startKeepAlive(channelState, channelState.config.keepAliveInterval || 30000)
            this.startHealthCheck(channelState, channelState.config.healthCheckInterval || 60000)

            channelState.config.onSubscribed?.()
          },
          onError: (error) => {
            console.error(`‚ùå [ResilientChannel] Reconnection error in ${channelName}:`, error)
            channelState.isHealthy = false
            channelState.errorCount++
            channelState.config.onError?.(error)
          },
          onTimeout: (error) => {
            console.warn(`‚è±Ô∏è [ResilientChannel] Reconnection timeout in ${channelName}:`, error)
            channelState.isHealthy = false
          },
          onClosed: () => {
            console.log(`üö™ [ResilientChannel] Reconnected channel closed: ${channelName}`)
            channelState.isHealthy = false
          },
          suppressExpectedErrors: isWebRTCOrCallChannel // –ü–æ–¥–∞–≤–ª—è–µ–º –æ–∂–∏–¥–∞–µ–º—ã–µ –æ—à–∏–±–∫–∏ –¥–ª—è WebRTC –∏ –∑–≤–æ–Ω–∫–æ–≤
        })
      )
    } catch (error) {
      console.error(`üí• [ResilientChannel] Failed to recreate channel ${channelName}:`, error)
      channelState.errorCount++
      channelState.isReconnecting = false  // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –ø—Ä–∏ –æ—à–∏–±–∫–µ
    }
  }

  // –ü–æ–ø—ã—Ç–∫–∞ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞
  private attemptReconnection(channelState: ChannelState) {
    const { channelName } = channelState.config
    
    console.log(`üîÑ [ResilientChannel] Attempting reconnection for: ${channelName}`)
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –º–µ–Ω–µ–¥–∂–µ—Ä
    const success = channelState.reconnectionManager.reconnect()
    if (!success) {
      console.error(`üíÄ [ResilientChannel] Max reconnection attempts reached for: ${channelName}`)
      this.channels.delete(channelName)
    }
  }

  // Keep-alive –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
  private startKeepAlive(channelState: ChannelState, interval: number) {
    if (channelState.keepAliveTimer) {
      clearInterval(channelState.keepAliveTimer)
    }

    channelState.keepAliveTimer = setInterval(() => {
      if (channelState.isHealthy && channelState.channel) {
        try {
          // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º ping —á–µ—Ä–µ–∑ –∫–∞–Ω–∞–ª
          channelState.channel.send({
            type: 'ping',
            timestamp: Date.now()
          })
          channelState.lastActivity = Date.now()
          
          console.log(`üíì [ResilientChannel] Keep-alive sent for: ${channelState.config.channelName}`)
        } catch (error) {
          console.warn(`üíì [ResilientChannel] Keep-alive failed for ${channelState.config.channelName}:`, error)
          channelState.isHealthy = false
        }
      }
    }, interval)
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è –∫–∞–Ω–∞–ª–∞
  private startHealthCheck(channelState: ChannelState, interval: number) {
    if (channelState.healthCheckTimer) {
      clearInterval(channelState.healthCheckTimer)
    }

    channelState.healthCheckTimer = setInterval(() => {
      const now = Date.now()
      const timeSinceLastActivity = now - channelState.lastActivity
      const { channelName } = channelState.config

      console.log(`üè• [ResilientChannel] Health check for ${channelName}:`, {
        isHealthy: channelState.isHealthy,
        errorCount: channelState.errorCount,
        timeSinceLastActivity: `${Math.round(timeSinceLastActivity / 1000)}s`,
        channelState: channelState.channel?.state
      })

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —É—Å–ª–æ–≤–∏—è (—Å –∑–∞—â–∏—Ç–æ–π –æ—Ç –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è)
      if (timeSinceLastActivity > 600000) { // –£–≤–µ–ª–∏—á–∏–ª–∏ –¥–æ 10 –º–∏–Ω—É—Ç –±–µ–∑ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
        console.warn(`‚ö†Ô∏è [ResilientChannel] No activity for 10+ minutes in ${channelName}, reconnecting`)
        channelState.isHealthy = false
        if (!channelState.isReconnecting) {
          this.attemptReconnection(channelState)
        }
        return
      }

      if (channelState.errorCount >= 5 && !channelState.isReconnecting) {
        console.warn(`‚ö†Ô∏è [ResilientChannel] Too many errors (${channelState.errorCount}) in ${channelName}, reconnecting`)
        this.attemptReconnection(channelState)
        return
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–∞–Ω–∞–ª–∞
      if (channelState.channel && channelState.channel.state === 'closed' && !channelState.isReconnecting) {
        console.warn(`‚ö†Ô∏è [ResilientChannel] Channel is closed for ${channelName}, reconnecting`)
        channelState.isHealthy = false
        this.attemptReconnection(channelState)
      }
    }, interval)
  }

  // –ì–ª–æ–±–∞–ª—å–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–¥–æ—Ä–æ–≤—å—è –≤—Å–µ—Ö –∫–∞–Ω–∞–ª–æ–≤
  private startGlobalHealthMonitoring() {
    this.globalHealthTimer = setInterval(() => {
      const stats = this.getChannelStats()
      
      console.log(`üåç [ResilientChannel] Global health check:`, stats)

      // –ë–æ–ª–µ–µ –∫–æ–Ω—Å–µ—Ä–≤–∞—Ç–∏–≤–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª—è –º–∞—Å—Å–æ–≤–æ–≥–æ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
      if (stats.unhealthyChannels > 2 && stats.unhealthyChannels > stats.totalChannels * 0.7 && stats.totalChannels > 0) {
        console.warn(`üö® [ResilientChannel] Too many unhealthy channels (${stats.unhealthyChannels}/${stats.totalChannels}), triggering mass reconnection`)
        this.massReconnection()
      }
    }, 300000) // –£–≤–µ–ª–∏—á–∏–ª–∏ –¥–æ 5 –º–∏–Ω—É—Ç
  }

  // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≥–ª–æ–±–∞–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫
  private setupGlobalErrorHandling() {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –º—ã –Ω–∞ –∫–ª–∏–µ–Ω—Ç–µ
    if (typeof window === 'undefined') {
      return
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
    const originalWebSocket = window.WebSocket
    const self = this

    window.WebSocket = class extends originalWebSocket {
      constructor(url: string | URL, protocols?: string | string[]) {
        super(url, protocols)

        this.addEventListener('error', (event) => {
          console.error('üåê [ResilientChannel] Global WebSocket error:', event)
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å–ª–∏ —ç—Ç–æ Supabase WebSocket
          if (typeof url === 'string' && url.includes('supabase.co/realtime')) {
            console.log('üîÑ [ResilientChannel] Supabase WebSocket error detected, triggering reconnection check')
            setTimeout(() => self.checkAllChannelsHealth(), 1000)
          }
        })

        this.addEventListener('close', (event) => {
          console.warn('üåê [ResilientChannel] Global WebSocket closed:', event.code, event.reason)
          if (typeof url === 'string' && url.includes('supabase.co/realtime')) {
            console.log('üîÑ [ResilientChannel] Supabase WebSocket closed, triggering reconnection check')
            setTimeout(() => self.checkAllChannelsHealth(), 2000)
          }
        })
      }
    }
  }

  // –û—á–∏—Å—Ç–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∫–∞–Ω–∞–ª–æ–≤ —Å —Ç–µ–º –∂–µ –∏–º–µ–Ω–µ–º
  private cleanupExistingChannels(channelName: string) {
    const existingChannels = this.supabase.getChannels().filter(ch => 
      ch.topic === channelName || ch.topic.includes(channelName)
    )

    existingChannels.forEach(ch => {
      try {
        this.supabase.removeChannel(ch)
        console.log(`üßπ [ResilientChannel] Cleaned up existing channel: ${ch.topic}`)
      } catch (error) {
        console.warn('üßπ [ResilientChannel] Error cleaning up channel:', error)
      }
    })
  }

  // –û—á–∏—Å—Ç–∫–∞ —Ç–∞–π–º–µ—Ä–æ–≤ –∫–∞–Ω–∞–ª–∞
  private clearChannelTimers(channelState: ChannelState) {
    if (channelState.keepAliveTimer) {
      clearInterval(channelState.keepAliveTimer)
      channelState.keepAliveTimer = undefined
    }
    if (channelState.healthCheckTimer) {
      clearInterval(channelState.healthCheckTimer)
      channelState.healthCheckTimer = undefined
    }
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è –≤—Å–µ—Ö –∫–∞–Ω–∞–ª–æ–≤
  private checkAllChannelsHealth() {
    console.log('üè• [ResilientChannel] Checking health of all channels...')
    
    for (const [channelName, channelState] of this.channels) {
      if (!channelState.isHealthy || channelState.errorCount > 2) {
        console.log(`üîÑ [ResilientChannel] Triggering reconnection for unhealthy channel: ${channelName}`)
        this.attemptReconnection(channelState)
      }
    }
  }

  // –ú–∞—Å—Å–æ–≤–æ–µ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –≤—Å–µ—Ö –∫–∞–Ω–∞–ª–æ–≤
  private massReconnection() {
    console.log('üö® [ResilientChannel] Starting mass reconnection...')
    
    for (const [channelName, channelState] of this.channels) {
      setTimeout(() => {
        console.log(`üîÑ [ResilientChannel] Mass reconnecting: ${channelName}`)
        this.attemptReconnection(channelState)
      }, Math.random() * 5000) // –°–ª—É—á–∞–π–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–æ 5 —Å–µ–∫—É–Ω–¥
    }
  }

  // –£–¥–∞–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞
  removeChannel(channelName: string): void {
    const channelState = this.channels.get(channelName)
    if (!channelState) return

    console.log(`üóëÔ∏è [ResilientChannel] Removing channel: ${channelName}`)

    // –û—á–∏—â–∞–µ–º —Ç–∞–π–º–µ—Ä—ã
    this.clearChannelTimers(channelState)

    // –û—Ç–º–µ–Ω—è–µ–º –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    channelState.reconnectionManager.cancel()

    // –£–¥–∞–ª—è–µ–º –∫–∞–Ω–∞–ª
    try {
      if (channelState.channel) {
        channelState.channel.unsubscribe()
        this.supabase.removeChannel(channelState.channel)
      }
    } catch (error) {
      console.warn(`‚ö†Ô∏è [ResilientChannel] Error removing channel:`, error)
    }

    this.channels.delete(channelName)
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫–∞–Ω–∞–ª–æ–≤
  getChannelStats() {
    const totalChannels = this.channels.size
    const healthyChannels = Array.from(this.channels.values()).filter(state => state.isHealthy).length
    const unhealthyChannels = totalChannels - healthyChannels
    const totalErrors = Array.from(this.channels.values()).reduce((sum, state) => sum + state.errorCount, 0)

    return {
      totalChannels,
      healthyChannels,
      unhealthyChannels,
      totalErrors,
      channels: Array.from(this.channels.keys())
    }
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞
  getChannel(channelName: string) {
    return this.channels.get(channelName)?.channel
  }

  // –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ—Ö –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–æ–≤
  shutdown() {
    console.log('üõë [ResilientChannel] Shutting down...')

    if (this.globalHealthTimer) {
      clearInterval(this.globalHealthTimer)
    }

    for (const channelName of this.channels.keys()) {
      this.removeChannel(channelName)
    }
  }
}

export const resilientChannelManager = ResilientChannelManager.getInstance()

// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—á–∏—Å—Ç–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã (—Ç–æ–ª—å–∫–æ –Ω–∞ –∫–ª–∏–µ–Ω—Ç–µ)
if (typeof window !== 'undefined') {
  window.addEventListener('beforeunload', () => {
    resilientChannelManager.shutdown()
  })

  // –¢–∞–∫–∂–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
  window.addEventListener('load', () => {
    // –≠—Ç–æ –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç —á—Ç–æ singleton –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –Ω–∞ –∫–ª–∏–µ–Ω—Ç–µ
    const manager = ResilientChannelManager.getInstance()
    console.log('üåê [ResilientChannel] Client-side initialization complete')
  })
}
