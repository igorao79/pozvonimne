'use client'

import { createClient } from '@/utils/supabase/client'
import useTypingStore from '@/store/useTypingStore'

class GlobalTypingManager {
  private supabase = createClient()
  private subscriptions = new Map<string, any>()
  private typingTimeouts = new Map<string, NodeJS.Timeout>()
  private isInitialized = false
  
  public initialize(userId: string) {
    if (this.isInitialized) {
      console.log('üåê [GlobalTyping] –ú–µ–Ω–µ–¥–∂–µ—Ä —É–∂–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω')
      return
    }

    console.log('üåê [GlobalTyping] –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä typing –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', userId)
    this.isInitialized = true
    
    // –°–æ–∑–¥–∞–µ–º –ì–õ–û–ë–ê–õ–¨–ù–£–Æ –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ ALL typing indicators
    this.createGlobalSubscription(userId)
  }

  private createGlobalSubscription(userId: string) {
    const channelName = `global_typing_${userId}`
    
    console.log('üåê [GlobalTyping] –°–æ–∑–¥–∞–µ–º –ì–õ–û–ë–ê–õ–¨–ù–£–Æ –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ –≤—Å–µ typing indicators')
    
    const channel = this.supabase
      .channel(channelName)
      .on(
        'postgres_changes',
        {
          event: '*',
          schema: 'public',
          table: 'typing_indicators'
          // –ù–ï —Ñ–∏–ª—å—Ç—Ä—É–µ–º –ø–æ chat_id - —Å–ª—É—à–∞–µ–º –í–°–ï —Å–æ–±—ã—Ç–∏—è
        },
        (payload) => {
          this.handleTypingEvent(payload, userId)
        }
      )
      .subscribe((status) => {
        console.log('üåê [GlobalTyping] –°—Ç–∞—Ç—É—Å –≥–ª–æ–±–∞–ª—å–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏:', status)
        
        if (status === 'SUBSCRIBED') {
          console.log('üéâ [GlobalTyping] –ì–õ–û–ë–ê–õ–¨–ù–ê–Ø –ü–û–î–ü–ò–°–ö–ê –ê–ö–¢–ò–í–ù–ê!')
        } else if (status === 'CLOSED') {
          console.log('üí• [GlobalTyping] –ì–õ–û–ë–ê–õ–¨–ù–ê–Ø –ü–û–î–ü–ò–°–ö–ê –ó–ê–ö–†–´–¢–ê!')
          // –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∞–µ–º—Å—è
          setTimeout(() => {
            console.log('üîÑ [GlobalTyping] –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—É—é –ø–æ–¥–ø–∏—Å–∫—É...')
            this.createGlobalSubscription(userId)
          }, 1000)
        }
      })

    this.subscriptions.set('global', channel)
  }

  private handleTypingEvent(payload: any, currentUserId: string) {
    const { eventType, new: newRecord, old: oldRecord } = payload
    const chatId = (newRecord as any)?.chat_id || (oldRecord as any)?.chat_id
    const userId = (newRecord as any)?.user_id || (oldRecord as any)?.user_id

    if (!chatId || !userId) {
      console.log('‚ö†Ô∏è [GlobalTyping] –°–æ–±—ã—Ç–∏–µ –±–µ–∑ chat_id –∏–ª–∏ user_id:', payload)
      return
    }

    // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–≤–æ–∏ —Å–æ–±—ã—Ç–∏—è
    if (userId === currentUserId) {
      console.log('‚ö†Ô∏è [GlobalTyping] –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ:', userId)
      return
    }

    const { startTyping, stopTyping } = useTypingStore.getState()

    if (eventType === 'INSERT') {
      console.log(`‚úÖ [Typing] ${userId} –ø–µ—á–∞—Ç–∞–µ—Ç –≤ ${chatId}`)
      startTyping(chatId, userId)
      this.setTypingTimeout(chatId, userId, 5000)
    } else if (eventType === 'DELETE') {
      console.log(`üõë [Typing] ${userId} –ø—Ä–µ–∫—Ä–∞—Ç–∏–ª –ø–µ—á–∞—Ç–∞—Ç—å –≤ ${chatId}`)
      stopTyping(chatId, userId)
      this.clearTypingTimeout(chatId, userId)
    } else if (eventType === 'UPDATE') {
      startTyping(chatId, userId)
      this.setTypingTimeout(chatId, userId, 5000)
    }
  }

  public setTypingTimeout(chatId: string, userId: string, timeoutMs: number) {
    const typingKey = `${chatId}_${userId}`

    // –û—á–∏—â–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ç–∞–π–º–∞—É—Ç
    this.clearTypingTimeout(chatId, userId)

    const timeout = setTimeout(() => {
      console.log(`‚è∞ [Typing] –¢–∞–π–º–∞—É—Ç –¥–ª—è ${userId}`)
      const { stopTyping } = useTypingStore.getState()
      stopTyping(chatId, userId)
      this.typingTimeouts.delete(typingKey)
    }, timeoutMs)

    this.typingTimeouts.set(typingKey, timeout)
  }

  public clearTypingTimeout(chatId: string, userId: string) {
    const typingKey = `${chatId}_${userId}`
    const existingTimeout = this.typingTimeouts.get(typingKey)

    if (existingTimeout) {
      clearTimeout(existingTimeout)
      this.typingTimeouts.delete(typingKey)
    }
  }

  public cleanup() {
    console.log('üßπ [GlobalTyping] –û—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö –≥–ª–æ–±–∞–ª—å–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫ –∏ —Ç–∞–π–º–∞—É—Ç–æ–≤')

    // –û—á–∏—â–∞–µ–º –≤—Å–µ —Ç–∞–π–º–∞—É—Ç—ã
    this.typingTimeouts.forEach((timeout) => {
      clearTimeout(timeout)
    })
    this.typingTimeouts.clear()

    // –û—á–∏—â–∞–µ–º –ø–æ–¥–ø–∏—Å–∫–∏
    this.subscriptions.forEach((channel) => {
      this.supabase.removeChannel(channel)
    })
    this.subscriptions.clear()

    this.isInitialized = false
  }
}

// –°–æ–∑–¥–∞–µ–º —Å–∏–Ω–≥–ª—Ç–æ–Ω
export const globalTypingManager = new GlobalTypingManager()
