'use client'

import { useState } from 'react'
import useUsers from '@/hooks/useUsers'
import useCallStore from '@/store/useCallStore'
import { createClient } from '@/utils/supabase/client'
import { default as UserProfile } from '../Profile/UserProfile'
import LoadingState from './LoadingState'
import ErrorState from './ErrorState'
import EmptyState from './EmptyState'
import CurrentUserCard from './CurrentUserCard'
import UserCard from './UserCard'

interface BroadcastPayload {
  payload: any
  event: string
}

const UsersList = () => {
  const { users, loading, error, refreshUsers } = useUsers()
  const [callingUserId, setCallingUserId] = useState<string | null>(null)
  const [selectedUserProfile, setSelectedUserProfile] = useState<string | null>(null)

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –≤—Ö–æ–¥–∞
  const formatLastSeen = (lastSignInAt: string | null | undefined, status?: string) => {
    console.log('üîç formatLastSeen:', { lastSignInAt, status })

    if (!lastSignInAt) return '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'

    const lastSignIn = new Date(lastSignInAt)
    const now = new Date()
    const diffInMinutes = Math.floor((now.getTime() - lastSignIn.getTime()) / (1000 * 60))

    console.log('‚è∞ –í—Ä–µ–º—è:', { lastSignIn, now, diffInMinutes, status })

    // –û–Ω–ª–∞–π–Ω: –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –≤ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 –º–∏–Ω—É—Ç (–Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç —Å—Ç–∞—Ç—É—Å–∞ –≤ –ë–î)
    if (diffInMinutes <= 5) {
      console.log('‚úÖ –û–Ω–ª–∞–π–Ω! (–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –≤ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 –º–∏–Ω—É—Ç)')
      return '–æ–Ω–ª–∞–π–Ω'
    }

    const today = new Date(now.getFullYear(), now.getMonth(), now.getDate())
    const lastSignInDate = new Date(lastSignIn.getFullYear(), lastSignIn.getMonth(), lastSignIn.getDate())

    if (lastSignInDate.getTime() === today.getTime()) {
      // –°–µ–≥–æ–¥–Ω—è - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Ä–µ–º—è
      const timeString = lastSignIn.toLocaleTimeString('ru-RU', {
        hour: '2-digit',
        minute: '2-digit'
      })
      return `—Å–µ–≥–æ–¥–Ω—è, ${timeString}`
    } else {
      // –ù–µ —Å–µ–≥–æ–¥–Ω—è - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–∞—Ç—É
      return lastSignIn.toLocaleDateString('ru-RU')
    }
  }
  
  const {
    userId,
    startCall,
    isInCall,
    setError,
    setIsLoading,
    endCall
  } = useCallStore()

  const supabase = createClient()

  const handleCallUser = async (targetUserId: string, targetUsername: string, displayName: string) => {
    if (targetUserId === userId) {
      setError('–ù–µ–ª—å–∑—è –ø–æ–∑–≤–æ–Ω–∏—Ç—å —Å–∞–º–æ–º—É —Å–µ–±–µ')
      return
    }

    setCallingUserId(targetUserId)
    setIsLoading(true)
    setError(null)

    let callChannel: any = null

    try {
      console.log('üîÑ Starting call to user:', targetUserId)

      // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –∫–∞–Ω–∞–ª –ø–æ–ª—É—á–∞—Ç–µ–ª—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–∏–≥–Ω–∞–ª–∞
      const receiverChannelId = `calls:${targetUserId}`
      
      // –ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∏ –ø–µ—Ä–µ–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∫–∞–Ω–∞–ª–æ–≤
      let needsNewChannel = true
      try {
        const existingChannel = supabase.getChannels().find(ch => ch.topic === receiverChannelId)
        
        if (existingChannel && existingChannel.state !== 'closed') {
          console.log('üîÑ Reusing existing channel:', receiverChannelId, 'State:', existingChannel.state)
          callChannel = existingChannel
          needsNewChannel = false
        } else if (existingChannel) {
          console.log('üßπ Removing closed channel before creating new one')
          try {
            existingChannel.unsubscribe()
            supabase.removeChannel(existingChannel)
          } catch (err) {
            console.warn('Error removing closed channel:', err)
          }
        }
      } catch (err) {
        console.warn('Error checking existing channels:', err)
      }

      // –°–æ–∑–¥–∞—ë–º –∫–∞–Ω–∞–ª —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω—É–∂–µ–Ω –Ω–æ–≤—ã–π
      if (needsNewChannel) {
        callChannel = supabase.channel(receiverChannelId)
        console.log('üì° Created new call channel:', receiverChannelId)
      }

      // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ –∑–≤–æ–Ω–æ–∫ –¥–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏
      if (needsNewChannel) {
        callChannel
          .on('broadcast', { event: 'call_accepted' }, (payload: BroadcastPayload) => {
            console.log('üìû Call accepted by receiver:', payload)
            // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–∏–Ω—è—Ç–∏—è –∑–≤–æ–Ω–∫–∞ —É–∂–µ –µ—Å—Ç—å –≤ CallInterface
          })
          .on('broadcast', { event: 'call_rejected' }, (payload: BroadcastPayload) => {
            console.log('üìû Call rejected by receiver:', payload)
            const currentState = useCallStore.getState()
            if (currentState.isCalling && currentState.targetUserId === targetUserId) {
              console.log('üìû Our call was rejected - ending call from UsersList')
              setError('–ó–≤–æ–Ω–æ–∫ –æ—Ç–∫–ª–æ–Ω–µ–Ω')
              endCall()
            }
          })
          .on('broadcast', { event: 'call_ended' }, (payload: BroadcastPayload) => {
            console.log('üìû Call ended by receiver:', payload)
            const currentState = useCallStore.getState()
            if (currentState.isInCall) {
              console.log('üìû Call ended by other user from UsersList')
              endCall()
            }
          })
      }

      // –ë—ã—Å—Ç—Ä–∞—è –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞
      if (needsNewChannel) {
        console.log('üì° Subscribing to new channel...')

        // –ú–æ–º–µ–Ω—Ç–∞–ª—å–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ –±–µ–∑ –∑–∞–¥–µ—Ä–∂–µ–∫
        const subscriptionPromise = new Promise((resolve) => {
          const timeout = setTimeout(() => {
            console.warn('üì° New channel subscription timeout, continuing anyway')
            resolve('timeout')
          }, 200) // –ú–∏–Ω–∏–º—É–º –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏

          callChannel?.subscribe((status: string) => {
            clearTimeout(timeout)
            console.log('üì° New channel subscription status:', status)

            if (status === 'SUBSCRIBED') {
              console.log('‚úÖ New channel subscribed successfully')
            } else {
              console.warn('‚ö†Ô∏è New channel subscription issue, continuing:', status)
            }
            resolve(status)
          })
        })

        await subscriptionPromise
      } else {
        console.log('üì° Using existing channel, checking state...')
        
          // –î–ª—è –ø–µ—Ä–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö –∫–∞–Ω–∞–ª–æ–≤ –º–æ–º–µ–Ω—Ç–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
        if (callChannel?.state !== 'joined' && callChannel?.state !== 'joining') {
          console.log('üîÑ Existing channel not ready, instant resubscribe')
          callChannel?.subscribe(() => {})
        }
      }

      console.log('‚úÖ Proceeding with call immediately')

      // –£–±–∏—Ä–∞–µ–º –Ω–µ–Ω—É–∂–Ω—ã–µ –∑–∞–¥–µ—Ä–∂–∫–∏ –¥–ª—è —É—Å–∫–æ—Ä–µ–Ω–∏—è

      // Send call signal with improved retry logic
      let callSent = false
      let attempts = 0
      const maxAttempts = 3

      while (!callSent && attempts < maxAttempts) {
        attempts++
        console.log(`üìû Attempting to send call signal (attempt ${attempts}/${maxAttempts})`)
        console.log(`üìû Channel state before send:`, callChannel?.state)

        try {
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–∞–Ω–∞–ª–∞ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π
          if (callChannel?.state === 'closed') {
            console.warn('üìû Channel is closed, recreating...')
            callChannel = supabase.channel(receiverChannelId)
            // –ú–≥–Ω–æ–≤–µ–Ω–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –±–µ–∑ –æ–∂–∏–¥–∞–Ω–∏—è
            callChannel.subscribe(() => {})
            // –£–±–∏—Ä–∞–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –¥–ª—è —É—Å–∫–æ—Ä–µ–Ω–∏—è
          }

          const result = await callChannel?.send({
            type: 'broadcast',
            event: 'incoming_call',
            payload: {
              caller_id: userId,
              caller_name: displayName || targetUsername,
              timestamp: Date.now()
            }
          })

          console.log('üìû Call signal send result:', result)

          if (result === 'ok') {
            callSent = true
            console.log('‚úÖ Call signal sent successfully to user:', targetUserId)
          } else {
            throw new Error(`Send failed with result: ${result}`)
          }
        } catch (sendErr) {
          console.warn(`‚ùå Call signal send attempt ${attempts} failed:`, sendErr)

          if (attempts < maxAttempts) {
            console.log('üîÑ Retrying call signal instantly...')
            // –£–±–∏—Ä–∞–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –º–µ–∂–¥—É –ø–æ–ø—ã—Ç–∫–∞–º–∏ –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —Å–∫–æ—Ä–æ—Å—Ç–∏
          }
        }
      }

      if (!callSent) {
        throw new Error('Failed to send call signal after all attempts')
      }

      // Start the call locally
      startCall(targetUserId)

      // –ù–µ –∑–∞–∫—Ä—ã–≤–∞–µ–º –∫–∞–Ω–∞–ª —Å—Ä–∞–∑—É - –æ–Ω –Ω—É–∂–µ–Ω –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞
      console.log('‚úÖ Call initiated successfully, keeping channel open for response')

    } catch (err) {
      console.error('‚ùå Call error:', err)

      let errorMessage = '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–≤–µ—Ä—à–µ–Ω–∏–∏ –∑–≤–æ–Ω–∫–∞'
      if (err instanceof Error) {
        if (err.message.includes('Subscription timeout') || err.message.includes('TIMED_OUT')) {
          errorMessage = '–ü—Ä–æ–±–ª–µ–º–∞ —Å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ–º. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç.'
        } else if (err.message.includes('Failed to send call signal')) {
          errorMessage = '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≤—è–∑–∞—Ç—å—Å—è —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.'
        } else if (err.message.includes('Subscription failed')) {
          errorMessage = '–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.'
        }
      }

      setError(errorMessage)

      // –û—á–∏—Å—Ç–∫–∞ –∫–∞–Ω–∞–ª–∞ —Ç–æ–ª—å–∫–æ –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
      if (callChannel) {
        try {
          console.log('üßπ Cleaning up call channel due to error')
          callChannel.unsubscribe()
        } catch (cleanupErr) {
          console.warn('Error cleaning up call channel:', cleanupErr)
        }
      }
    } finally {
      setCallingUserId(null)
      setIsLoading(false)
    }
  }

  if (loading) {
    return <LoadingState title="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –æ–Ω–ª–∞–π–Ω" />
  }

  if (error) {
    return <ErrorState title="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è" error={error} onRetry={refreshUsers} />
  }

  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –≤–∫–ª—é—á–∞—è —Ç–µ–∫—É—â–µ–≥–æ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
  const allUsers = users
  const currentUser = users.find(user => user.id === userId)
  const otherUsers = users.filter(user => user.id !== userId)

  return (
    <div>
        <div className="flex justify-between items-center mb-4">
          <h2 className="text-xl font-semibold text-foreground">
            –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è ({allUsers.length})
          </h2>
          <button
            onClick={refreshUsers}
            className="text-primary hover:text-primary/80 text-sm transition-colors"
          >
            <svg className="w-4 h-4 inline mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15" />
            </svg>
            –û–±–Ω–æ–≤–∏—Ç—å
          </button>
        </div>

      {allUsers.length === 0 ? (
        <EmptyState />
      ) : (
        <div className="space-y-2 max-h-60 overflow-y-auto">
          {/* –¢–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å */}
          {currentUser && <CurrentUserCard user={currentUser} />}

          {otherUsers.map((user) => (
            <UserCard
              key={user.id}
              user={user}
              isInCall={isInCall}
              callingUserId={callingUserId}
              formatLastSeen={formatLastSeen}
              onCallUser={handleCallUser}
              onShowProfile={setSelectedUserProfile}
            />
          ))}
        </div>
      )}
    </div>
  )
}

export default UsersList
