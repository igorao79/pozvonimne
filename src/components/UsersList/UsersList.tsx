'use client'

import { useState } from 'react'
import useUsers from '@/hooks/useUsers'
import useCallStore from '@/store/useCallStore'
import { createClient } from '@/utils/supabase/client'
import { sendIncomingCallSignal } from '@/utils/callSignaling'
import { default as UserProfile } from '../Profile/UserProfile'
import LoadingState from './LoadingState'
import ErrorState from './ErrorState'
import EmptyState from './EmptyState'
import CurrentUserCard from './CurrentUserCard'
import UserCard from './UserCard'

interface BroadcastPayload {
  payload: any
  event: string
}

const UsersList = () => {
  const { users, loading, error, refreshUsers } = useUsers()
  const [callingUserId, setCallingUserId] = useState<string | null>(null)
  const [selectedUserProfile, setSelectedUserProfile] = useState<string | null>(null)

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –≤—Ö–æ–¥–∞
  const formatLastSeen = (lastSignInAt: string | null | undefined, status?: string) => {
    console.log('üîç formatLastSeen:', { lastSignInAt, status })

    if (!lastSignInAt) return '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'

    const lastSignIn = new Date(lastSignInAt)
    const now = new Date()
    const diffInMinutes = Math.floor((now.getTime() - lastSignIn.getTime()) / (1000 * 60))

    console.log('‚è∞ –í—Ä–µ–º—è:', { lastSignIn, now, diffInMinutes, status })

    // –û–Ω–ª–∞–π–Ω: –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –≤ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 –º–∏–Ω—É—Ç (–Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç —Å—Ç–∞—Ç—É—Å–∞ –≤ –ë–î)
    if (diffInMinutes <= 5) {
      console.log('‚úÖ –û–Ω–ª–∞–π–Ω! (–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –≤ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 –º–∏–Ω—É—Ç)')
      return '–æ–Ω–ª–∞–π–Ω'
    }

    const today = new Date(now.getFullYear(), now.getMonth(), now.getDate())
    const lastSignInDate = new Date(lastSignIn.getFullYear(), lastSignIn.getMonth(), lastSignIn.getDate())

    if (lastSignInDate.getTime() === today.getTime()) {
      // –°–µ–≥–æ–¥–Ω—è - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Ä–µ–º—è
      const timeString = lastSignIn.toLocaleTimeString('ru-RU', {
        hour: '2-digit',
        minute: '2-digit'
      })
      return `—Å–µ–≥–æ–¥–Ω—è, ${timeString}`
    } else {
      // –ù–µ —Å–µ–≥–æ–¥–Ω—è - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–∞—Ç—É
      return lastSignIn.toLocaleDateString('ru-RU')
    }
  }
  
  const {
    userId,
    startCall,
    isInCall,
    setError,
    setIsLoading,
    endCall
  } = useCallStore()

  const supabase = createClient()

  const handleCallUser = async (targetUserId: string, targetUsername: string, displayName: string) => {
    if (targetUserId === userId) {
      setError('–ù–µ–ª—å–∑—è –ø–æ–∑–≤–æ–Ω–∏—Ç—å —Å–∞–º–æ–º—É —Å–µ–±–µ')
      return
    }

    if (!userId) {
      setError('–û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω')
      return
    }

    setCallingUserId(targetUserId)
    setIsLoading(true)
    setError(null)

    try {
      console.log('üìû UsersList: Starting call to user:', targetUserId)

      // –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞–¥–µ–∂–Ω—É—é –æ—Ç–ø—Ä–∞–≤–∫—É —Å–∏–≥–Ω–∞–ª–∞ –≤—Ö–æ–¥—è—â–µ–≥–æ –∑–≤–æ–Ω–∫–∞
      const signalSent = await sendIncomingCallSignal(
        targetUserId,
        userId,
        displayName || targetUsername
      )

      if (signalSent) {
        console.log('‚úÖ UsersList: Call signal sent successfully')
        // –ó–∞–ø—É—Å–∫–∞–µ–º –ª–æ–∫–∞–ª—å–Ω—É—é –ª–æ–≥–∏–∫—É –∑–≤–æ–Ω–∫–∞
        startCall(targetUserId)
        console.log('‚úÖ UsersList: Call initiated successfully')
      } else {
        throw new Error('Failed to send call signal')
      }

    } catch (err) {
      console.error('‚ùå Call error:', err)

      let errorMessage = '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–≤–µ—Ä—à–µ–Ω–∏–∏ –∑–≤–æ–Ω–∫–∞'
      if (err instanceof Error) {
        if (err.message.includes('Subscription timeout') || err.message.includes('TIMED_OUT')) {
          errorMessage = '–ü—Ä–æ–±–ª–µ–º–∞ —Å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ–º. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç.'
        } else if (err.message.includes('Failed to send call signal')) {
          errorMessage = '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≤—è–∑–∞—Ç—å—Å—è —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.'
        } else if (err.message.includes('Subscription failed')) {
          errorMessage = '–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.'
        }
      }

      setError(errorMessage)

      // –û—á–∏—Å—Ç–∫–∞ –∫–∞–Ω–∞–ª–∞ —Ç–æ–ª—å–∫–æ –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
      if (callChannel) {
        try {
          console.log('üßπ Cleaning up call channel due to error')
          callChannel.unsubscribe()
        } catch (cleanupErr) {
          console.warn('Error cleaning up call channel:', cleanupErr)
        }
      }
    } finally {
      setCallingUserId(null)
      setIsLoading(false)
    }
  }

  if (loading) {
    return <LoadingState title="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –æ–Ω–ª–∞–π–Ω" />
  }

  if (error) {
    return <ErrorState title="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è" error={error} onRetry={refreshUsers} />
  }

  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –≤–∫–ª—é—á–∞—è —Ç–µ–∫—É—â–µ–≥–æ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
  const allUsers = users
  const currentUser = users.find(user => user.id === userId)
  const otherUsers = users.filter(user => user.id !== userId)

  return (
    <div>
        <div className="flex justify-between items-center mb-4">
          <h2 className="text-xl font-semibold text-foreground">
            –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è ({allUsers.length})
          </h2>
          <button
            onClick={refreshUsers}
            className="text-primary hover:text-primary/80 text-sm transition-colors"
          >
            <svg className="w-4 h-4 inline mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15" />
            </svg>
            –û–±–Ω–æ–≤–∏—Ç—å
          </button>
        </div>

      {allUsers.length === 0 ? (
        <EmptyState />
      ) : (
        <div className="space-y-2 max-h-60 overflow-y-auto">
          {/* –¢–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å */}
          {currentUser && <CurrentUserCard user={currentUser} />}

          {otherUsers.map((user) => (
            <UserCard
              key={user.id}
              user={user}
              isInCall={isInCall}
              callingUserId={callingUserId}
              formatLastSeen={formatLastSeen}
              onCallUser={handleCallUser}
              onShowProfile={setSelectedUserProfile}
            />
          ))}
        </div>
      )}
    </div>
  )
}

export default UsersList
