'use client'

import { useState, useEffect, useCallback } from 'react'
import useUsers from '@/hooks/useUsers'
import useCallStore from '@/store/useCallStore'

import { ChatHeader } from './ChatHeader'
import { MessagesArea } from './MessagesArea'
import { MessageInput } from './MessageInput'
import { EditMessageModal } from './EditMessageModal'
import { Chat, ChatInterfaceProps } from './types'
import { useTypingUsers } from '@/hooks/useTypingSelectors'
import { useChatMessages } from '@/hooks/useChatMessages'
import { useChatRealtime } from '@/hooks/useChatRealtime'
import { useChatScroll } from '@/hooks/useChatScroll'
import { useChatFocus } from '@/hooks/useChatFocus'
import { useChatActions } from './ChatActions'
import { useMessageActions } from '@/hooks/useMessageActions'

const ChatInterface = ({ chat, onBack }: ChatInterfaceProps) => {
  const [newMessage, setNewMessage] = useState('')
  const [error, setError] = useState<string | undefined>(undefined)

  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π
  const [editModal, setEditModal] = useState<{
    isOpen: boolean
    messageId: string
    currentContent: string
  }>({
    isOpen: false,
    messageId: '',
    currentContent: ''
  })

  const { userId: rawUserId, isInCall } = useCallStore()
  const { users } = useUsers()

  // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º null –≤ undefined –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å —Ö—É–∫–∞–º–∏
  const userId = rawUserId || undefined

  // –ü–æ–ª—É—á–∞–µ–º typing users –∏–∑ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Ö—É–∫–∞ (–∏—Å–∫–ª—é—á–∞–µ–º —Å–µ–±—è)
  const typingUsers = useTypingUsers(chat.id, userId)

  // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–∞—Å—Ç–æ–º–Ω—ã–µ —Ö—É–∫–∏
  const {
    messages,
    loading,
    sending,
    loadMessages,
    sendMessage,
    handleNewMessage
  } = useChatMessages({ chatId: chat.id, userId })

  const { messagesEndRef } = useChatScroll({
    messagesLength: messages.length,
    loading
  })

  const { messageInputRef, focusInput } = useChatFocus()

  const { handleCall } = useChatActions({ chat, onError: setError })

  // –•—É–∫–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
  const { editMessage, deleteMessage } = useMessageActions()

  // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º realtime –ø–æ–¥–ø–∏—Å–∫–∏
  useChatRealtime({
    chatId: chat.id,
    userId,
    otherParticipantId: chat.other_participant_id,
    onNewMessage: handleNewMessage
  })

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  const getUserStatus = useCallback((userId?: string) => {
    if (!userId) return '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'

    // –ï—Å–ª–∏ —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø—É—Å—Ç–æ–π –∏ –∏–¥–µ—Ç –∑–∞–≥—Ä—É–∑–∫–∞, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º "–ó–∞–≥—Ä—É–∑–∫–∞..."
    if (users.length === 0 && loading) {
      return '–ó–∞–≥—Ä—É–∑–∫–∞...'
    }

    // –ï—Å–ª–∏ —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø—É—Å—Ç–æ–π, –Ω–æ –∑–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
    if (users.length === 0 && !loading) {
      return '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'
    }

    const user = users.find(u => u.id === userId)
    if (!user) {
      console.log('‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–ø–∏—Å–∫–µ –∏–∑', users.length, '–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π')
      return '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'
    }

    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ç–∞—Ç—É—Å –Ω–∞–ø—Ä—è–º—É—é –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö (—Ç–µ–ø–µ—Ä—å –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è –≤ realtime)
    return user.status === 'online' ? '–æ–Ω–ª–∞–π–Ω' : '–æ—Ñ—Ñ–ª–∞–π–Ω'
  }, [users, loading])

  // –≠—Ñ—Ñ–µ–∫—Ç –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–ª—É—á–∞–µ–≤, –∫–æ–≥–¥–∞ —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø—É—Å—Ç–æ–π –ø–æ—Å–ª–µ –∑–≤–æ–Ω–∫–∞
  useEffect(() => {
    if (users.length === 0 && !loading) {
      console.log('‚ö†Ô∏è ChatInterface: –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø—É—Å—Ç–æ–π –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏, –∂–¥–µ–º –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è realtime –ø–æ–¥–ø–∏—Å–æ–∫')
      // –ñ–¥–µ–º –µ—â–µ –Ω–µ–º–Ω–æ–≥–æ, –≤–æ–∑–º–æ–∂–Ω–æ realtime –ø–æ–¥–ø–∏—Å–∫–∏ –µ—â–µ –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é—Ç—Å—è
      const timeoutId = setTimeout(() => {
        console.log('üîÑ ChatInterface: –¢–∞–π–º–∞—É—Ç –æ–∂–∏–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏—Å—Ç–µ–∫, –ø—Ä–æ–±—É–µ–º –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—É—é –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫—É')
        // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —á–µ—Ä–µ–∑ window.dispatchEvent
        // –≠—Ç–æ –≤—ã–∑–æ–≤–µ—Ç –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫—É —á–µ—Ä–µ–∑ useUsers —Ö—É–∫
        window.dispatchEvent(new CustomEvent('force-refresh-users'))
      }, 3000)

      return () => clearTimeout(timeoutId)
    }
  }, [users.length, loading])

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
  const handleSendMessage = useCallback(async (e: React.FormEvent) => {
    e.preventDefault()

    if (!newMessage.trim() || sending || !userId) return

    const messageText = newMessage.trim()
    setNewMessage('')

    const result = await sendMessage(messageText)

    if (result && !result.success) {
      // –ï—Å–ª–∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–µ–∫—Å—Ç
      setNewMessage(result.text || messageText)
    }
  }, [newMessage, sending, userId, sendMessage])

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞—á–∞–ª–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è
  const handleEditMessage = useCallback((messageId: string, currentContent: string) => {
    setEditModal({
      isOpen: true,
      messageId,
      currentContent
    })
  }, [])

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
  const handleSaveEdit = useCallback(async (messageId: string, newContent: string) => {
    try {
      await editMessage(messageId, newContent)
      // –°–æ–æ–±—â–µ–Ω–∏–µ –æ–±–Ω–æ–≤–∏—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —á–µ—Ä–µ–∑ realtime –ø–æ–¥–ø–∏—Å–∫—É
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:', error)
      setError('–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ')
    }
  }, [editMessage])

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ–Ω—ã —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
  const handleCancelEdit = useCallback(() => {
    setEditModal({
      isOpen: false,
      messageId: '',
      currentContent: ''
    })
  }, [])

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è
  const handleDeleteMessage = useCallback(async (messageId: string) => {
    try {
      await deleteMessage(messageId)
      // –°–æ–æ–±—â–µ–Ω–∏–µ –æ–±–Ω–æ–≤–∏—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —á–µ—Ä–µ–∑ realtime –ø–æ–¥–ø–∏—Å–∫—É
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:', error)
      setError('–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ')
    }
  }, [deleteMessage])

  // –ö–æ–º–ø–æ–Ω–µ–Ω—Ç —Ä–µ–Ω–¥–µ—Ä–∏—Ç—Å—è

  return (
    <div className="h-full flex flex-col" onClick={focusInput}>
      <ChatHeader
        chat={chat}
        onBack={onBack}
        onCall={handleCall}
        userStatus={chat.type === 'private' && chat.other_participant_id ? getUserStatus(chat.other_participant_id) : undefined}
        isInCall={isInCall}
        typingUsers={typingUsers}
        currentUserId={userId || undefined}
      />

      <MessagesArea
        messages={messages}
        loading={loading}
        error={error || undefined}
        chat={chat}
        userId={userId || undefined}
        onRetry={loadMessages}
        messagesEndRef={messagesEndRef}
        onMessageClick={focusInput}
        onEditMessage={handleEditMessage}
        onDeleteMessage={handleDeleteMessage}
      />

      <MessageInput
        ref={messageInputRef}
        value={newMessage}
        onChange={setNewMessage}
        onSubmit={handleSendMessage}
        sending={sending}
        chatId={chat.id}
      />

      {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è */}
      <EditMessageModal
        isOpen={editModal.isOpen}
        messageId={editModal.messageId}
        currentContent={editModal.currentContent}
        onSave={handleSaveEdit}
        onCancel={handleCancelEdit}
      />
    </div>
  )
}

export default ChatInterface
