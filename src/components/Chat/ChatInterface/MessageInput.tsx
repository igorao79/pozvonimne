import React, { useState, useRef, useImperativeHandle, forwardRef } from 'react'
import { EmojiPicker } from './EmojiPicker'
import { EmojiAutocomplete } from './EmojiAutocomplete'
import { useTyping } from '@/hooks/useTyping'

interface MessageInputProps {
  value: string
  onChange: (value: string) => void
  onSubmit: (e: React.FormEvent) => void
  sending: boolean
  disabled?: boolean
  chatId: string
}

export interface MessageInputRef {
  focus: () => void
}

export const MessageInput = forwardRef<MessageInputRef, MessageInputProps>(({
  value,
  onChange,
  onSubmit,
  sending,
  disabled = false,
  chatId
}, ref) => {
  const [showEmojiPicker, setShowEmojiPicker] = useState(false)
  const inputRef = useRef<HTMLInputElement>(null)
  
  // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ—Å—Ç–æ–π typing hook
  const { handleInputChange: handleTypingChange, handleSubmit: handleTypingSubmit } = useTyping({
    chatId,
    enabled: !disabled
  })

  // –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–µ—Ç–æ–¥ focus –Ω–∞—Ä—É–∂—É
  useImperativeHandle(ref, () => ({
    focus: () => {
      if (inputRef.current) {
        inputRef.current.focus()
      }
    }
  }))

  // –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ emoji shortcodes –≤ emoji
  const convertEmojiShortcodes = (text: string) => {
    // –ü—Ä–æ—Å—Ç–∞—è –∑–∞–º–µ–Ω–∞ –∏–∑–≤–µ—Å—Ç–Ω—ã—Ö shortcodes
    const shortcodeMap: { [key: string]: string } = {
      'smile': 'üòä',
      'heart': '‚ù§Ô∏è',
      'thumbs_up': 'üëç',
      'laughing': 'üòÇ',
      'wink': 'üòâ',
      'fire': 'üî•',
      'star': '‚≠ê',
      'cry': 'üò¢',
      'thinking': 'ü§î',
      'cool': 'üòé',
      'hi': 'üëã',
      'bye': 'üëã',
      'yes': '‚úÖ',
      'no': '‚ùå',
      'love': 'üòç',
      'angry': 'üò†',
      'surprised': 'üòÆ',
      'sleep': 'üò¥',
      'coffee': '‚òï',
      'pizza': 'üçï'
    }

    let convertedText = text

    // –ó–∞–º–µ–Ω—è–µ–º –≤—Å–µ –Ω–∞–π–¥–µ–Ω–Ω—ã–µ shortcodes
    Object.entries(shortcodeMap).forEach(([shortcode, emoji]) => {
      const regex = new RegExp(`:${shortcode}:`, 'g')
      convertedText = convertedText.replace(regex, emoji)
    })

    return convertedText
  }

  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault()

    console.log('üì® [MessageInput] –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è, –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º typing')

    // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º typing –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    handleTypingSubmit()
    
    console.log(`üì® [MessageInput] –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ: "${value}"`)

    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º emoji shortcodes –≤ emoji –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π
    const convertedValue = convertEmojiShortcodes(value)

    // –ï—Å–ª–∏ —Ç–µ–∫—Å—Ç –∏–∑–º–µ–Ω–∏–ª—Å—è –ø–æ—Å–ª–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è, –æ–±–Ω–æ–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ
    if (convertedValue !== value) {
      onChange(convertedValue)
    }

    // –°–æ–∑–¥–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ —Å–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ–±—ã—Ç–∏–µ
    const syntheticEvent = {
      ...e,
      preventDefault: () => {}, // –î–æ–±–∞–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é preventDefault
      target: { value: convertedValue } as HTMLInputElement,
      currentTarget: { value: convertedValue } as HTMLInputElement
    } as React.FormEvent

    onSubmit(syntheticEvent)
  }

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ —Å typing logic
  const handleInputChangeInternal = (e: React.ChangeEvent<HTMLInputElement>) => {
    const newValue = e.target.value
    console.log(`üìù [MessageInput] handleInputChangeInternal: "${newValue}"`)
    onChange(newValue)

    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º typing —á–µ—Ä–µ–∑ –Ω–æ–≤—ã–π —Ö—É–∫
    console.log(`üìù [MessageInput] –í—ã–∑—ã–≤–∞–µ–º handleTypingChange`)
    handleTypingChange(newValue)
  }

  const handleEmojiSelect = (emoji: string) => {
    const newValue = value + emoji
    onChange(newValue)

    // –§–æ–∫—É—Å –Ω–∞ input –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ emoji
    if (inputRef.current) {
      inputRef.current.focus()
      // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫—É—Ä—Å–æ—Ä–∞ –≤ –∫–æ–Ω–µ—Ü
      const len = newValue.length
      inputRef.current.setSelectionRange(len, len)
    }
  }

  const handleAutocompleteEmojiSelect = (emoji: string) => {
    // –ó–∞–º–µ–Ω—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π :shortcode: –Ω–∞ emoji
    const colonMatch = value.match(/:([^:\s]+)$/)
    if (colonMatch) {
      const shortcode = colonMatch[0]
      const newValue = value.replace(shortcode, emoji)
      onChange(newValue)

      // –§–æ–∫—É—Å –Ω–∞ input
      if (inputRef.current) {
        inputRef.current.focus()
      }
    }
  }

  const toggleEmojiPicker = () => {
    // Emoji picker toggle
    setShowEmojiPicker(!showEmojiPicker)
  }

  return (
    <div className="p-4 bg-card border-t border-border relative">
      <form onSubmit={handleSubmit} className="flex space-x-2">
        <div className="flex-1 relative">
          <input
            ref={inputRef}
            type="text"
            value={value}
            onChange={handleInputChangeInternal}
            placeholder="–ù–∞–ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ..."
            disabled={sending || disabled}
            className="w-full px-4 py-2 pr-12 border border-border bg-background text-foreground rounded-lg focus:ring-0 focus:border-border placeholder:text-muted-foreground disabled:opacity-50"
          />

          {/* –ö–Ω–æ–ø–∫–∞ emoji */}
          <button
            type="button"
            onClick={toggleEmojiPicker}
            disabled={sending || disabled}
            className="absolute right-3 top-1/2 transform -translate-y-1/2 text-muted-foreground hover:text-foreground transition-colors disabled:opacity-50"
          >
            <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M14.828 14.828a4 4 0 01-5.656 0M9 10h1m4 0h1m-6 4h.01M21 12c0 4.418-4.03 8-9 8a9.863 9.863 0 01-4.255-.949L3 20l1.395-3.72C3.512 15.042 3 13.574 3 12c0-4.418 4.03-8 9-8s9 3.582 9 8z" />
            </svg>
          </button>
        </div>

        <button
          type="submit"
          disabled={!value.trim() || sending || disabled}
          className="px-4 py-2 bg-primary text-primary-foreground rounded-lg hover:bg-primary/90 disabled:opacity-50 disabled:cursor-not-allowed transition-colors"
        >
          {sending ? (
            <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-white"></div>
          ) : (
            <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 19l9 2-9-18-9 18 9-2zm0 0v-8" />
            </svg>
          )}
        </button>
      </form>

      {/* Emoji Autocomplete */}
      <EmojiAutocomplete
        inputValue={value}
        onEmojiSelect={handleAutocompleteEmojiSelect}
        onClose={() => {}} // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–∫—Ä—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ –≤—ã–±–æ—Ä–µ
      />

      {/* Emoji Picker */}
      <div data-emoji-picker>
        <EmojiPicker
          onEmojiSelect={handleEmojiSelect}
          isOpen={showEmojiPicker}
          onClose={() => setShowEmojiPicker(false)}
        />
      </div>
    </div>
  )
})

MessageInput.displayName = 'MessageInput'