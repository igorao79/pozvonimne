import { useCallback } from 'react'
import useCallStore from '@/store/useCallStore'
import useSupabaseStore from '@/store/useSupabaseStore'
import { Chat } from './types'

interface UseChatActionsProps {
  chat: Chat
  onError: (error: string) => void
}

export const useChatActions = ({ chat, onError }: UseChatActionsProps) => {
  const { userId, startCall, endCall } = useCallStore()
  const { supabase } = useSupabaseStore()

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–≤–æ–Ω–∫–∞
  const handleCall = useCallback(async () => {
    console.log('üìû HandleCall: –ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ –∑–≤–æ–Ω–∫–∞', {
      chatType: chat.type,
      otherParticipantId: chat.other_participant_id,
      chatId: chat.id,
      chatName: chat.name
    })

    if (chat.type === 'private' && chat.other_participant_id) {
      console.log('üìû HandleCall: –ó–∞–ø—É—Å–∫–∞–µ–º –∑–≤–æ–Ω–æ–∫ –∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é:', chat.other_participant_id)

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–∏–≥–Ω–∞–ª incoming_call receiver'—É
      try {
        const receiverChannelId = `calls:${chat.other_participant_id}`
        console.log('üìû HandleCall: –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–∏–≥–Ω–∞–ª –≤ –∫–∞–Ω–∞–ª:', receiverChannelId)

        const result = await supabase.channel(receiverChannelId).send({
          type: 'broadcast',
          event: 'incoming_call',
          payload: {
            caller_id: userId,
            caller_name: chat.name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
            timestamp: Date.now()
          }
        })

        console.log('üìû HandleCall: –°–∏–≥–Ω–∞–ª incoming_call –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω:', result)

        if (result === 'ok') {
          // –¢–µ–ø–µ—Ä—å –∑–∞–ø—É—Å–∫–∞–µ–º –ª–æ–∫–∞–ª—å–Ω—É—é –ª–æ–≥–∏–∫—É –∑–≤–æ–Ω–∫–∞
          startCall(chat.other_participant_id)
        } else {
          console.error('üìû HandleCall: –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–∏–≥–Ω–∞–ª–∞ incoming_call:', result)
          onError('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–∏–≥–Ω–∞–ª–∞ –∑–≤–æ–Ω–∫–∞')
        }
      } catch (err) {
        console.error('üìû HandleCall: –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–∏–≥–Ω–∞–ª–∞:', err)
        onError('–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –∑–≤–æ–Ω–∫—É')
      }
    } else {
      console.warn('üìû HandleCall: –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –∑–∞–ø—É—Å—Ç–∏—Ç—å –∑–≤–æ–Ω–æ–∫', {
        reason: chat.type !== 'private' ? '–ù–µ –ø—Ä–∏–≤–∞—Ç–Ω—ã–π —á–∞—Ç' : '–ù–µ—Ç ID —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞',
        chatType: chat.type,
        hasOtherParticipant: !!chat.other_participant_id
      })
    }
  }, [chat.type, chat.other_participant_id, chat.id, chat.name, userId, startCall, supabase, onError])

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–º–µ–Ω—ã –∑–≤–æ–Ω–∫–∞
  const handleCancelCall = useCallback(async () => {
    console.log('üìû HandleCancelCall: –û—Ç–º–µ–Ω–∞ –∑–≤–æ–Ω–∫–∞ –∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é:', chat.other_participant_id)

    if (chat.type === 'private' && chat.other_participant_id) {
      try {
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–∏–≥–Ω–∞–ª –æ—Ç–º–µ–Ω—ã –∑–≤–æ–Ω–∫–∞ receiver'—É
        const receiverChannelId = `calls:${chat.other_participant_id}`
        console.log('üìû HandleCancelCall: –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–∏–≥–Ω–∞–ª –æ—Ç–º–µ–Ω—ã –≤ –∫–∞–Ω–∞–ª:', receiverChannelId)

        const result = await supabase.channel(receiverChannelId).send({
          type: 'broadcast',
          event: 'call_cancelled',
          payload: {
            caller_id: userId,
            timestamp: Date.now()
          }
        })

        console.log('üìû HandleCancelCall: –°–∏–≥–Ω–∞–ª call_cancelled –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω:', result)

        if (result !== 'ok') {
          console.warn('üìû HandleCancelCall: –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–∏–≥–Ω–∞–ª–∞ –æ—Ç–º–µ–Ω—ã:', result)
        }
      } catch (err) {
        console.error('üìû HandleCancelCall: –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–∏–≥–Ω–∞–ª–∞ –æ—Ç–º–µ–Ω—ã:', err)
        // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –æ—Ç–º–µ–Ω—É –∑–≤–æ–Ω–∫–∞ –¥–∞–∂–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–∏–≥–Ω–∞–ª–∞
      }
    }

    // –ó–∞–≤–µ—Ä—à–∞–µ–º –∑–≤–æ–Ω–æ–∫ –ª–æ–∫–∞–ª—å–Ω–æ
    endCall()
  }, [chat.type, chat.other_participant_id, userId, endCall, supabase])

  return {
    handleCall,
    handleCancelCall
  }
}
