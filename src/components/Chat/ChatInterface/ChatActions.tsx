import { useCallback } from 'react'
import useCallStore from '@/store/useCallStore'
import { sendIncomingCallSignal, sendCallCancelledSignal } from '@/utils/callSignaling'
import { Chat } from './types'

interface UseChatActionsProps {
  chat: Chat
  onError: (error: string) => void
}

export const useChatActions = ({ chat, onError }: UseChatActionsProps) => {
  const { userId, startCall, endCall } = useCallStore()

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–≤–æ–Ω–∫–∞
  const handleCall = useCallback(async () => {
    console.log('üìû HandleCall: –ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ –∑–≤–æ–Ω–∫–∞', {
      chatType: chat.type,
      otherParticipantId: chat.other_participant_id,
      chatId: chat.id,
      chatName: chat.name
    })

    if (chat.type === 'private' && chat.other_participant_id && userId) {
      console.log('üìû HandleCall: –ó–∞–ø—É—Å–∫–∞–µ–º –∑–≤–æ–Ω–æ–∫ –∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é:', chat.other_participant_id)

      try {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞–¥–µ–∂–Ω—É—é –æ—Ç–ø—Ä–∞–≤–∫—É —Å–∏–≥–Ω–∞–ª–∞ –≤—Ö–æ–¥—è—â–µ–≥–æ –∑–≤–æ–Ω–∫–∞
        const signalSent = await sendIncomingCallSignal(
          chat.other_participant_id,
          userId,
          chat.name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'
        )

        if (signalSent) {
          console.log('‚úÖ HandleCall: –°–∏–≥–Ω–∞–ª incoming_call –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ')
          // –ó–∞–ø—É—Å–∫–∞–µ–º –ª–æ–∫–∞–ª—å–Ω—É—é –ª–æ–≥–∏–∫—É –∑–≤–æ–Ω–∫–∞
          startCall(chat.other_participant_id)
        } else {
          console.error('‚ùå HandleCall: –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–∏–≥–Ω–∞–ª –∑–≤–æ–Ω–∫–∞')
          onError('–ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –¥–ª—è –∑–≤–æ–Ω–∫–∞')
        }
      } catch (err) {
        console.error('üí• HandleCall: –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–∏–≥–Ω–∞–ª–∞:', err)
        onError('–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –∑–≤–æ–Ω–∫—É')
      }
    } else {
      console.warn('üìû HandleCall: –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –∑–∞–ø—É—Å—Ç–∏—Ç—å –∑–≤–æ–Ω–æ–∫', {
        reason: chat.type !== 'private' ? '–ù–µ –ø—Ä–∏–≤–∞—Ç–Ω—ã–π —á–∞—Ç' : '–ù–µ—Ç ID —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞',
        chatType: chat.type,
        hasOtherParticipant: !!chat.other_participant_id
      })
    }
  }, [chat.type, chat.other_participant_id, chat.id, chat.name, userId, startCall, onError])

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–º–µ–Ω—ã –∑–≤–æ–Ω–∫–∞
  const handleCancelCall = useCallback(async () => {
    console.log('üìû HandleCancelCall: –û—Ç–º–µ–Ω–∞ –∑–≤–æ–Ω–∫–∞ –∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é:', chat.other_participant_id)

    if (chat.type === 'private' && chat.other_participant_id && userId) {
      try {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞–¥–µ–∂–Ω—É—é –æ—Ç–ø—Ä–∞–≤–∫—É —Å–∏–≥–Ω–∞–ª–∞ –æ—Ç–º–µ–Ω—ã –∑–≤–æ–Ω–∫–∞
        const signalSent = await sendCallCancelledSignal(
          chat.other_participant_id,
          userId,
          chat.name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'
        )

        if (signalSent) {
          console.log('‚úÖ HandleCancelCall: –°–∏–≥–Ω–∞–ª call_cancelled –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ')
        } else {
          console.warn('‚ö†Ô∏è HandleCancelCall: –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–∏–≥–Ω–∞–ª –æ—Ç–º–µ–Ω—ã')
        }
      } catch (err) {
        console.error('üí• HandleCancelCall: –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–∏–≥–Ω–∞–ª–∞ –æ—Ç–º–µ–Ω—ã:', err)
        // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –æ—Ç–º–µ–Ω—É –∑–≤–æ–Ω–∫–∞ –¥–∞–∂–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–∏–≥–Ω–∞–ª–∞
      }
    }

    // –ó–∞–≤–µ—Ä—à–∞–µ–º –∑–≤–æ–Ω–æ–∫ –ª–æ–∫–∞–ª—å–Ω–æ
    endCall()
  }, [chat.type, chat.other_participant_id, userId, endCall])

  return {
    handleCall,
    handleCancelCall
  }
}
