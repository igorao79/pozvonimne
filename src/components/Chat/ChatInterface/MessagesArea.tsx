import React, { forwardRef, useState, useCallback, useRef, useEffect } from 'react'
import { Message, Chat } from './types'
import { MessageItem } from './MessageItem'

interface MessagesAreaProps {
  messages: Message[]
  loading: boolean
  loadingMore?: boolean
  hasMoreMessages?: boolean
  error?: string
  chat: Chat
  userId?: string
  onRetry?: () => void
  onLoadMore?: () => void
  messagesEndRef: React.RefObject<HTMLDivElement | null>
  onMessageClick?: () => void
  onEditMessage?: (messageId: string, currentContent: string) => void
  onDeleteMessage?: (messageId: string) => void
  onScrollToBottom?: () => void
  hasInitialScrolled?: boolean
}

export const MessagesArea: React.FC<MessagesAreaProps> = ({
  messages,
  loading,
  loadingMore = false,
  hasMoreMessages = false,
  error,
  chat,
  userId,
  onRetry,
  onLoadMore,
  messagesEndRef,
  onMessageClick,
  onEditMessage,
  onDeleteMessage,
  onScrollToBottom,
  hasInitialScrolled = false
}) => {
  const [showScrollButton, setShowScrollButton] = useState(false)
  const messagesContainerRef = useRef<HTMLDivElement>(null)
  const previousMessagesLength = useRef<number>(messages.length)
  const previousScrollTop = useRef<number>(0)
  const isLoadingMoreRef = useRef<boolean>(false)

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∫—Ä–æ–ª–ª–∞ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∏ –ø–æ–∫–∞–∑–∞ –∫–Ω–æ–ø–∫–∏ –ø—Ä–æ–∫—Ä—É—Ç–∫–∏
  const handleScroll = useCallback((e: React.UIEvent<HTMLDivElement>) => {
    const target = e.target as HTMLDivElement
    const { scrollTop, scrollHeight, clientHeight } = target

    // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–æ–∫—Ä—É—Ç–∏–ª –¥–æ –≤–µ—Ä—Ö–∞ (–≤ –ø—Ä–µ–¥–µ–ª–∞—Ö 100px) –∏ –µ—Å—Ç—å –µ—â–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    if (hasInitialScrolled && scrollTop <= 100 && hasMoreMessages && !loadingMore && onLoadMore) {
      console.log('üéØ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–æ–∫—Ä—É—Ç–∏–ª –¥–æ –≤–µ—Ä—Ö–∞, –∑–∞–≥—Ä—É–∂–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è')
      onLoadMore()
    }

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –¥–æ –Ω–∏–∑–∞ (–¥–æ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è)
    const distanceFromBottom = scrollHeight - scrollTop - clientHeight

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—à–µ–ª –≤–≤–µ—Ä—Ö –±–æ–ª–µ–µ —á–µ–º –Ω–∞ 100px –æ—Ç –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    setShowScrollButton(distanceFromBottom > 100)
  }, [hasMoreMessages, loadingMore, onLoadMore, hasInitialScrolled])

  // –≠—Ñ—Ñ–µ–∫—Ç –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–∏ –ø—Ä–æ–∫—Ä—É—Ç–∫–∏ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
  useEffect(() => {
    // –î–æ –ø–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–æ–≥–æ —Å–∫—Ä–æ–ª–ª–∞ –≤–Ω–∏–∑ –Ω–µ –≤–º–µ—à–∏–≤–∞–µ–º—Å—è –≤ –ø–æ–∑–∏—Ü–∏—é
    if (!hasInitialScrolled) return

    if (loadingMore && !isLoadingMoreRef.current) {
      // –ù–∞—á–∞–ª–∞—Å—å –∑–∞–≥—Ä—É–∑–∫–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π - —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–µ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –¥–æ –Ω–∏–∑–∞
      if (messagesContainerRef.current) {
        const container = messagesContainerRef.current
        previousScrollTop.current = container.scrollHeight - container.scrollTop
        previousMessagesLength.current = messages.length
        console.log('üíæ –°–æ—Ö—Ä–∞–Ω–∏–ª–∏ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –¥–æ –Ω–∏–∑–∞:', previousScrollTop.current, '–ø—Ä–∏', previousMessagesLength.current, '—Å–æ–æ–±—â–µ–Ω–∏—è—Ö')
      }
      isLoadingMoreRef.current = true
    } else if (!loadingMore && isLoadingMoreRef.current) {
      // –ó–∞–≥—Ä—É–∑–∫–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∑–∞–≤–µ—Ä—à–µ–Ω–∞
      if (messagesContainerRef.current && messages.length > previousMessagesLength.current) {
        console.log('üîÑ –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏—é: —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –¥–æ –Ω–∏–∑–∞ –±—ã–ª–æ', previousScrollTop.current)

        // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã DOM –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ–±–Ω–æ–≤–∏–ª—Å—è
        setTimeout(() => {
          if (messagesContainerRef.current) {
            const container = messagesContainerRef.current
            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º scrollTop —Ç–∞–∫, —á—Ç–æ–±—ã —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –¥–æ –Ω–∏–∑–∞
            container.scrollTop = container.scrollHeight - previousScrollTop.current
            console.log('‚úÖ –ü–æ–∑–∏—Ü–∏—è –ø—Ä–æ–∫—Ä—É—Ç–∫–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞, –Ω–æ–≤—ã–π scrollTop:', container.scrollTop)
          }
        }, 50)
      }
      isLoadingMoreRef.current = false
    }
  }, [loadingMore, messages.length, hasInitialScrolled])

  if (loading) {
    return (
      <div className="flex-1 overflow-y-auto p-4 bg-background">
        <div className="flex items-center justify-center h-full">
          <div className="text-center">
            <div className="animate-spin rounded-full h-6 w-6 border-b-2 border-indigo-600 mx-auto mb-2"></div>
            <p className="text-sm text-muted-foreground">–ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π...</p>
          </div>
        </div>
      </div>
    )
  }

  if (error) {
    return (
      <div className="flex-1 overflow-y-auto p-4 bg-background">
        <div className="flex items-center justify-center h-full">
          <div className="text-center">
            <p className="text-destructive mb-2">{error}</p>
            {onRetry && (
              <button
                onClick={onRetry}
                className="text-primary hover:text-primary/80 text-sm transition-colors"
              >
                –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞
              </button>
            )}
          </div>
        </div>
      </div>
    )
  }

  if (messages.length === 0) {
    return (
      <div className="flex-1 overflow-y-auto p-4 chat-pattern-bg">
        <div className="flex items-center justify-center h-full">
          <div className="text-center bg-card/80 backdrop-blur-sm rounded-lg p-6 border border-border/50">
            <svg className="w-12 h-12 mx-auto text-muted-foreground mb-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M8 12h.01M12 12h.01M16 12h.01M21 12c0 4.418-4.03 8-9 8a9.863 9.863 0 01-4.255-.949L3 20l1.395-3.72C3.512 15.042 3 13.574 3 12c0-4.418 4.03-8 9-8s9 3.582 9 8z" />
            </svg>
            <p className="text-muted-foreground mb-2">–°–æ–æ–±—â–µ–Ω–∏–π –ø–æ–∫–∞ –Ω–µ—Ç</p>
            <p className="text-sm text-muted-foreground/70">–ù–∞—á–Ω–∏—Ç–µ –ø–µ—Ä–µ–ø–∏—Å–∫—É</p>
          </div>
        </div>
      </div>
    )
  }

  return (
    <div
      ref={messagesContainerRef}
      className="flex-1 overflow-y-auto p-4 chat-pattern-bg"
      onClick={onMessageClick}
      onScroll={handleScroll}
    >
      <div className="space-y-4">
        {/* –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π */}
        {loadingMore && hasMoreMessages && (
          <div className="flex justify-center py-2">
            <div className="animate-spin rounded-full h-5 w-5 border-b-2 border-primary"></div>
            <span className="ml-2 text-sm text-muted-foreground">–ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π...</span>
          </div>
        )}

        {/* –°–æ–æ–±—â–µ–Ω–∏—è */}
        {messages.map((message) => (
          <MessageItem
            key={`${message.id}-${message.updated_at}`}
            message={message}
            chat={chat}
            userId={userId}
            onClick={onMessageClick}
            onEdit={onEditMessage}
            onDelete={onDeleteMessage}
          />
        ))}

        <div ref={messagesEndRef} />
      </div>

      {/* –ö–Ω–æ–ø–∫–∞ –ø—Ä–æ–∫—Ä—É—Ç–∫–∏ –∫ –Ω–∏–∑—É */}
      {showScrollButton && onScrollToBottom && (
        <button
          onClick={onScrollToBottom}
          className="fixed bottom-25 right-4 bg-primary hover:bg-primary/90 text-primary-foreground rounded-full p-3 shadow-lg transition-all duration-300 ease-in-out transform hover:scale-105 focus:outline-none focus:ring-2 focus:ring-primary/50 z-50"
          aria-label="–ü—Ä–æ–∫—Ä—É—Ç–∏—Ç—å –∫ –ø–æ—Å–ª–µ–¥–Ω–µ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é"
        >
          <svg
            className="w-5 h-5"
            fill="none"
            stroke="currentColor"
            viewBox="0 0 24 24"
          >
            <path
              strokeLinecap="round"
              strokeLinejoin="round"
              strokeWidth={2}
              d="M19 14l-7 7m0 0l-7-7m7 7V3"
            />
          </svg>
        </button>
      )}
    </div>
  )
}
