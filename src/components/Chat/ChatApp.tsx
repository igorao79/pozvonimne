'use client'

import { useState, useRef, useEffect } from 'react'
import ChatList from './ChatList'
import ChatInterface from './ChatInterface'
import CreateChatModal from './CreateChatModal'

interface Chat {
  id: string
  type: 'private' | 'group'
  name: string
  avatar_url?: string
  last_message?: string
  last_message_at?: string
  last_message_sender_name?: string
  unread_count: number
  other_participant_id?: string
  other_participant_name?: string
  other_participant_avatar?: string
  created_at: string
}

interface ChatAppProps {
  autoOpenChatId?: string // ID —á–∞—Ç–∞ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ—Ç–∫—Ä—ã—Ç–∏—è
}

const ChatApp = ({ autoOpenChatId }: ChatAppProps = {}) => {
  const [selectedChat, setSelectedChat] = useState<Chat | null>(null)
  const [showCreateModal, setShowCreateModal] = useState(false)
  const [isLoading, setIsLoading] = useState(!!autoOpenChatId) // –ü—Ä–æ—Å—Ç–∞—è –ª–æ–≥–∏–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏
  const chatListRef = useRef<any>(null)
  
  // Ref –¥–ª—è debouncing —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ localStorage
  const saveTimeoutRef = useRef<NodeJS.Timeout | null>(null)
  
  // Debounced —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ localStorage
  const debouncedSaveToLocalStorage = (chat: Chat) => {
    // –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π —Ç–∞–π–º–µ—Ä
    if (saveTimeoutRef.current) {
      clearTimeout(saveTimeoutRef.current)
    }
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤—ã–π —Ç–∞–π–º–µ—Ä –Ω–∞ 300ms
    saveTimeoutRef.current = setTimeout(() => {
      try {
        localStorage.setItem('selectedChatId', chat.id)
        localStorage.setItem('selectedChatName', chat.name)
        localStorage.setItem('selectedChatTimestamp', new Date().toISOString())
        console.log('üíæ DEBOUNCED SAVE - –ß–∞—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π:', {
          chatId: chat.id,
          chatName: chat.name
        })
      } catch (error) {
        console.error('üíæ DEBOUNCED SAVE - –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è:', error)
      }
    }, 300)
  }

  // –ü–†–û–°–¢–ê–Ø –ª–æ–≥–∏–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —á–∞—Ç–∞
  useEffect(() => {
    if (autoOpenChatId) {
      console.log('üîÑ –ü–†–û–°–¢–û–ï –†–ï–®–ï–ù–ò–ï - –û—Ç–∫—Ä—ã–≤–∞–µ–º —á–∞—Ç –ø–æ—Å–ª–µ –∑–≤–æ–Ω–∫–∞:', autoOpenChatId)
      setIsLoading(true)
      
      // –ë—ã—Å—Ç—Ä–∞—è –ø–æ–ø—ã—Ç–∫–∞ –Ω–∞–π—Ç–∏ –∏ –æ—Ç–∫—Ä—ã—Ç—å —á–∞—Ç
      const tryFindChat = async () => {
        console.log('üîÑ FAST CHAT OPEN - –ü—ã—Ç–∞–µ–º—Å—è –±—ã—Å—Ç—Ä–æ –æ—Ç–∫—Ä—ã—Ç—å —á–∞—Ç:', autoOpenChatId)
        
        if (chatListRef.current?.findAndSelectChat) {
          try {
            const chat = await chatListRef.current.findAndSelectChat(autoOpenChatId)
            
            if (chat) {
              console.log('‚úÖ FAST CHAT OPEN - –ß–∞—Ç –Ω–∞–π–¥–µ–Ω –∏ –æ—Ç–∫—Ä—ã—Ç:', chat.name)
              setSelectedChat(chat)
              localStorage.setItem('selectedChatId', chat.id)
            } else {
              console.log('‚ö†Ô∏è FAST CHAT OPEN - –ß–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω')
            }
            setIsLoading(false)
          } catch (error) {
            console.log('‚ùå FAST CHAT OPEN - –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ —á–∞—Ç–∞:', error)
            setIsLoading(false)
          }
        } else {
          // –ö–æ—Ä–æ—Ç–∫–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –µ—Å–ª–∏ ChatList –Ω–µ –≥–æ—Ç–æ–≤
          console.log('‚è≥ FAST CHAT OPEN - ChatList –Ω–µ –≥–æ—Ç–æ–≤, –∫–æ—Ä–æ—Ç–∫–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞...')
          setTimeout(tryFindChat, 200)
        }
      }
      
      // –ó–∞–ø—É—Å–∫–∞–µ–º —Å—Ä–∞–∑—É –±–µ–∑ –∑–∞–¥–µ—Ä–∂–∫–∏
      tryFindChat()
    } else {
      // –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–∑ localStorage –¢–û–õ–¨–ö–û –µ—Å–ª–∏ –Ω–µ—Ç autoOpenChatId
      console.log('üíæ CHAT APP - –ù–µ—Ç autoOpenChatId, –ø—Ä–æ–≤–µ—Ä—è–µ–º localStorage –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è')
      
      try {
        const savedChatId = localStorage.getItem('selectedChatId')
        const savedChatName = localStorage.getItem('selectedChatName')
        const savedTimestamp = localStorage.getItem('selectedChatTimestamp')
        
        console.log('üíæ CHAT APP - –î–∞–Ω–Ω—ã–µ –∏–∑ localStorage:', {
          savedChatId,
          savedChatName,
          savedTimestamp,
          hasValidData: !!savedChatId
        })
        
        if (savedChatId && chatListRef.current?.findAndSelectChat) {
          console.log('üîÑ CHAT APP - –ü—ã—Ç–∞–µ–º—Å—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —á–∞—Ç –∏–∑ localStorage:', savedChatId)
          
          chatListRef.current.findAndSelectChat(savedChatId)
            .then((chat: Chat | null) => {
              if (chat) {
                console.log('‚úÖ CHAT APP - –ß–∞—Ç —É—Å–ø–µ—à–Ω–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏–∑ localStorage:', {
                  chatId: chat.id,
                  chatName: chat.name,
                  fromStorage: savedChatName
                })
                setSelectedChat(chat)
              } else {
                console.log('‚ö†Ô∏è CHAT APP - –°–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π —á–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω, –æ—á–∏—â–∞–µ–º localStorage')
                localStorage.removeItem('selectedChatId')
                localStorage.removeItem('selectedChatName')
                localStorage.removeItem('selectedChatTimestamp')
              }
            })
            .catch((error: unknown) => {
              console.error('‚ùå CHAT APP - –û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —á–∞—Ç–∞ –∏–∑ localStorage:', error)
              localStorage.removeItem('selectedChatId')
              localStorage.removeItem('selectedChatName')
              localStorage.removeItem('selectedChatTimestamp')
            })
        }
      } catch (error) {
        console.error('üíæ CHAT APP - –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è localStorage:', error)
      }
    }
  }, [autoOpenChatId])

  // –û—á–∏—Å—Ç–∫–∞ —Ç–∞–π–º–µ—Ä–∞ –ø—Ä–∏ —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
  useEffect(() => {
    return () => {
      if (saveTimeoutRef.current) {
        clearTimeout(saveTimeoutRef.current)
      }
    }
  }, [])

  const handleChatSelect = (chat: Chat) => {
    console.log('üíæ CHAT APP - –í—ã–±—Ä–∞–Ω —á–∞—Ç –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è:', {
      chatId: chat.id,
      chatName: chat.name,
      timestamp: new Date().toISOString()
    })
    
    // –ú–≥–Ω–æ–≤–µ–Ω–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º UI
    setSelectedChat(chat)
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ localStorage —Å debouncing –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
    debouncedSaveToLocalStorage(chat)
  }

  const handleBackToList = () => {
    console.log('üíæ CHAT APP - –û—á–∏—â–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —á–∞—Ç –∏–∑ localStorage')
    
    try {
      localStorage.removeItem('selectedChatId')
      localStorage.removeItem('selectedChatName')
      localStorage.removeItem('selectedChatTimestamp')
      console.log('üíæ CHAT APP - localStorage —É—Å–ø–µ—à–Ω–æ –æ—á–∏—â–µ–Ω')
    } catch (error) {
      console.error('üíæ CHAT APP - –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ localStorage:', error)
    }
    
    setSelectedChat(null)
  }

  // –£–¥–∞–ª–∏–ª–∏ —Å–ª–æ–∂–Ω—É—é –ª–æ–≥–∏–∫—É - —Ç–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ—Å—Ç—É—é –≤—ã—à–µ

  const handleCreateNewChat = () => {
    setShowCreateModal(true)
  }

  const handleChatCreated = async (chatId: string) => {
    console.log('–ß–∞—Ç —Å–æ–∑–¥–∞–Ω:', chatId)
    setShowCreateModal(false)
    
    // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ—Ñ—Ä–µ—à-—Ñ—É–Ω–∫—Ü–∏—é –∏–∑ ChatList
    if (chatListRef.current?.refreshChats) {
      await chatListRef.current.refreshChats()
    }
    
    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—ã–±–∏—Ä–∞–µ–º —Å–æ–∑–¥–∞–Ω–Ω—ã–π —á–∞—Ç
    // –ò—â–µ–º –µ–≥–æ –≤ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–º —Å–ø–∏—Å–∫–µ –∏ –≤—ã–±–∏—Ä–∞–µ–º
    setTimeout(async () => {
      if (chatListRef.current?.findAndSelectChat) {
        const chat = await chatListRef.current.findAndSelectChat(chatId)
        if (chat) {
          setSelectedChat(chat)
        }
      }
    }, 500)
  }

  // –ü–†–û–°–¢–û–ô –∑–∞–≥—Ä—É–∑–æ—á–Ω—ã–π —ç–∫—Ä–∞–Ω —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–º –æ—Ç–∫—Ä—ã—Ç–∏–∏ —á–∞—Ç–∞
  if (isLoading && autoOpenChatId) {
    return (
      <div className="h-full flex items-center justify-center bg-muted">
        <div className="text-center">
          <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-primary mx-auto mb-2"></div>
          <p className="text-sm text-muted-foreground">–û—Ç–∫—Ä—ã–≤–∞–µ–º —á–∞—Ç...</p>
        </div>
      </div>
    )
  }

  return (
    <div className="h-full flex bg-muted overflow-hidden">
      {/* –ú–æ–±–∏–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ª–∏–±–æ —Å–ø–∏—Å–æ–∫, –ª–∏–±–æ —á–∞—Ç */}
      <div className="flex-1 md:hidden overflow-hidden">
        {selectedChat ? (
          <ChatInterface
            chat={selectedChat}
            onBack={handleBackToList}
          />
        ) : (
          <div className="bg-card h-full overflow-hidden">
            <ChatList
              ref={chatListRef}
              onChatSelect={handleChatSelect}
              onCreateNewChat={handleCreateNewChat}
              selectedChatId={undefined}
            />
          </div>
        )}
      </div>

      {/* –î–µ—Å–∫—Ç–æ–ø–Ω–∞—è –≤–µ—Ä—Å–∏—è - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ */}
      <div className="hidden md:flex w-full overflow-hidden">
        {/* –õ–µ–≤–∞—è –ø–∞–Ω–µ–ª—å - —Å–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤ */}
        <div className="w-80 bg-card border-r border-border flex-shrink-0 overflow-hidden">
          <ChatList
            ref={chatListRef}
            onChatSelect={handleChatSelect}
            onCreateNewChat={handleCreateNewChat}
            selectedChatId={selectedChat?.id}
          />
        </div>

        {/* –ü—Ä–∞–≤–∞—è –ø–∞–Ω–µ–ª—å - –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å —á–∞—Ç–∞ */}
        <div className="flex-1 bg-background overflow-hidden">
          {selectedChat ? (
            <ChatInterface
              chat={selectedChat}
              onBack={handleBackToList}
            />
          ) : (
            <div className="h-full flex items-center justify-center p-4 chat-pattern-bg">
              <div className="text-center max-w-md bg-card/80 backdrop-blur-sm rounded-lg p-6 border border-border/50">
                <svg className="w-12 h-12 mx-auto text-muted-foreground mb-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M8 12h.01M12 12h.01M16 12h.01M21 12c0 4.418-4.03 8-9 8a9.863 9.863 0 01-4.255-.949L3 20l1.395-3.72C3.512 15.042 3 13.574 3 12c0-4.418 4.03-8 9-8s9 3.582 9 8z" />
                </svg>
                <h3 className="text-lg font-medium text-foreground mb-2">–í—ã–±–µ—Ä–∏—Ç–µ —á–∞—Ç</h3>
                <p className="text-muted-foreground text-sm">–í—ã–±–µ—Ä–∏—Ç–µ —á–∞—Ç –∏–∑ —Å–ø–∏—Å–∫–∞ –∏–ª–∏ —Å–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π</p>
              </div>
            </div>
          )}
        </div>
      </div>

      {/* –ú–æ–¥–∞–ª —Å–æ–∑–¥–∞–Ω–∏—è —á–∞—Ç–∞ */}
      <CreateChatModal
        isOpen={showCreateModal}
        onClose={() => setShowCreateModal(false)}
        onChatCreated={handleChatCreated}
      />

    </div>
  )
}

export default ChatApp
