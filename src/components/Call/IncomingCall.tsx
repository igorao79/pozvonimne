'use client'

import { useEffect, useRef, useState } from 'react'
import useCallStore from '@/store/useCallStore'
import { createClient } from '@/utils/supabase/client'
import { ringtoneAPI } from '@/config/api'

const IncomingCall = () => {
  const {
    callerId,
    callerName,
    acceptCall,
    rejectCall,
    userId
  } = useCallStore()

  const [ringtoneUrl, setRingtoneUrl] = useState<string | null>(null)
  const ringtoneRef = useRef<HTMLAudioElement>(null)
  const supabase = createClient()
  const cleanupFunctionRef = useRef<(() => void) | null>(null)
  const hasUserInteracted = useRef(false)

  // –ó–∞–≥—Ä—É–∂–∞–µ–º –∏ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º —Ä–∏–Ω–≥—Ç–æ–Ω
  useEffect(() => {
    let isPlaying = false

    const loadAndPlayRingtone = async (): Promise<(() => void) | null> => {
      if (!userId || isPlaying) return null

      try {
        console.log('üéµ Starting ringtone loading...')
        isPlaying = true

        // –ü–æ–ª—É—á–∞–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ —Ä–∏–Ω–≥—Ç–æ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ backend
        const result = await ringtoneAPI.get(userId)

        if (result.success && result.url) {
          console.log('üéµ Custom ringtone URL loaded:', result.url)
          setRingtoneUrl(result.url)

          // –í–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π —Ä–∏–Ω–≥—Ç–æ–Ω
          if (ringtoneRef.current) {
            // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –ø–µ—Ä–µ–¥ —É—Å—Ç–∞–Ω–æ–≤–∫–æ–π –Ω–æ–≤–æ–≥–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞
            try {
              ringtoneRef.current.pause()
              ringtoneRef.current.currentTime = 0
              ringtoneRef.current.src = ''
            } catch (err: any) {
              console.log('Error stopping previous ringtone:', err?.message || err)
            }

            ringtoneRef.current.src = result.url
            ringtoneRef.current.loop = true
            ringtoneRef.current.volume = 0.7

            try {
              // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –Ω–∞ autoplay
              if (!hasUserInteracted.current) {
                console.log('‚ö†Ô∏è No user interaction detected, trying to play anyway...')
              }

              await ringtoneRef.current.play()
              console.log('üéµ Custom ringtone started playing successfully')

              return () => {
                isPlaying = false
                if (ringtoneRef.current) {
                  try {
                    ringtoneRef.current.pause()
                    ringtoneRef.current.currentTime = 0
                    ringtoneRef.current.src = ''
                  } catch (err) {
                    console.error('Error stopping custom ringtone:', err)
                  }
                }
              }
            } catch (err: any) {
              console.error('‚ùå Error playing custom ringtone:', err)

              if (err.name === 'NotAllowedError') {
                console.log('üö´ Autoplay blocked, will try again after user interaction')
                // –ñ–¥–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è
                const tryPlayAfterInteraction = () => {
                  if (ringtoneRef.current && hasUserInteracted.current && !isPlaying) {
                    console.log('üéµ Retrying custom ringtone after user interaction')
                    ringtoneRef.current.play().catch(e =>
                      console.error('Still failed to play after interaction:', e)
                    )
                  }
                }

                // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–∏
                const handleInteraction = () => {
                  document.removeEventListener('click', handleInteraction)
                  document.removeEventListener('touchstart', handleInteraction)
                  setTimeout(tryPlayAfterInteraction, 100)
                }

                document.addEventListener('click', handleInteraction, { once: true })
                document.addEventListener('touchstart', handleInteraction, { once: true })
              }

              isPlaying = false
              // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Ä–∏–Ω–≥—Ç–æ–Ω –µ—Å–ª–∏ –∫–∞—Å—Ç–æ–º–Ω—ã–π –Ω–µ –∑–∞–≥—Ä—É–∑–∏–ª—Å—è
              return playDefaultRingtone()
            }
          }
        }

        // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Ä–∏–Ω–≥—Ç–æ–Ω
        console.log('üéµ Using default ringtone')
        return playDefaultRingtone()

      } catch (error) {
        console.error('Error loading ringtone:', error)
        isPlaying = false
        return playDefaultRingtone()
      }
    }

    const playDefaultRingtone = () => {
      // –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç–æ–π —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Ä–∏–Ω–≥—Ç–æ–Ω –±–µ–∑ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π
      if (typeof window === 'undefined') return () => {}

      const AudioContextClass = window.AudioContext || (window as any).webkitAudioContext
      if (!AudioContextClass) {
        console.warn('Web Audio API not supported')
        return () => {}
      }

      try {
        const audioContext = new AudioContextClass()
        let isPlaying = true

        // –ü—Ä–æ—Å—Ç–æ–π –æ–¥–∏–Ω–æ—á–Ω—ã–π –∑–≤—É–∫ –≤–º–µ—Å—Ç–æ –ø–æ–≤—Ç–æ—Ä—è—é—â–µ–≥–æ—Å—è –ø–∞—Ç—Ç–µ—Ä–Ω–∞
        const playSimpleTone = () => {
          if (!isPlaying) return

          const oscillator = audioContext.createOscillator()
          const gainNode = audioContext.createGain()

          oscillator.connect(gainNode)
          gainNode.connect(audioContext.destination)

          oscillator.frequency.value = 800 // –û–¥–∏–Ω —Ç–æ–Ω
          oscillator.type = 'sine'

          // –ü–ª–∞–≤–Ω–æ–µ –Ω–∞—Ä–∞—Å—Ç–∞–Ω–∏–µ –∏ –∑–∞—Ç—É—Ö–∞–Ω–∏–µ –∑–≤—É–∫–∞
          gainNode.gain.setValueAtTime(0, audioContext.currentTime)
          gainNode.gain.linearRampToValueAtTime(0.4, audioContext.currentTime + 0.1)
          gainNode.gain.exponentialRampToValueAtTime(0.01, audioContext.currentTime + 1.5)

          oscillator.start(audioContext.currentTime)
          oscillator.stop(audioContext.currentTime + 1.5)
        }

        // –ò–≥—Ä–∞–µ–º –æ–¥–∏–Ω –ø—Ä–æ—Å—Ç–æ–π –∑–≤—É–∫
        playSimpleTone()

        // –§—É–Ω–∫—Ü–∏—è –æ—á–∏—Å—Ç–∫–∏
        return () => {
          isPlaying = false
          if (audioContext.state !== 'closed') {
            audioContext.close().catch(console.error)
          }
        }
      } catch (err) {
        console.error('Error creating default ringtone:', err)
        return () => {}
      }
    }

    const loadAndPlayRingtoneWrapper = async () => {
      // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π —Ä–∏–Ω–≥—Ç–æ–Ω –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º –Ω–æ–≤–æ–≥–æ
      if (cleanupFunctionRef.current) {
        cleanupFunctionRef.current()
        cleanupFunctionRef.current = null
      }

      cleanupFunctionRef.current = await loadAndPlayRingtone()
    }

    loadAndPlayRingtoneWrapper()

    // –û—á–∏—â–∞–µ–º –ø—Ä–∏ —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
    return () => {
      stopRingtone()
    }
  }, [userId])

  // –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –æ—à–∏–±–æ–∫ autoplay
  useEffect(() => {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–æ–≤–∞–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ä–∞–Ω–µ–µ
    const hasInteractedBefore = sessionStorage.getItem('userHasInteracted') === 'true'
    if (hasInteractedBefore) {
      hasUserInteracted.current = true
      console.log('üëÜ User has interacted before - audio should work')
    }

    const handleUserInteraction = () => {
      hasUserInteracted.current = true
      sessionStorage.setItem('userHasInteracted', 'true')
      console.log('üëÜ User interaction detected - audio should work')
    }

    // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç–∏–ø–æ–≤ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è
    const events = ['click', 'touchstart', 'keydown', 'scroll']
    events.forEach(event => {
      document.addEventListener(event, handleUserInteraction, { once: true })
    })

    return () => {
      events.forEach(event => {
        document.removeEventListener(event, handleUserInteraction)
      })
    }
  }, [])

  // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –±—Ä–∞—É–∑–µ—Ä–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≤—Ö–æ–¥—è—â–µ–≥–æ –∑–≤–æ–Ω–∫–∞
  useEffect(() => {
    if (callerId) {
      console.log('üìû Incoming call detected - preventing browser notifications')

      // –ü—ã—Ç–∞–µ–º—Å—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—Ç–∏—Ç—å –±—Ä–∞—É–∑–µ—Ä–Ω—ã–µ –∑–≤—É–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
      try {
        // –û—Ç–∫–ª—é—á–∞–µ–º —Ñ–æ–∫—É—Å –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –∑–≤—É–∫–æ–≤ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        if (document.activeElement instanceof HTMLElement) {
          document.activeElement.blur()
        }

        // –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π audio context –¥–ª—è –∑–∞—Ö–≤–∞—Ç–∞ –∞—É–¥–∏–æ –ø–æ—Ç–æ–∫–∞
        if (typeof window !== 'undefined') {
          const AudioContextClass = window.AudioContext || (window as any).webkitAudioContext
          if (AudioContextClass) {
            const tempContext = new AudioContextClass()
            // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
            setTimeout(() => {
              if (tempContext.state === 'suspended') {
                tempContext.resume().catch(err =>
                  console.log('Audio context resume:', err.message)
                )
              }
            }, 50)
          }
        }
      } catch (err: any) {
        console.log('Browser notification prevention attempt:', err.message)
      }
    }
  }, [callerId])

  // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–∏–Ω–≥—Ç–æ–Ω –ø—Ä–∏ –ø—Ä–∏–Ω—è—Ç–∏–∏ –∏–ª–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ –∑–≤–æ–Ω–∫–∞
  const stopRingtone = () => {
    console.log('üõë Stopping ALL ringtones...')

    // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π —Ä–∏–Ω–≥—Ç–æ–Ω
    if (ringtoneRef.current) {
      try {
        ringtoneRef.current.pause()
        ringtoneRef.current.currentTime = 0
        ringtoneRef.current.src = ''
        console.log('üõë Custom ringtone stopped')
      } catch (err: any) {
        console.error('Error stopping custom ringtone:', err)
      }
    }

    // –¢–∞–∫–∂–µ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Ä–∏–Ω–≥—Ç–æ–Ω –µ—Å–ª–∏ –æ–Ω –∏–≥—Ä–∞–µ—Ç
    if (cleanupFunctionRef.current) {
      try {
        cleanupFunctionRef.current()
        console.log('üõë Default ringtone stopped')
      } catch (err) {
        console.error('Error stopping default ringtone:', err)
      }
      cleanupFunctionRef.current = null
    }

    // –ü–æ–ø—ã—Ç–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ª—é–±—ã–µ –¥—Ä—É–≥–∏–µ –∑–≤—É–∫–∏ (–≤–∫–ª—é—á–∞—è –±—Ä–∞—É–∑–µ—Ä–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è)
    try {
      // –°–æ–∑–¥–∞–µ–º –∏ –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—É—Å—Ç–æ–π audio context –¥–ª—è —Å–±—Ä–æ—Å–∞
      if (typeof window !== 'undefined') {
        const AudioContextClass = window.AudioContext || (window as any).webkitAudioContext
        if (AudioContextClass) {
          const tempContext = new AudioContextClass()
          // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ –∑–∞–∫—Ä—ã—Ç–∏–µ–º –¥–ª—è –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
          setTimeout(() => {
            if (tempContext.state !== 'closed') {
              tempContext.close().catch(err =>
                console.log('Temp audio context cleanup:', err.message)
              )
            }
          }, 100)
        }
      }
      } catch (err: any) {
        console.log('Browser sound cleanup attempt:', err.message)
      }
  }

  const handleAccept = async () => {
    try {
      console.log('üìû Accepting call, stopping ALL ringtones and notifications...')

      // –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –¥–ª—è –≥–∞—Ä–∞–Ω—Ç–∏–∏
      stopRingtone()

      // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ —á–µ—Ä–µ–∑ –Ω–µ–±–æ–ª—å—à—É—é –∑–∞–¥–µ—Ä–∂–∫—É
      setTimeout(() => {
        stopRingtone()
      }, 100)

      // –ü—ã—Ç–∞–µ–º—Å—è –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ª—é–±—ã–µ —Å–∏—Å—Ç–µ–º–Ω—ã–µ –∑–≤—É–∫–∏
      try {
        // –°–æ–∑–¥–∞–µ–º –∏ —Å—Ä–∞–∑—É —É–Ω–∏—á—Ç–æ–∂–∞–µ–º audio —ç–ª–µ–º–µ–Ω—Ç –¥–ª—è —Å–±—Ä–æ—Å–∞
        const tempAudio = new Audio()
        tempAudio.volume = 0
        tempAudio.play().catch(() => {
          // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏
        })
        setTimeout(() => {
          tempAudio.pause()
          tempAudio.src = ''
        }, 50)
      } catch (err: any) {
        console.log('System sound cleanup attempt:', err.message)
      }

      console.log('üéØ IncomingCall: Accepting call from:', callerId)
      console.log('üéØ IncomingCall: Current state before accept:', {
        callerId,
        userId,
        isReceivingCall: useCallStore.getState().isReceivingCall,
        isInCall: useCallStore.getState().isInCall,
        isCalling: useCallStore.getState().isCalling,
        isCallActive: useCallStore.getState().isCallActive
      })
      
      // Send accept signal back to caller - –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫–∞–Ω–∞–ª –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π
      if (callerId) {
        console.log('üéØ IncomingCall: Sending accept signal to caller...')
        
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º broadcast –Ω–∞ –∫–∞–Ω–∞–ª–µ –∑–≤–æ–Ω—è—â–µ–≥–æ
        const callerChannelId = `calls:${callerId}`
        
        try {
          // –ü–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫–∞–Ω–∞–ª –∏–ª–∏ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π
          let callerChannel = supabase.getChannels().find(ch => ch.topic === callerChannelId)
          
          if (!callerChannel) {
            console.log('üéØ Creating new caller channel for accept signal')
            callerChannel = supabase.channel(callerChannelId)
            
            // –ú–æ–º–µ–Ω—Ç–∞–ª—å–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —Å–∫–æ—Ä–æ—Å—Ç–∏
            await new Promise((resolve) => {
              const timeout = setTimeout(() => {
                console.warn('üéØ Accept signal subscription timeout, trying anyway')
                resolve('timeout')
              }, 100) // –ú–∏–Ω–∏–º—É–º –¥–ª—è –º–æ–º–µ–Ω—Ç–∞–ª—å–Ω–æ–π —Ä–∞–±–æ—Ç—ã

              callerChannel?.subscribe((status) => {
                clearTimeout(timeout)
                console.log('üéØ IncomingCall: Caller channel subscription status:', status)
                
                if (status === 'SUBSCRIBED') {
                  resolve(status)
                } else if (status === 'CHANNEL_ERROR' || status === 'TIMED_OUT') {
                  console.warn('üéØ Subscription failed, but continuing:', status)
                  resolve(status) // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –¥–∞–∂–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ
                }
              })
            })
          }
        
          // –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–∏–≥–Ω–∞–ª –ø—Ä–∏–Ω—è—Ç–∏—è
          const result = await callerChannel?.send({
            type: 'broadcast',
            event: 'call_accepted',
            payload: {
              accepter_id: userId,
              timestamp: Date.now()
            }
          })
          
          console.log('üéØ IncomingCall: Call accept signal sent to:', callerId, 'Result:', result)
          
          // –£–±–∏—Ä–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é –æ—á–∏—Å—Ç–∫—É –∫–∞–Ω–∞–ª–∞ - –ø—É—Å—Ç—å —Å–∏—Å—Ç–µ–º–∞ —Å–∞–º–∞ —É–ø—Ä–∞–≤–ª—è–µ—Ç
          
        } catch (channelError) {
          console.warn('üéØ Error with caller channel, continuing anyway:', channelError)
        }
      }
      
      console.log('üéØ IncomingCall: Calling acceptCall() function...')
      acceptCall()
      
      console.log('üéØ IncomingCall: State after acceptCall():', {
        isReceivingCall: useCallStore.getState().isReceivingCall,
        isInCall: useCallStore.getState().isInCall,
        isCalling: useCallStore.getState().isCalling,
        isCallActive: useCallStore.getState().isCallActive,
        targetUserId: useCallStore.getState().targetUserId
      })
    } catch (err) {
      console.error('üéØ IncomingCall: Error accepting call:', err)
      // Still try to accept the call locally even if signaling fails
      acceptCall()
    }
  }

  const handleReject = async () => {
    try {
      console.log('üìû Rejecting call, stopping ringtone...')
      stopRingtone() // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–∏–Ω–≥—Ç–æ–Ω
      console.log('üéØ IncomingCall: Rejecting call from:', callerId)
      
      // Send reject signal back to caller
      if (callerId) {
        const callerChannel = supabase.channel(`calls:${callerId}`)
        
        await new Promise((resolve, reject) => {
          const timeout = setTimeout(() => {
            reject(new Error('Call reject subscription timeout'))
          }, 3000)

          callerChannel.subscribe((status) => {
            clearTimeout(timeout)
            console.log('üéØ IncomingCall: Reject channel subscription status:', status)
            
            if (status === 'SUBSCRIBED') {
              resolve(status)
            } else if (status === 'CHANNEL_ERROR' || status === 'TIMED_OUT') {
              reject(new Error(`Call reject subscription failed: ${status}`))
            }
          })
        })
        
        const result = await callerChannel.send({
          type: 'broadcast',
          event: 'call_rejected',
          payload: {
            rejector_id: userId,
            timestamp: Date.now()
          }
        })
        
        console.log('üéØ IncomingCall: Call reject signal sent:', result)
        
        // Clean up channel
        setTimeout(() => {
          callerChannel.unsubscribe()
        }, 500)
      }
      
      rejectCall()
    } catch (err) {
      console.error('üéØ IncomingCall: Error rejecting call:', err)
      // Still reject locally even if signaling fails
      rejectCall()
    }
  }

  return (
    <div className="min-h-screen bg-gradient-to-br from-blue-900 to-indigo-900 flex items-center justify-center px-4">
      <div className="bg-white rounded-xl shadow-2xl p-8 max-w-sm w-full text-center">
        <div className="mb-6">
          <div className="w-24 h-24 bg-gradient-to-br from-blue-500 to-indigo-600 rounded-full mx-auto mb-4 flex items-center justify-center">
            <svg className="w-12 h-12 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z" />
            </svg>
          </div>
          <h2 className="text-2xl font-bold text-gray-900 mb-2">
            –í—Ö–æ–¥—è—â–∏–π –∑–≤–æ–Ω–æ–∫
          </h2>
          <p className="text-lg text-gray-600">
            {callerName || `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${callerId?.slice(0, 8)}...`}
          </p>
          <p className="text-sm text-gray-500 mt-1">
            ID: {callerId}
          </p>
        </div>

        <div className="flex space-x-4">
          <button
            onClick={handleReject}
            className="flex-1 bg-red-500 hover:bg-red-600 text-white font-semibold py-4 px-6 rounded-full transition-colors duration-200 flex items-center justify-center"
          >
            <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
            </svg>
          </button>
          
          <button
            onClick={handleAccept}
            className="flex-1 bg-green-500 hover:bg-green-600 text-white font-semibold py-4 px-6 rounded-full transition-colors duration-200 flex items-center justify-center"
          >
            <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M5 13l4 4L19 7" />
            </svg>
          </button>
        </div>

        <div className="mt-6">
          <div className="animate-pulse flex justify-center">
            <div className="w-4 h-4 bg-blue-500 rounded-full mx-1"></div>
            <div className="w-4 h-4 bg-blue-500 rounded-full mx-1 animation-delay-75"></div>
            <div className="w-4 h-4 bg-blue-500 rounded-full mx-1 animation-delay-150"></div>
          </div>
        </div>

        {/* –°–∫—Ä—ã—Ç—ã–π audio —ç–ª–µ–º–µ–Ω—Ç –¥–ª—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ —Ä–∏–Ω–≥—Ç–æ–Ω–∞ */}
        <audio
          ref={ringtoneRef}
          preload="auto"
          onError={(e) => {
            console.error('Audio element error:', e)
            // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π —Ä–∏–Ω–≥—Ç–æ–Ω –Ω–µ –∑–∞–≥—Ä—É–∑–∏–ª—Å—è, –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π
            if (cleanupFunctionRef.current) {
              cleanupFunctionRef.current()
            }
          }}
        />
      </div>
    </div>
  )
}

export default IncomingCall
