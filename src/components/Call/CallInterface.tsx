'use client'

import { useEffect } from 'react'
import useCallStore from '@/store/useCallStore'
import { createClient } from '@/utils/supabase/client'
import useWebRTC from '@/hooks/useWebRTC'
import { CallControls, IncomingCall, CallScreen, DialPad } from '.'
import { ChatApp } from '../Chat'

const CallInterface = () => {
  const {
    userId,
    isInCall,
    isCalling,
    isReceivingCall,
    isCallActive,
    remoteStream,
    setIsReceivingCall,
    setIsCallActive,
    setError,
    endCall
  } = useCallStore()
  
  // Initialize WebRTC
  useWebRTC()
  
  const supabase = createClient()

  useEffect(() => {
    if (!userId) return

    const setupCallListener = async () => {
      console.log('üìû Setting up call listener for user:', userId)

      // –û—á–∏—â–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∫–∞–Ω–∞–ª—ã –ø–µ—Ä–µ–¥ —Å–æ–∑–¥–∞–Ω–∏–µ–º –Ω–æ–≤–æ–≥–æ
      const channelId = `calls:${userId}`
      try {
        const existingChannels = supabase.getChannels().filter(ch => ch.topic === channelId || ch.topic?.includes(channelId))
        console.log('üßπ Found existing call listener channels:', existingChannels.length)

        for (const existingChannel of existingChannels) {
          try {
            console.log('üßπ Cleaning up existing call listener channel:', existingChannel.topic)
            existingChannel.unsubscribe()
            supabase.removeChannel(existingChannel)
          } catch (err) {
            console.warn('Error cleaning up call listener channel:', err)
          }
        }

        // –ú–æ–º–µ–Ω—Ç–∞–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –±–µ–∑ –∑–∞–¥–µ—Ä–∂–µ–∫
        // –£–±–∏—Ä–∞–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —Å–∫–æ—Ä–æ—Å—Ç–∏
      } catch (err) {
        console.warn('Error in call listener channel cleanup process:', err)
      }

      // Subscribe to incoming calls with improved error handling
      const callChannel = supabase
        .channel(channelId)
      .on('broadcast', { event: 'incoming_call' }, (payload) => {
        console.log('üìû Received incoming call:', payload)
        const { caller_id, caller_name, timestamp } = payload.payload
        
        // Check if this is a recent call (not older than 30 seconds)
        if (timestamp && Date.now() - timestamp > 30000) {
          console.log('üìû Ignoring old call signal')
          return
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ª–∏ –º—ã —É–∂–µ –∑–≤–æ–Ω–æ–∫
        const currentState = useCallStore.getState()
        if (currentState.isReceivingCall || currentState.isInCall) {
          console.log('üìû Already handling a call, ignoring duplicate')
          return
        }
        
        console.log('üìû Processing incoming call from:', caller_id, 'name:', caller_name)
        setIsReceivingCall(true, caller_id, caller_name)
      })
      .on('broadcast', { event: 'call_accepted' }, (payload) => {
        console.log('üìû Call was accepted:', payload)
        const { accepter_id } = payload.payload
        // Caller gets notification that call was accepted
        setIsReceivingCall(false)
        setIsCallActive(true)
      })
      .on('broadcast', { event: 'call_rejected' }, (payload) => {
        console.log('üìû Call was rejected:', payload)
        const { rejector_id } = payload.payload

        // –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–∑ store
        const currentState = useCallStore.getState()

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –Ω–∞—à–µ–≥–æ –∑–≤–æ–Ω–∫–∞
        if (currentState.isCalling && currentState.targetUserId === rejector_id) {
          console.log('üìû Our call was rejected by:', rejector_id.slice(0, 8))
          setError('–ó–≤–æ–Ω–æ–∫ –æ—Ç–∫–ª–æ–Ω–µ–Ω')
          endCall()
        } else if (currentState.isReceivingCall && currentState.callerId === rejector_id) {
          console.log('üìû Incoming call was rejected by:', rejector_id.slice(0, 8))
          setError('–ó–≤–æ–Ω–æ–∫ –æ—Ç–∫–ª–æ–Ω–µ–Ω')
          endCall()
        } else {
          console.log('üìû Call rejected by unknown user:', rejector_id?.slice(0, 8))
          // –î–∞–∂–µ –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, –∑–∞–≤–µ—Ä—à–∞–µ–º –∑–≤–æ–Ω–æ–∫ –µ—Å–ª–∏ –º—ã –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –∑–≤–æ–Ω–∫–∞
          if (currentState.isInCall) {
            setError('–ó–≤–æ–Ω–æ–∫ –∑–∞–≤–µ—Ä—à–µ–Ω')
            endCall()
          }
        }
      })
      .on('broadcast', { event: 'call_ended' }, (payload) => {
        console.log('üìû Call ended by other user:', payload)
        endCall()
      })
      .subscribe((status) => {
        console.log('üìû Call channel subscription status:', status)
        
        if (status === 'CHANNEL_ERROR') {
          console.error('üìû Call channel subscription error')
          setError('–ü—Ä–æ–±–ª–µ–º–∞ —Å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ–º –¥–ª—è –≤—Ö–æ–¥—è—â–∏—Ö –∑–≤–æ–Ω–∫–æ–≤')
        } else if (status === 'TIMED_OUT') {
          console.error('üìû Call channel subscription timeout')
          setError('–¢–∞–π–º–∞—É—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –¥–ª—è –≤—Ö–æ–¥—è—â–∏—Ö –∑–≤–æ–Ω–∫–æ–≤')
        } else if (status === 'SUBSCRIBED') {
          console.log('üìû Successfully subscribed to call channel')
        }
      })

      return () => {
        console.log('üìû Cleaning up call listener for user:', userId)
        supabase.removeChannel(callChannel)
      }
    }

    setupCallListener()

    return () => {
      console.log('üìû Cleaning up call listener for user:', userId)
      // Cleanup will be handled by the async function
    }
  }, [userId, supabase, setIsReceivingCall, endCall, setIsCallActive, setError])

  if (isReceivingCall) {
    return <IncomingCall />
  }

  if (isInCall && isCallActive) {
    return <CallScreen />
  }

  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ª–æ–∞–¥–µ—Ä, –∫–æ–≥–¥–∞ –∑–≤–æ–Ω–æ–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω, –Ω–æ –µ—â–µ –Ω–µ –ø—Ä–∏–Ω—è—Ç
  if (isInCall && isCalling && !isCallActive) {
    return (
      <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
        <div className="bg-white rounded-lg p-6 max-w-sm w-full mx-4">
          <div className="text-center">
            <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-indigo-600 mx-auto mb-4"></div>
            <h3 className="text-lg font-semibold text-gray-900 mb-2">–ó–≤–æ–Ω–æ–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω</h3>
            <p className="text-gray-600 mb-4">–û–∂–∏–¥–∞–Ω–∏–µ –ø—Ä–∏–Ω—è—Ç–∏—è –∑–≤–æ–Ω–∫–∞...</p>
            <button
              onClick={endCall}
              className="w-full bg-red-600 text-white py-2 px-4 rounded-lg hover:bg-red-700 transition-colors"
            >
              –û—Ç–º–µ–Ω–∏—Ç—å –∑–≤–æ–Ω–æ–∫
            </button>
          </div>
        </div>
      </div>
    )
  }

  return <ChatApp />
}

export default CallInterface
