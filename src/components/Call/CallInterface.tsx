'use client'

import { useEffect, useState, useRef } from 'react'
import useCallStore from '@/store/useCallStore'
import { createClient } from '@/utils/supabase/client'
import useWebRTC from '@/hooks/useWebRTC'
import { CallControls, IncomingCall, CallScreen, DialPad } from '.'
import { ChatApp } from '../Chat'
import { sendCallEndedMessage, sendMissedCallMessage } from '@/utils/callSystemMessages'

interface CallInterfaceProps {
  resetChatTrigger?: number
}

const CallInterface = ({ resetChatTrigger }: CallInterfaceProps = {}) => {
  const {
    userId,
    isInCall,
    isCalling,
    isReceivingCall,
    isCallActive,
    remoteStream,
    setIsReceivingCall,
    setIsCallActive,
    setError,
    endCall,
    targetUserId,
    callDurationSeconds,
    callerId,
    callerName
  } = useCallStore()

  // Initialize WebRTC
  useWebRTC()

  const supabase = createClient()

  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è —Ç–µ–ø–µ—Ä—å –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –≥–ª–æ–±–∞–ª—å–Ω–æ

  // –£–ë–†–ê–ù–û: –ë–æ–ª—å—à–µ –Ω–µ –æ—Ç–∫—Ä—ã–≤–∞–µ–º —á–∞—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ—Å–ª–µ –∑–≤–æ–Ω–∫–∞
  
  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —á–∞—Ç–∞ –∏–∑ localStorage
  const [savedChatId, setSavedChatId] = useState<string | null>(null)
  
  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π –∑–≤–æ–Ω–∫–∞
  const prevCallStateRef = useRef({
    isInCall: false,
    isCallActive: false,
    isCalling: false,
    isReceivingCall: false,
    targetUserId: '',
    callerId: '',
    callerName: ''
  })

  // –£–ë–†–ê–ù–û: –§—É–Ω–∫—Ü–∏—è –ø–æ–∏—Å–∫–∞ —á–∞—Ç–∞ –±–æ–ª—å—à–µ –Ω–µ –Ω—É–∂–Ω–∞

  // –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–≥–æ —á–∞—Ç–∞ –∏–∑ localStorage –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
  // –£–ë–†–ê–ù–û: –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —á–∞—Ç–∞ –ø—Ä–∏ –≤—Ö–æ–¥–µ –≤ –∞–∫–∫–∞—É–Ω—Ç
  // –¢–µ–ø–µ—Ä—å —á–∞—Ç –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –∑–≤–æ–Ω–∫–∞ –∏–ª–∏ –ø—Ä–∏ —è–≤–Ω–æ–º –≤—ã–±–æ—Ä–µ

  // –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è –∑–≤–æ–Ω–∫–∞ –¥–ª—è —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
  useEffect(() => {
    const prev = prevCallStateRef.current
    const current = {
      isInCall,
      isCallActive,
      isCalling,
      isReceivingCall,
      targetUserId,
      callerId: callerId || '',
      callerName: callerName || ''
    }

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞–∫–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—á–∞—Å—Ç–≤—É–µ—Ç –≤ –∑–≤–æ–Ω–∫–µ
    const otherUserId = targetUserId || current.callerId
    const otherUserName = callerName || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'

    console.log('üìû Call state analysis:', {
      prev,
      current,
      otherUserId,
      otherUserName,
      callDurationSeconds
    })

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–ø—É—â–µ–Ω–Ω–æ–≥–æ –∑–≤–æ–Ω–∫–∞
    if (prev.isCalling && !current.isCalling && !current.isCallActive && !current.isInCall && prev.targetUserId) {
      console.log('üìû Missed call detected - caller hung up before answer')
      setTimeout(() => handleMissedCall(prev.targetUserId, '–í—ã'), 1000)
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –≤—Ö–æ–¥—è—â–µ–≥–æ –∑–≤–æ–Ω–∫–∞ (–∑–≤–æ–Ω—è—â–∏–π —Å–±—Ä–æ—Å–∏–ª)
    if (prev.isReceivingCall && !current.isReceivingCall && !current.isCallActive && !current.isInCall && prev.callerId) {
      console.log('üìû Incoming call cancelled - caller hung up before answer')
      setTimeout(() => handleMissedCall(prev.callerId, prev.callerName || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'), 1000)
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∑–≤–æ–Ω–∫–∞
    if (prev.isCallActive && !current.isCallActive && !current.isInCall && callDurationSeconds > 0) {
      console.log('üìû Active call ended with duration:', callDurationSeconds)
      if (otherUserId) {
        setTimeout(() => handleCallEnded(otherUserId, callDurationSeconds), 1000)
      }
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    prevCallStateRef.current = current
  }, [isInCall, isCallActive, isCalling, isReceivingCall, targetUserId, callerId, callerName, callDurationSeconds])

  // –í–†–ï–ú–ï–ù–ù–û –û–¢–ö–õ–Æ–ß–ò–õ–ò —Å–∏—Å—Ç–µ–º–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è - –æ–Ω–∏ –≤—ã–∑—ã–≤–∞—é—Ç 400 –æ—à–∏–±–∫–∏
  const handleMissedCall = async (userId: string, userName: string) => {
    console.log('üö® –°–ò–°–¢–ï–ú–ù–´–ï –°–û–û–ë–©–ï–ù–ò–Ø –û–¢–ö–õ–Æ–ß–ï–ù–´ - –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã–π –∑–≤–æ–Ω–æ–∫')
    // –°–∏—Å—Ç–µ–º–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω—ã –∏–∑-–∑–∞ –æ—à–∏–±–æ–∫ —Å –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º–∏ —Å—Ç–æ–ª–±—Ü–∞–º–∏
  }

  const handleCallEnded = async (userId: string, duration: number) => {
    console.log('üö® –°–ò–°–¢–ï–ú–ù–´–ï –°–û–û–ë–©–ï–ù–ò–Ø –û–¢–ö–õ–Æ–ß–ï–ù–´ - –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∑–≤–æ–Ω–∫–∞')
    // –°–∏—Å—Ç–µ–º–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω—ã –∏–∑-–∑–∞ –æ—à–∏–±–æ–∫ —Å –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º–∏ —Å—Ç–æ–ª–±—Ü–∞–º–∏
  }

  // –£–ë–†–ê–ù–ê –ù–ï–ü–†–ê–í–ò–õ–¨–ù–ê–Ø –õ–û–ì–ò–ö–ê: –ù–µ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∫ —á–∞—Ç—É –ø–æ—Å–ª–µ –∑–≤–æ–Ω–∫–∞!
  // –ö–∞–∫ –≤ Telegram/Discord - –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Å—Ç–∞–µ—Ç—Å—è —Ç–∞–º, –≥–¥–µ –±—ã–ª –¥–æ –∑–≤–æ–Ω–∫–∞

  // –£–ë–†–ê–ù–û: –õ–æ–∫–∞–ª—å–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∑–≤–æ–Ω–∫–∏ —Ç–µ–ø–µ—Ä—å –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –≥–ª–æ–±–∞–ª—å–Ω–æ
  // —á–µ—Ä–µ–∑ useGlobalCallManager –≤ page.tsx
  
  useEffect(() => {
    console.log('üìû CallInterface mounted - call listening is handled globally by useGlobalCallManager')
  }, [userId])

  // –ü–†–ê–í–ò–õ–¨–ù–û: ChatApp –≤—Å–µ–≥–¥–∞ –æ—Å—Ç–∞–µ—Ç—Å—è —Å–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–º
  // –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –∑–≤–æ–Ω–∫–∞ –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç—Å—è –ø–æ–≤–µ—Ä—Ö –∫–∞–∫ –º–æ–¥–∞–ª—å–Ω—ã–µ –æ–∫–Ω–∞
  
  console.log('üì± CALL INTERFACE - –†–µ–Ω–¥–µ—Ä —á–∞—Ç–∞:', {
    savedChatId,
    hasAutoOpenChat: !!savedChatId,
    isInCall,
    isCallActive,
    isReceivingCall,
    timestamp: new Date().toISOString()
  })

  return (
    <div className="relative h-full w-full">
      {/* –û—Å–Ω–æ–≤–Ω–æ–π —á–∞—Ç - –í–°–ï–ì–î–ê —Å–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω */}
      <ChatApp 
        autoOpenChatId={savedChatId || undefined} 
        onResetChat={() => {}} 
        resetTrigger={resetChatTrigger} 
      />

      {/* –ú–æ–¥–∞–ª—å–Ω—ã–µ –æ–∫–Ω–∞ –∑–≤–æ–Ω–∫–æ–≤ - –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç—Å—è –ü–û–í–ï–†–• —á–∞—Ç–∞ */}
      {isReceivingCall && (
        <div className="absolute inset-0 z-50 bg-background">
          <IncomingCall />
        </div>
      )}

      {isInCall && isCallActive && (
        <div className="absolute inset-0 z-50 bg-background">
          <CallScreen />
        </div>
      )}
    </div>
  )
}

export default CallInterface
