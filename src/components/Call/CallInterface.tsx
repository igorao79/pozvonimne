'use client'

import { useEffect, useState, useRef } from 'react'
import useCallStore from '@/store/useCallStore'
import { createClient } from '@/utils/supabase/client'
import useWebRTC from '@/hooks/useWebRTC'
import { CallControls, IncomingCall, CallScreen, DialPad } from '.'
import { ChatApp } from '../Chat'
import { sendCallEndedMessage, sendMissedCallMessage, findOrCreateChatWithUser } from '@/utils/callSystemMessages'
import { createSubscriptionHandler, createReconnectionManager, safeRemoveChannel } from '@/utils/subscriptionHelpers'
import { resilientChannelManager } from '@/utils/resilientChannelManager'

interface CallInterfaceProps {
  resetChatTrigger?: number
}

const CallInterface = ({ resetChatTrigger }: CallInterfaceProps = {}) => {
  const {
    userId,
    isInCall,
    isCalling,
    isReceivingCall,
    isCallActive,
    remoteStream,
    setIsReceivingCall,
    setIsCallActive,
    setError,
    endCall,
    targetUserId,
    callDurationSeconds,
    callerId,
    callerName
  } = useCallStore()

  // Initialize WebRTC
  useWebRTC()

  const supabase = createClient()

  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
  const [isReconnecting, setIsReconnecting] = useState(false)
  const reconnectionManagerRef = useRef<ReturnType<typeof createReconnectionManager> | null>(null)

  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —á–∞—Ç–∞, –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–Ω–æ –æ—Ç–∫—Ä—ã—Ç—å –ø–æ—Å–ª–µ –∑–≤–æ–Ω–∫–∞
  const [chatToOpenAfterCall, setChatToOpenAfterCall] = useState<string | null>(null)
  
  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —á–∞—Ç–∞ –∏–∑ localStorage
  const [savedChatId, setSavedChatId] = useState<string | null>(null)
  
  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π –∑–≤–æ–Ω–∫–∞
  const prevCallStateRef = useRef({
    isInCall: false,
    isCallActive: false,
    isCalling: false,
    isReceivingCall: false,
    targetUserId: '',
    callerId: '',
    callerName: ''
  })

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ —á–∞—Ç–∞ —Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º (–¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ —á–∞—Ç—É)
  const findChatWithUser = async (targetUserId: string) => {
    return await findOrCreateChatWithUser(targetUserId)
  }

  // –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–≥–æ —á–∞—Ç–∞ –∏–∑ localStorage –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
  // –£–ë–†–ê–ù–û: –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —á–∞—Ç–∞ –ø—Ä–∏ –≤—Ö–æ–¥–µ –≤ –∞–∫–∫–∞—É–Ω—Ç
  // –¢–µ–ø–µ—Ä—å —á–∞—Ç –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –∑–≤–æ–Ω–∫–∞ –∏–ª–∏ –ø—Ä–∏ —è–≤–Ω–æ–º –≤—ã–±–æ—Ä–µ

  // –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è –∑–≤–æ–Ω–∫–∞ –¥–ª—è —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
  useEffect(() => {
    const prev = prevCallStateRef.current
    const current = {
      isInCall,
      isCallActive,
      isCalling,
      isReceivingCall,
      targetUserId,
      callerId: callerId || '',
      callerName: callerName || ''
    }

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞–∫–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—á–∞—Å—Ç–≤—É–µ—Ç –≤ –∑–≤–æ–Ω–∫–µ
    const otherUserId = targetUserId || current.callerId
    const otherUserName = callerName || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'

    console.log('üìû Call state analysis:', {
      prev,
      current,
      otherUserId,
      otherUserName,
      callDurationSeconds
    })

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–ø—É—â–µ–Ω–Ω–æ–≥–æ –∑–≤–æ–Ω–∫–∞
    if (prev.isCalling && !current.isCalling && !current.isCallActive && !current.isInCall && prev.targetUserId) {
      console.log('üìû Missed call detected - caller hung up before answer')
      setTimeout(() => handleMissedCall(prev.targetUserId, '–í—ã'), 1000)
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –≤—Ö–æ–¥—è—â–µ–≥–æ –∑–≤–æ–Ω–∫–∞ (–∑–≤–æ–Ω—è—â–∏–π —Å–±—Ä–æ—Å–∏–ª)
    if (prev.isReceivingCall && !current.isReceivingCall && !current.isCallActive && !current.isInCall && prev.callerId) {
      console.log('üìû Incoming call cancelled - caller hung up before answer')
      setTimeout(() => handleMissedCall(prev.callerId, prev.callerName || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'), 1000)
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∑–≤–æ–Ω–∫–∞
    if (prev.isCallActive && !current.isCallActive && !current.isInCall && callDurationSeconds > 0) {
      console.log('üìû Active call ended with duration:', callDurationSeconds)
      if (otherUserId) {
        setTimeout(() => handleCallEnded(otherUserId, callDurationSeconds), 1000)
      }
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    prevCallStateRef.current = current
  }, [isInCall, isCallActive, isCalling, isReceivingCall, targetUserId, callerId, callerName, callDurationSeconds])

  // –í–†–ï–ú–ï–ù–ù–û –û–¢–ö–õ–Æ–ß–ò–õ–ò —Å–∏—Å—Ç–µ–º–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è - –æ–Ω–∏ –≤—ã–∑—ã–≤–∞—é—Ç 400 –æ—à–∏–±–∫–∏
  const handleMissedCall = async (userId: string, userName: string) => {
    console.log('üö® –°–ò–°–¢–ï–ú–ù–´–ï –°–û–û–ë–©–ï–ù–ò–Ø –û–¢–ö–õ–Æ–ß–ï–ù–´ - –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã–π –∑–≤–æ–Ω–æ–∫')
    // –°–∏—Å—Ç–µ–º–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω—ã –∏–∑-–∑–∞ –æ—à–∏–±–æ–∫ —Å –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º–∏ —Å—Ç–æ–ª–±—Ü–∞–º–∏
  }

  const handleCallEnded = async (userId: string, duration: number) => {
    console.log('üö® –°–ò–°–¢–ï–ú–ù–´–ï –°–û–û–ë–©–ï–ù–ò–Ø –û–¢–ö–õ–Æ–ß–ï–ù–´ - –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∑–≤–æ–Ω–∫–∞')
    // –°–∏—Å—Ç–µ–º–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω—ã –∏–∑-–∑–∞ –æ—à–∏–±–æ–∫ —Å –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º–∏ —Å—Ç–æ–ª–±—Ü–∞–º–∏
  }

  // –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∑–≤–æ–Ω–∫–∞ –∏ –Ω–∞—Ö–æ–¥–∏–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π —á–∞—Ç –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞
  useEffect(() => {
    const wasInCall = isInCall || isCallActive || isCalling || isReceivingCall
    const isCurrentlyInCall = isInCall || isCallActive || isCalling || isReceivingCall
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ —á–∞—Ç—É
    const userToRedirect = targetUserId || callerId

    console.log('üì± –ü–ï–†–ï–•–û–î –ö –ß–ê–¢–£ - –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∑–≤–æ–Ω–∫–∞:', {
      wasInCall,
      isCurrentlyInCall,
      targetUserId: targetUserId?.substring(0, 8),
      callerId: callerId?.substring(0, 8),
      userToRedirect: userToRedirect?.substring(0, 8),
      chatToOpenAfterCall,
      timestamp: new Date().toISOString()
    })

    // –ï—Å–ª–∏ –∑–≤–æ–Ω–æ–∫ —Ç–æ–ª—å–∫–æ —á—Ç–æ –∑–∞–≤–µ—Ä—à–∏–ª—Å—è (–±—ã–ª –≤ –∑–≤–æ–Ω–∫–µ, –Ω–æ —Å–µ–π—á–∞—Å –Ω–µ—Ç)
    if (wasInCall && !isCurrentlyInCall && userToRedirect && !chatToOpenAfterCall) {
      console.log('üì± –ü–ï–†–ï–•–û–î –ö –ß–ê–¢–£ - –ó–≤–æ–Ω–æ–∫ –∑–∞–≤–µ—Ä—à–∏–ª—Å—è, –∏—â–µ–º —á–∞—Ç –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞:', {
        userToRedirect: userToRedirect.substring(0, 8),
        wasInCall,
        isCurrentlyInCall
      })
      
      // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
      setTimeout(async () => {
        try {
          console.log('üì± –ü–ï–†–ï–•–û–î –ö –ß–ê–¢–£ - –ü–æ–∏—Å–∫/—Å–æ–∑–¥–∞–Ω–∏–µ —á–∞—Ç–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', userToRedirect.substring(0, 8))
          
          const chatId = await findOrCreateChatWithUser(userToRedirect)
          
          console.log('üì± –ü–ï–†–ï–•–û–î –ö –ß–ê–¢–£ - –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–∏—Å–∫–∞ —á–∞—Ç–∞:', {
            chatId,
            userToRedirect: userToRedirect.substring(0, 8),
            found: !!chatId
          })

          if (chatId) {
            console.log('üì± –ü–ï–†–ï–•–û–î –ö –ß–ê–¢–£ - –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —á–∞—Ç–∞ –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è:', {
              chatId,
              userToRedirect: userToRedirect.substring(0, 8)
            })
            setChatToOpenAfterCall(chatId)
          } else {
            console.error('‚ùå –ü–ï–†–ï–•–û–î –ö –ß–ê–¢–£ - –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏/—Å–æ–∑–¥–∞—Ç—å —á–∞—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', {
              userToRedirect: userToRedirect.substring(0, 8)
            })
          }
        } catch (error) {
          console.error('‚ùå –ü–ï–†–ï–•–û–î –ö –ß–ê–¢–£ - –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ —á–∞—Ç–∞ –ø–æ—Å–ª–µ –∑–≤–æ–Ω–∫–∞:', {
            error,
            userToRedirect: userToRedirect.substring(0, 8),
            message: error instanceof Error ? error.message : 'Unknown error'
          })
        }
      }, 1500)
    }

    // –ï—Å–ª–∏ –∑–≤–æ–Ω–æ–∫ –Ω–∞—á–∞–ª—Å—è –∑–∞–Ω–æ–≤–æ, –æ—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —á–∞—Ç–∞
    if (isCurrentlyInCall && chatToOpenAfterCall) {
      console.log('üì± –ü–ï–†–ï–•–û–î –ö –ß–ê–¢–£ - –ù–æ–≤—ã–π –∑–≤–æ–Ω–æ–∫ –Ω–∞—á–∞–ª—Å—è, –æ—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —á–∞—Ç–∞:', {
        chatToOpenAfterCall,
        isCurrentlyInCall
      })
      setChatToOpenAfterCall(null)
    }

    // –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —á–∞—Ç–∞ —á–µ—Ä–µ–∑ –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–≤–æ–Ω–∫–∞
    if (wasInCall && !isCurrentlyInCall && chatToOpenAfterCall) {
      console.log('üì± –ü–ï–†–ï–•–û–î –ö –ß–ê–¢–£ - –ü–ª–∞–Ω–∏—Ä—É–µ–º –æ—á–∏—Å—Ç–∫—É —Å–æ—Å—Ç–æ—è–Ω–∏—è —á–∞—Ç–∞ —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥:', {
        chatToOpenAfterCall
      })
      setTimeout(() => {
        console.log('üßπ –ü–ï–†–ï–•–û–î –ö –ß–ê–¢–£ - –û—á–∏—Å—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —á–∞—Ç–∞ –ø–æ—Å–ª–µ –∑–∞–¥–µ—Ä–∂–∫–∏')
        setChatToOpenAfterCall(null)
      }, 5000) // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –≤—Ä–µ–º—è –¥–æ 5 —Å–µ–∫—É–Ω–¥
    }
  }, [isInCall, isCallActive, isCalling, isReceivingCall, targetUserId, callerId, chatToOpenAfterCall])

  useEffect(() => {
    if (!userId) return

    const setupCallListener = async () => {
      console.log('üìû Setting up call listener for user:', userId)

      // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
      if (!reconnectionManagerRef.current) {
        reconnectionManagerRef.current = createReconnectionManager(
          () => {
            setIsReconnecting(false)
            setupCallListener()
          },
          3, // –º–∞–∫—Å–∏–º—É–º –ø–æ–ø—ã—Ç–æ–∫
          2000 // –±–∞–∑–æ–≤–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞
        )
      }

      // –û—á–∏—â–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∫–∞–Ω–∞–ª—ã –ø–µ—Ä–µ–¥ —Å–æ–∑–¥–∞–Ω–∏–µ–º –Ω–æ–≤–æ–≥–æ
      const channelId = `calls:${userId}`
      try {
        const existingChannels = supabase.getChannels().filter(ch => ch.topic === channelId || ch.topic?.includes(channelId))
        console.log('üßπ Found existing call listener channels:', existingChannels.length)

        for (const existingChannel of existingChannels) {
          safeRemoveChannel(supabase, existingChannel, `Call Listener Cleanup`)
        }

        // –ú–æ–º–µ–Ω—Ç–∞–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –±–µ–∑ –∑–∞–¥–µ—Ä–∂–µ–∫
        // –£–±–∏—Ä–∞–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —Å–∫–æ—Ä–æ—Å—Ç–∏
      } catch (err) {
        console.warn('Error in call listener channel cleanup process:', err)
      }

      // Subscribe to incoming calls with resilient channel manager
      resilientChannelManager.createResilientChannel({
        channelName: channelId,
        setup: (channel) => {
          return channel
            .on('broadcast', { event: 'incoming_call' }, (payload: any) => {
              console.log('üìû Received incoming call:', payload)
              const { caller_id, caller_name, timestamp } = payload.payload
              
              // Check if this is a recent call (not older than 30 seconds)
              if (timestamp && Date.now() - timestamp > 30000) {
                console.log('üìû Ignoring old call signal')
                return
              }
              
              // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ª–∏ –º—ã —É–∂–µ –∑–≤–æ–Ω–æ–∫
              const currentState = useCallStore.getState()
              if (currentState.isReceivingCall || currentState.isInCall) {
                console.log('üìû Already handling a call, ignoring duplicate')
                return
              }
              
              console.log('üìû Processing incoming call from:', caller_id, 'name:', caller_name)
              setIsReceivingCall(true, caller_id, caller_name)
            })
            .on('broadcast', { event: 'call_accepted' }, (payload: any) => {
              console.log('üìû Call was accepted:', payload)
              const { accepter_id } = payload.payload
              // Caller gets notification that call was accepted
              setIsReceivingCall(false)
              setIsCallActive(true)
            })
            .on('broadcast', { event: 'call_rejected' }, (payload: any) => {
              console.log('üìû Call was rejected:', payload)
              const { rejector_id } = payload.payload

              // –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–∑ store
              const currentState = useCallStore.getState()

              // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –Ω–∞—à–µ–≥–æ –∑–≤–æ–Ω–∫–∞
              if (currentState.isCalling && currentState.targetUserId === rejector_id) {
                console.log('üìû Our call was rejected by:', rejector_id.slice(0, 8))
                // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—É—é –æ—à–∏–±–∫—É –¥–ª—è –≤–∏–∑—É–∞–ª—å–Ω–æ–≥–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–≤–µ—Ç–∞ –ø–ª–∞—à–∫–∏
                setError('CALL_REJECTED_VISUAL')
                // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ —á—Ç–æ–±—ã –æ—à–∏–±–∫–∞ —É—Å–ø–µ–ª–∞ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å—Å—è
                setTimeout(() => endCall(), 50)
              } else if (currentState.isReceivingCall && currentState.callerId === rejector_id) {
                console.log('üìû Incoming call was rejected by:', rejector_id.slice(0, 8))
                // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—É—é –æ—à–∏–±–∫—É –¥–ª—è –≤–∏–∑—É–∞–ª—å–Ω–æ–≥–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–≤–µ—Ç–∞ –ø–ª–∞—à–∫–∏
                setError('CALL_REJECTED_VISUAL')
                // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ —á—Ç–æ–±—ã –æ—à–∏–±–∫–∞ —É—Å–ø–µ–ª–∞ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å—Å—è
                setTimeout(() => endCall(), 50)
              } else {
                console.log('üìû Call rejected by unknown user:', rejector_id?.slice(0, 8))
                // –î–∞–∂–µ –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, –∑–∞–≤–µ—Ä—à–∞–µ–º –∑–≤–æ–Ω–æ–∫ –µ—Å–ª–∏ –º—ã –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –∑–≤–æ–Ω–∫–∞
                if (currentState.isInCall) {
                  setTimeout(() => endCall(), 50)
                }
              }
            })
            .on('broadcast', { event: 'call_ended' }, (payload: any) => {
              console.log('üìû Call ended by other user:', payload)
              endCall()
            })
            .on('broadcast', { event: 'call_cancelled' }, (payload: any) => {
              console.log('üìû Call cancelled by caller:', payload)
              const { caller_id } = payload.payload

              // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –æ—Ç–º–µ–Ω–∞ –Ω–∞—à–µ–≥–æ –∑–≤–æ–Ω–∫–∞
              const currentState = useCallStore.getState()
              if (currentState.isReceivingCall && currentState.callerId === caller_id) {
                console.log('üìû Our incoming call was cancelled by:', caller_id.slice(0, 8))
                setError('–ó–≤–æ–Ω–æ–∫ –æ—Ç–º–µ–Ω–µ–Ω –∑–≤–æ–Ω—è—â–∏–º')
                endCall()
              } else {
                console.log('üìû Call cancelled by unknown caller:', caller_id?.slice(0, 8))
                // –ï—Å–ª–∏ –º—ã –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –≤—Ö–æ–¥—è—â–µ–≥–æ –∑–≤–æ–Ω–∫–∞, –∑–∞–≤–µ—Ä—à–∞–µ–º –µ–≥–æ
                if (currentState.isReceivingCall) {
                  setError('–ó–≤–æ–Ω–æ–∫ –æ—Ç–º–µ–Ω–µ–Ω')
                  endCall()
                }
              }
            })
        },
        onSubscribed: () => {
          // –û—á–∏—â–∞–µ–º –æ—à–∏–±–∫–∏ –∏ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏
          setError(null)
          setIsReconnecting(false)
          if (reconnectionManagerRef.current) {
            reconnectionManagerRef.current.reset()
          }
        },
        onError: (errorMessage) => {
          if (!isReconnecting && reconnectionManagerRef.current) {
            setIsReconnecting(true)
            const attempts = reconnectionManagerRef.current.getAttempts()
            setError(`–ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∑–≤–æ–Ω–∫–∞–º... (${attempts + 1}/3)`)
            
            const success = reconnectionManagerRef.current.reconnect()
            if (!success) {
              setError('–ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –¥–ª—è –∑–≤–æ–Ω–∫–æ–≤')
              setIsReconnecting(false)
            }
          }
        },
        maxReconnectAttempts: 10, // –ë–æ–ª—å—à–µ –ø–æ–ø—ã—Ç–æ–∫ –¥–ª—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤
        reconnectDelay: 3000, // 3 —Å–µ–∫—É–Ω–¥—ã –º–µ–∂–¥—É –ø–æ–ø—ã—Ç–∫–∞–º–∏
        keepAliveInterval: 15000, // Keep-alive –∫–∞–∂–¥—ã–µ 15 —Å–µ–∫—É–Ω–¥ –¥–ª—è –¥–ª–∏—Ç–µ–ª—å–Ω—ã—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
        healthCheckInterval: 30000 // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
      }).catch(error => {
        console.error('üìû Failed to create resilient call channel:', error)
        setError('–ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –¥–ª—è –∑–≤–æ–Ω–∫–æ–≤')
      })

      return () => {
        console.log('üìû Cleaning up resilient call listener for user:', userId)
        resilientChannelManager.removeChannel(channelId)
      }
    }

    setupCallListener()

    return () => {
      console.log('üìû Cleaning up call listener for user:', userId)
      
      // –£–¥–∞–ª—è–µ–º —É—Å—Ç–æ–π—á–∏–≤—ã–π –∫–∞–Ω–∞–ª
      if (userId) {
        resilientChannelManager.removeChannel(`calls:${userId}`)
      }
      
      // –û—á–∏—â–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
      if (reconnectionManagerRef.current) {
        reconnectionManagerRef.current.cancel()
        reconnectionManagerRef.current = null
      }
      setIsReconnecting(false)
    }
  }, [userId, supabase, isReconnecting])

  if (isReceivingCall) {
    return <IncomingCall />
  }

  if (isInCall && isCallActive) {
    return <CallScreen />
  }

  // –£–±–∏—Ä–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ - —Ç–µ–ø–µ—Ä—å –∏–Ω–¥–∏–∫–∞—Ü–∏—è –∑–≤–æ–Ω–∫–∞ –≤ ChatHeader

  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞–∫–æ–π —á–∞—Ç –Ω—É–∂–Ω–æ –æ—Ç–∫—Ä—ã—Ç—å: –ø–æ—Å–ª–µ –∑–≤–æ–Ω–∫–∞ –∏–º–µ–µ—Ç –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –Ω–∞–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–º
  const chatIdToOpen = chatToOpenAfterCall || savedChatId

  console.log('üì± CALL INTERFACE - –†–µ–Ω–¥–µ—Ä —á–∞—Ç–∞:', {
    chatToOpenAfterCall,
    savedChatId,
    chatIdToOpen,
    hasAutoOpenChat: !!chatIdToOpen,
    timestamp: new Date().toISOString()
  })

  return <ChatApp autoOpenChatId={chatIdToOpen || undefined} onResetChat={() => setChatToOpenAfterCall(null)} resetTrigger={resetChatTrigger} />
}

export default CallInterface
