'use client'

import { useEffect, useState, useRef } from 'react'
import useCallStore from '@/store/useCallStore'
import { createClient } from '@/utils/supabase/client'
import useWebRTC from '@/hooks/useWebRTC'
import { CallControls, IncomingCall, CallScreen, DialPad } from '.'
import { ChatApp } from '../Chat'
import { ChatList } from '../Chat'
import { ChatInterface } from '../Chat'
import { CreateChatModal } from '../Chat'
import { RandomFact } from '@/components/ui/random-fact'
import { sendCallEndedMessage, sendMissedCallMessage } from '@/utils/callSystemMessages'

interface Chat {
  id: string
  type: 'private' | 'group'
  name: string
  avatar_url?: string
  other_participant_id?: string
  other_participant_name?: string
  other_participant_avatar?: string
}

interface CallInterfaceProps {
  resetChatTrigger?: number
}

const CallInterface = ({ resetChatTrigger }: CallInterfaceProps = {}) => {
  const {
    userId,
    isInCall,
    isCalling,
    isReceivingCall,
    isCallActive,
    remoteStream,
    setIsReceivingCall,
    setIsCallActive,
    setError,
    endCall,
    targetUserId,
    callDurationSeconds,
    callerId,
    callerName
  } = useCallStore()

  // Initialize WebRTC
  useWebRTC()

  const supabase = createClient()

  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è —Ç–µ–ø–µ—Ä—å –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –≥–ª–æ–±–∞–ª—å–Ω–æ

  // –£–ë–†–ê–ù–û: –ë–æ–ª—å—à–µ –Ω–µ –æ—Ç–∫—Ä—ã–≤–∞–µ–º —á–∞—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ—Å–ª–µ –∑–≤–æ–Ω–∫–∞

  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —á–∞—Ç–∞ –∏–∑ localStorage
  const [savedChatId, setSavedChatId] = useState<string | null>(null)

  // –°–æ—Å—Ç–æ—è–Ω–∏–µ —á–∞—Ç–æ–≤ –¥–ª—è –¥–µ—Å–∫—Ç–æ–ø–Ω–æ–π –≤–µ—Ä—Å–∏–∏
  const [selectedChat, setSelectedChat] = useState<Chat | null>(null)
  const [showCreateModal, setShowCreateModal] = useState(false)
  const chatListRef = useRef<any>(null)

  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π –∑–≤–æ–Ω–∫–∞
  const prevCallStateRef = useRef({
    isInCall: false,
    isCallActive: false,
    isCalling: false,
    isReceivingCall: false,
    targetUserId: '',
    callerId: '',
    callerName: ''
  })

  // –£–ë–†–ê–ù–û: –§—É–Ω–∫—Ü–∏—è –ø–æ–∏—Å–∫–∞ —á–∞—Ç–∞ –±–æ–ª—å—à–µ –Ω–µ –Ω—É–∂–Ω–∞

  // –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–≥–æ —á–∞—Ç–∞ –∏–∑ localStorage –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
  // –£–ë–†–ê–ù–û: –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —á–∞—Ç–∞ –ø—Ä–∏ –≤—Ö–æ–¥–µ –≤ –∞–∫–∫–∞—É–Ω—Ç
  // –¢–µ–ø–µ—Ä—å —á–∞—Ç –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –∑–≤–æ–Ω–∫–∞ –∏–ª–∏ –ø—Ä–∏ —è–≤–Ω–æ–º –≤—ã–±–æ—Ä–µ

  // –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è –∑–≤–æ–Ω–∫–∞ –¥–ª—è —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
  useEffect(() => {
    const prev = prevCallStateRef.current
    const current = {
      isInCall,
      isCallActive,
      isCalling,
      isReceivingCall,
      targetUserId,
      callerId: callerId || '',
      callerName: callerName || ''
    }

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞–∫–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—á–∞—Å—Ç–≤—É–µ—Ç –≤ –∑–≤–æ–Ω–∫–µ
    const otherUserId = targetUserId || current.callerId
    const otherUserName = callerName || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'

    console.log('üìû Call state analysis:', {
      prev,
      current,
      otherUserId,
      otherUserName,
      callDurationSeconds
    })

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–ø—É—â–µ–Ω–Ω–æ–≥–æ –∑–≤–æ–Ω–∫–∞
    if (prev.isCalling && !current.isCalling && !current.isCallActive && !current.isInCall && prev.targetUserId) {
      console.log('üìû Missed call detected - caller hung up before answer')
      setTimeout(() => handleMissedCall(prev.targetUserId, '–í—ã'), 1000)
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –≤—Ö–æ–¥—è—â–µ–≥–æ –∑–≤–æ–Ω–∫–∞ (–∑–≤–æ–Ω—è—â–∏–π —Å–±—Ä–æ—Å–∏–ª)
    if (prev.isReceivingCall && !current.isReceivingCall && !current.isCallActive && !current.isInCall && prev.callerId) {
      console.log('üìû Incoming call cancelled - caller hung up before answer')
      setTimeout(() => handleMissedCall(prev.callerId, prev.callerName || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'), 1000)
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∑–≤–æ–Ω–∫–∞
    if (prev.isCallActive && !current.isCallActive && !current.isInCall && callDurationSeconds > 0) {
      console.log('üìû Active call ended with duration:', callDurationSeconds)
      if (otherUserId) {
        setTimeout(() => handleCallEnded(otherUserId, callDurationSeconds), 1000)
      }
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    prevCallStateRef.current = current
  }, [isInCall, isCallActive, isCalling, isReceivingCall, targetUserId, callerId, callerName, callDurationSeconds])

  // –í–†–ï–ú–ï–ù–ù–û –û–¢–ö–õ–Æ–ß–ò–õ–ò —Å–∏—Å—Ç–µ–º–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è - –æ–Ω–∏ –≤—ã–∑—ã–≤–∞—é—Ç 400 –æ—à–∏–±–∫–∏
  const handleMissedCall = async (userId: string, userName: string) => {
    console.log('üö® –°–ò–°–¢–ï–ú–ù–´–ï –°–û–û–ë–©–ï–ù–ò–Ø –û–¢–ö–õ–Æ–ß–ï–ù–´ - –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã–π –∑–≤–æ–Ω–æ–∫')
    // –°–∏—Å—Ç–µ–º–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω—ã –∏–∑-–∑–∞ –æ—à–∏–±–æ–∫ —Å –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º–∏ —Å—Ç–æ–ª–±—Ü–∞–º–∏
  }

  const handleCallEnded = async (userId: string, duration: number) => {
    console.log('üö® –°–ò–°–¢–ï–ú–ù–´–ï –°–û–û–ë–©–ï–ù–ò–Ø –û–¢–ö–õ–Æ–ß–ï–ù–´ - –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∑–≤–æ–Ω–∫–∞')
    // –°–∏—Å—Ç–µ–º–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω—ã –∏–∑-–∑–∞ –æ—à–∏–±–æ–∫ —Å –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º–∏ —Å—Ç–æ–ª–±—Ü–∞–º–∏
  }

  // –£–ë–†–ê–ù–ê –ù–ï–ü–†–ê–í–ò–õ–¨–ù–ê–Ø –õ–û–ì–ò–ö–ê: –ù–µ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∫ —á–∞—Ç—É –ø–æ—Å–ª–µ –∑–≤–æ–Ω–∫–∞!
  // –ö–∞–∫ –≤ Telegram/Discord - –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Å—Ç–∞–µ—Ç—Å—è —Ç–∞–º, –≥–¥–µ –±—ã–ª –¥–æ –∑–≤–æ–Ω–∫–∞

  // –£–ë–†–ê–ù–û: –õ–æ–∫–∞–ª—å–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∑–≤–æ–Ω–∫–∏ —Ç–µ–ø–µ—Ä—å –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –≥–ª–æ–±–∞–ª—å–Ω–æ
  // —á–µ—Ä–µ–∑ useGlobalCallManager –≤ page.tsx

  // –§—É–Ω–∫—Ü–∏–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —á–∞—Ç–∞–º–∏ –¥–ª—è –¥–µ—Å–∫—Ç–æ–ø–Ω–æ–π –≤–µ—Ä—Å–∏–∏
  const handleChatSelect = (chat: Chat) => {
    console.log('üíæ CALL INTERFACE - –í—ã–±—Ä–∞–Ω —á–∞—Ç:', {
      chatId: chat.id,
      chatName: chat.name
    })
    setSelectedChat(chat)
  }

  const handleBackToList = () => {
    console.log('üíæ CALL INTERFACE - –û—á–∏—â–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —á–∞—Ç')
    setSelectedChat(null)
  }

  const handleCreateNewChat = () => {
    setShowCreateModal(true)
  }

  const handleChatCreated = async (chatId: string) => {
    console.log('–ß–∞—Ç —Å–æ–∑–¥–∞–Ω:', chatId)
    setShowCreateModal(false)

    // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤
    if (chatListRef.current?.refreshChats) {
      await chatListRef.current.refreshChats()
    }

    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—ã–±–∏—Ä–∞–µ–º —Å–æ–∑–¥–∞–Ω–Ω—ã–π —á–∞—Ç
    setTimeout(async () => {
      if (chatListRef.current?.findAndSelectChat) {
        const chat = await chatListRef.current.findAndSelectChat(chatId)
        if (chat) {
          setSelectedChat(chat)
        }
      }
    }, 500)
  }

  useEffect(() => {
    console.log('üìû CallInterface mounted - call listening is handled globally by useGlobalCallManager')
  }, [userId])

  // –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —á–∞—Ç–∞ –∏–∑ localStorage
  useEffect(() => {
    const savedChatId = localStorage.getItem('selectedChatId')
    const savedChatName = localStorage.getItem('selectedChatName')

    if (savedChatId && chatListRef.current?.findAndSelectChat) {
      console.log('üîÑ CALL INTERFACE - –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —á–∞—Ç –∏–∑ localStorage:', savedChatId)

      chatListRef.current.findAndSelectChat(savedChatId)
        .then((chat: Chat | null) => {
          if (chat) {
            console.log('‚úÖ CALL INTERFACE - –ß–∞—Ç —É—Å–ø–µ—à–Ω–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω:', chat.name)
            setSelectedChat(chat)
          } else {
            console.log('‚ö†Ô∏è CALL INTERFACE - –°–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π —á–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω')
            localStorage.removeItem('selectedChatId')
            localStorage.removeItem('selectedChatName')
            localStorage.removeItem('selectedChatTimestamp')
          }
        })
        .catch((error: unknown) => {
          console.error('‚ùå CALL INTERFACE - –û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —á–∞—Ç–∞:', error)
          localStorage.removeItem('selectedChatId')
          localStorage.removeItem('selectedChatName')
          localStorage.removeItem('selectedChatTimestamp')
        })
    }
  }, [])

  // –ü–†–ê–í–ò–õ–¨–ù–û: ChatApp –≤—Å–µ–≥–¥–∞ –æ—Å—Ç–∞–µ—Ç—Å—è —Å–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–º
  // –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –∑–≤–æ–Ω–∫–∞ –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç—Å—è –ø–æ–≤–µ—Ä—Ö –∫–∞–∫ –º–æ–¥–∞–ª—å–Ω—ã–µ –æ–∫–Ω–∞
  
  console.log('üì± CALL INTERFACE - –†–µ–Ω–¥–µ—Ä —á–∞—Ç–∞:', {
    savedChatId,
    hasAutoOpenChat: !!savedChatId,
    isInCall,
    isCallActive,
    isReceivingCall,
    timestamp: new Date().toISOString()
  })

  return (
    <div className="h-full w-full">
      {/* –ú–æ–±–∏–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è - –º–æ–¥–∞–ª—å–Ω—ã–µ –æ–∫–Ω–∞ –∑–≤–æ–Ω–∫–æ–≤ */}
      <div className="md:hidden relative h-full w-full">
        {/* –û—Å–Ω–æ–≤–Ω–æ–π —á–∞—Ç */}
        <ChatApp
          autoOpenChatId={savedChatId || undefined}
          onResetChat={() => {}}
          resetTrigger={resetChatTrigger}
        />

        {/* –ú–æ–¥–∞–ª—å–Ω—ã–µ –æ–∫–Ω–∞ –∑–≤–æ–Ω–∫–æ–≤ –Ω–∞ –º–æ–±–∏–ª—å–Ω—ã—Ö */}
        {isReceivingCall && (
          <div className="absolute inset-0 z-50 bg-background">
            <IncomingCall />
          </div>
        )}

        {isInCall && isCallActive && (
          <div className="absolute inset-0 z-50 bg-background">
            <CallScreen />
          </div>
        )}
      </div>

      {/* –î–µ—Å–∫—Ç–æ–ø–Ω–∞—è –≤–µ—Ä—Å–∏—è - –∑–≤–æ–Ω–æ–∫ –≤–Ω—É—Ç—Ä–∏ –æ–±–ª–∞—Å—Ç–∏ —á–∞—Ç–∞ */}
      <div className="hidden md:flex h-full w-full overflow-hidden">
        {/* –õ–µ–≤–∞—è –ø–∞–Ω–µ–ª—å - —Å–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤ (–≤—Å–µ–≥–¥–∞ –≤–∏–¥–Ω–∞) */}
        <div className="w-80 bg-card border-r border-border flex-shrink-0 overflow-hidden">
          <ChatList
            ref={chatListRef}
            onChatSelect={handleChatSelect}
            onCreateNewChat={handleCreateNewChat}
            selectedChatId={selectedChat?.id}
          />
        </div>

        {/* –ü—Ä–∞–≤–∞—è –ø–∞–Ω–µ–ª—å - –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å —á–∞—Ç–∞ —Å –≤–æ–∑–º–æ–∂–Ω—ã–º –∑–≤–æ–Ω–∫–æ–º */}
        <div className="flex-1 bg-background overflow-hidden flex flex-col">
          {/* –í–µ—Ä—Ö–Ω—è—è –ø–æ–ª–æ–≤–∏–Ω–∞ - –∑–≤–æ–Ω–æ–∫ (—Ç–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã–π –∑–≤–æ–Ω–æ–∫, –≤—Ö–æ–¥—è—â–∏–π - –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ) */}
          {isInCall && isCallActive && (
            <div className="h-1/2 border-b border-border bg-background overflow-hidden">
              <CallScreen />
            </div>
          )}

          {/* –ù–∏–∂–Ω—è—è –ø–æ–ª–æ–≤–∏–Ω–∞ - –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å —á–∞—Ç–∞ */}
          <div className={`${isInCall && isCallActive ? 'h-1/2' : 'h-full'} overflow-hidden`}>
            {selectedChat ? (
              <ChatInterface
                chat={selectedChat}
                onBack={handleBackToList}
                isInCall={isReceivingCall || (isInCall && isCallActive)}
              />
            ) : (
              <div className="h-full flex items-center justify-center p-4 chat-pattern-bg">
                <div className="text-center max-w-md">
                  <div className="bg-card/80 backdrop-blur-sm rounded-lg p-6 border border-border/50 mb-4">
                    <svg className="w-12 h-12 mx-auto text-muted-foreground mb-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M8 12h.01M12 12h.01M16 12h.01M21 12c0 4.418-4.03 8-9 8a9.863 9.863 0 01-4.255-.949L3 20l1.395-3.72C3.512 15.042 3 13.574 3 12c0-4.418 4.03-8 9-8s9 3.582 9 8z" />
                    </svg>
                    <h3 className="text-lg font-medium text-foreground mb-2">–í—ã–±–µ—Ä–∏—Ç–µ —á–∞—Ç</h3>
                    <p className="text-muted-foreground text-sm">–í—ã–±–µ—Ä–∏—Ç–µ —á–∞—Ç –∏–∑ —Å–ø–∏—Å–∫–∞ –∏–ª–∏ —Å–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π</p>
                  </div>
                  <RandomFact />
                </div>
              </div>
            )}
          </div>
        </div>
      </div>

      {/* –ü–æ–ª–Ω–æ—ç–∫—Ä–∞–Ω–Ω–æ–µ –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –≤—Ö–æ–¥—è—â–µ–≥–æ –∑–≤–æ–Ω–∫–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è –¥–µ—Å–∫—Ç–æ–ø–∞) */}
      {isReceivingCall && (
        <div className="hidden md:block fixed inset-0 z-50 bg-background">
          <IncomingCall />
        </div>
      )}

      {/* –ú–æ–¥–∞–ª —Å–æ–∑–¥–∞–Ω–∏—è —á–∞—Ç–∞ */}
      <CreateChatModal
        isOpen={showCreateModal}
        onClose={() => setShowCreateModal(false)}
        onChatCreated={handleChatCreated}
      />
    </div>
  )
}

export default CallInterface
