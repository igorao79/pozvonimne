'use client'

import { create } from 'zustand'

// –ü—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤ –∫–∞–∫ –∫–æ–Ω—Å—Ç–∞–Ω—Ç–∞ –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏
const EMPTY_ARRAY: string[] = []

interface TypingState {
  // –•—Ä–∞–Ω–∏–º –º–∞—Å—Å–∏–≤—ã –Ω–∞–ø—Ä—è–º—É—é –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω—ã—Ö —Å—Å—ã–ª–æ–∫
  typingByChat: Record<string, string[]>
  // –ü—Ä–æ—Å—Ç–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: –ø–µ—á–∞—Ç–∞–µ—Ç –ª–∏ —Ç–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
  isUserTyping: Record<string, boolean>
  
  // –î–µ–π—Å—Ç–≤–∏—è
  startTyping: (chatId: string, userId: string) => void
  stopTyping: (chatId: string, userId: string) => void
  clearAll: () => void
}

const useTypingStore = create<TypingState>((set) => ({
  typingByChat: {},
  isUserTyping: {},

  startTyping: (chatId: string, userId: string) => {
    console.log(`üéØ [TypingStore] startTyping –≤—ã–∑–≤–∞–Ω:`, { chatId, userId })
    set((state) => {
      const currentUsers = state.typingByChat[chatId] || []
      console.log(`üéØ [TypingStore] –¢–µ–∫—É—â–∏–µ typing –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –≤ —á–∞—Ç–µ ${chatId}:`, currentUsers)
      
      // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –ø–µ—á–∞—Ç–∞–µ—Ç, –Ω–µ –∏–∑–º–µ–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
      if (currentUsers.includes(userId)) {
        console.log(`üéØ [TypingStore] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId} —É–∂–µ –ø–µ—á–∞—Ç–∞–µ—Ç, –Ω–µ –∏–∑–º–µ–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ`)
        return state
      }
      
      // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –º–∞—Å—Å–∏–≤ —Å –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
      const newUsers = [...currentUsers, userId]
      console.log(`üéØ [TypingStore] –ù–æ–≤—ã–π —Å–ø–∏—Å–æ–∫ typing –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:`, newUsers)
      
      const newState = {
        ...state,
        typingByChat: {
          ...state.typingByChat,
          [chatId]: newUsers
        },
        isUserTyping: {
          ...state.isUserTyping,
          [chatId]: true
        }
      }
      
      console.log(`üéØ [TypingStore] –ù–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ typingByChat:`, newState.typingByChat)
      return newState
    })
  },

  stopTyping: (chatId: string, userId: string) => {
    console.log(`üéØ [TypingStore] stopTyping –≤—ã–∑–≤–∞–Ω:`, { chatId, userId })
    set((state) => {
      const currentUsers = state.typingByChat[chatId] || []
      console.log(`üéØ [TypingStore] –¢–µ–∫—É—â–∏–µ typing –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –≤ —á–∞—Ç–µ ${chatId}:`, currentUsers)
      
      // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –ø–µ—á–∞—Ç–∞–µ—Ç, –Ω–µ –∏–∑–º–µ–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
      if (!currentUsers.includes(userId)) {
        console.log(`üéØ [TypingStore] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId} –Ω–µ –ø–µ—á–∞—Ç–∞–µ—Ç, –Ω–µ –∏–∑–º–µ–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ`)
        return state
      }
      
      // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –º–∞—Å—Å–∏–≤ –±–µ–∑ —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const newUsers = currentUsers.filter(id => id !== userId)
      const newTypingByChat = { ...state.typingByChat }
      
      if (newUsers.length === 0) {
        // –£–¥–∞–ª—è–µ–º —á–∞—Ç –∏–∑ –æ–±—ä–µ–∫—Ç–∞, –µ—Å–ª–∏ –±–æ–ª—å—à–µ –Ω–∏–∫—Ç–æ –Ω–µ –ø–µ—á–∞—Ç–∞–µ—Ç
        console.log(`üéØ [TypingStore] –ù–∏–∫—Ç–æ –±–æ–ª—å—à–µ –Ω–µ –ø–µ—á–∞—Ç–∞–µ—Ç, —É–¥–∞–ª—è–µ–º —á–∞—Ç ${chatId}`)
        delete newTypingByChat[chatId]
      } else {
        console.log(`üéØ [TypingStore] –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –¥–ª—è —á–∞—Ç–∞ ${chatId}:`, newUsers)
        newTypingByChat[chatId] = newUsers
      }
      
      const newState = {
        ...state,
        typingByChat: newTypingByChat,
        isUserTyping: {
          ...state.isUserTyping,
          [chatId]: false
        }
      }
      
      console.log(`üéØ [TypingStore] –ù–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Å–ª–µ stopTyping:`, newState.typingByChat)
      return newState
    })
  },

  clearAll: () => {
    set({
      typingByChat: {},
      isUserTyping: {}
    })
  }
}))

export default useTypingStore