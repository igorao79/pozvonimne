import { useEffect } from 'react'
import useSupabaseStore from '@/store/useSupabaseStore'

interface UseChatRealtimeProps {
  chatId: string
  userId?: string
  otherParticipantId?: string
  onNewMessage: (payload: any) => void
  loadMessages: () => Promise<void>
}

export const useChatRealtime = ({
  chatId,
  userId,
  otherParticipantId,
  onNewMessage,
  loadMessages
}: UseChatRealtimeProps) => {
  const { supabase } = useSupabaseStore()

  // –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
  useEffect(() => {
    if (!otherParticipantId) return

    console.log('üì° –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º realtime –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —á–∞—Ç–µ')

    // –£–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è –∫–∞–Ω–∞–ª–∞
    const channelName = `chat_user_status_${chatId.substring(0, 8)}`

    // –û—á–∏—â–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∫–∞–Ω–∞–ª—ã –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    const existingChannels = supabase.getChannels().filter(ch => ch.topic.includes('user_status'))
    existingChannels.forEach(ch => supabase.removeChannel(ch))

    const userChannel = supabase
      .channel(channelName)
      .on(
        'postgres_changes',
        {
          event: 'UPDATE',
          schema: 'public',
          table: 'user_profiles',
          filter: `id=eq.${otherParticipantId}` // –§–∏–ª—å—Ç—Ä —Ç–æ–ª—å–∫–æ –¥–ª—è —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞
        },
        (payload) => {
          console.log('üë§ –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞:', payload)
          // –û–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –±—É–¥—É—Ç –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å—Å—è —á–µ—Ä–µ–∑ useUsers —Ö—É–∫
        }
      )
      .subscribe((status) => {
        console.log('üì° –°—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', status)
      })

    return () => {
      console.log('üîå –û—Ç–ø–∏—Å—ã–≤–∞–µ–º—Å—è –æ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π')
      supabase.removeChannel(userChannel)
    }
  }, [otherParticipantId, chatId, supabase])

  // –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –Ω–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
  useEffect(() => {
    if (!chatId || !userId) return

    console.log('üì° –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —á–∞—Ç–∞:', chatId)

    let isPollingMode = false
    let pollInterval: NodeJS.Timeout

    const setupMessageSubscription = () => {
      if (isPollingMode) return

      // –°–æ–∑–¥–∞–µ–º —Å—Ç–∞–±–∏–ª—å–Ω–æ–µ –∏–º—è –∫–∞–Ω–∞–ª–∞
      const channelName = `chat_${chatId}_messages`

      // –û—á–∏—â–∞–µ–º –≤—Å–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∫–∞–Ω–∞–ª—ã –¥–ª—è —ç—Ç–æ–≥–æ —á–∞—Ç–∞
      const existingChannels = supabase.getChannels().filter(ch => ch.topic.includes(chatId))
      existingChannels.forEach(ch => supabase.removeChannel(ch))

      console.log('üì° –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –∫–∞–Ω–∞–ª –¥–ª—è —á–∞—Ç–∞:', chatId)

      // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –∫–∞–Ω–∞–ª —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π
      const messagesChannel = supabase
        .channel(channelName)
        .on('postgres_changes',
          {
            event: 'INSERT', // –¢–æ–ª—å–∫–æ INSERT –¥–ª—è –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
            schema: 'public',
            table: 'messages',
            filter: `chat_id=eq.${chatId}` // –§–∏–ª—å—Ç—Ä –ø–æ chat_id
          },
          (payload: any) => {
            console.log('üì° –ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç–µ:', payload)
            onNewMessage(payload.new)
          }
        )
        .subscribe((status, err) => {
          console.log('üì° –°—Ç–∞—Ç—É—Å –∫–∞–Ω–∞–ª–∞ —Å–æ–æ–±—â–µ–Ω–∏–π:', status, err ? `–û—à–∏–±–∫–∞: ${err}` : '')

          if (status === 'SUBSCRIBED') {
            console.log('üì° –£—Å–ø–µ—à–Ω–æ –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —á–∞—Ç–∞:', chatId)
            isPollingMode = false
          } else if (status === 'CHANNEL_ERROR') {
            console.error('üì° –û—à–∏–±–∫–∞ –∫–∞–Ω–∞–ª–∞ —Å–æ–æ–±—â–µ–Ω–∏–π:', err)

            console.log('üö® CRITICAL REALTIME ERROR - –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ polling')

            supabase.removeChannel(messagesChannel)
            isPollingMode = true

            // –í–∫–ª—é—á–∞–µ–º —Ä–µ–∂–∏–º polling
            pollInterval = setInterval(async () => {
              try {
                await loadMessages()
                console.log('üìä POLLING MODE - –°–æ–æ–±—â–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω—ã')
              } catch (error) {
                console.error('üìä POLLING ERROR:', error)
              }
            }, 3000)

            console.log('üìä SWITCHED TO POLLING MODE')
          } else if (status === 'TIMED_OUT') {
            console.warn('üì° –¢–∞–π–º–∞—É—Ç –∫–∞–Ω–∞–ª–∞ —Å–æ–æ–±—â–µ–Ω–∏–π, –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ...')
            setTimeout(setupMessageSubscription, 2000)
          } else if (status === 'CLOSED') {
            console.log('üì° –ö–∞–Ω–∞–ª —Å–æ–æ–±—â–µ–Ω–∏–π –∑–∞–∫—Ä—ã—Ç')
          }
        })

      return messagesChannel
    }

    const channel = setupMessageSubscription()

    return () => {
      console.log('üì° –ö–æ–º–ø–æ–Ω–µ–Ω—Ç —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω, –∑–∞–∫—Ä—ã–≤–∞–µ–º –∫–∞–Ω–∞–ª —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —á–∞—Ç–∞:', chatId)

      if (channel) {
        supabase.removeChannel(channel)
      }

      if (pollInterval) {
        clearInterval(pollInterval)
        console.log('üìä POLLING CLEARED - –û—á–∏—Å—Ç–∏–ª–∏ polling –∏–Ω—Ç–µ—Ä–≤–∞–ª')
      }
    }
  }, [chatId, userId, onNewMessage, loadMessages, supabase])
}
