import SimplePeer from 'simple-peer'
import type { PeerRefs } from './types'
import useCallStore from '@/store/useCallStore'
import { resilientChannelManager } from '@/utils/resilientChannelManager'

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ø—ã—Ç–∫–∏ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
export const attemptReconnection = (
  peerRefs: PeerRefs,
  userId: string | null,
  isInCall: boolean,
  targetUserId: string | null,
  initializePeer: (isInitiator: boolean) => Promise<void>
) => {
  const { reconnectTimeoutRef, reconnectAttemptsRef } = peerRefs

  if (reconnectTimeoutRef.current || !isInCall || !targetUserId) {
    return
  }

  const maxRetries = 3
  const currentAttempt = reconnectAttemptsRef.current + 1

  if (currentAttempt > maxRetries) {
    console.error(`üîÑ [User ${userId?.slice(0, 8)}] Max reconnection attempts reached, ending call`)
    const { setError, endCall } = useCallStore.getState()
    
    // –ü–æ–ª–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö —Ä–µ—Å—É—Ä—Å–æ–≤ –ø–µ—Ä–µ–¥ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ–º –∑–≤–æ–Ω–∫–∞
    cleanupAllPeerResources(peerRefs, userId)
    
    setError('–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –ø–æ—Ç–µ—Ä—è–Ω–æ –∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ')
    endCall()
    return
  }

  console.log(`üîÑ [User ${userId?.slice(0, 8)}] Attempting reconnection ${currentAttempt}/${maxRetries}`)
  reconnectAttemptsRef.current = currentAttempt

  // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∑–∞–¥–µ—Ä–∂–∫–∏ –¥–ª—è —É–º–µ–Ω—å—à–µ–Ω–∏—è –Ω–∞–≥—Ä—É–∑–∫–∏ –Ω–∞ —Å–µ—Ç—å
  const delay = Math.min(1000 * Math.pow(1.5, currentAttempt - 1), 5000) // –≠–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞
  
  reconnectTimeoutRef.current = setTimeout(() => {
    reconnectTimeoutRef.current = null

    if (isInCall && targetUserId) {
      console.log(`üîÑ [User ${userId?.slice(0, 8)}] Reinitializing peer connection`)

      // –ü–æ–ª–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä–æ–≥–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
      cleanupAllPeerResources(peerRefs, userId)

      // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
      const wasInitiator = useCallStore.getState().isCalling
      initializePeer(wasInitiator)
    }
  }, delay)
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–±—Ä–æ—Å–∞ —Å—á–µ—Ç—á–∏–∫–∞ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π
export const resetReconnectionCounter = (peerRefs: PeerRefs) => {
  const { reconnectAttemptsRef, reconnectTimeoutRef } = peerRefs

  reconnectAttemptsRef.current = 0
  if (reconnectTimeoutRef.current) {
    clearTimeout(reconnectTimeoutRef.current)
    reconnectTimeoutRef.current = null
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫ peer —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
export const handlePeerError = (
  err: Error,
  peerRefs: PeerRefs,
  userId: string | null,
  targetUserId: string | null,
  isInCall: boolean,
  initializePeer: (isInitiator: boolean) => Promise<void>
) => {
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –æ–∂–∏–¥–∞–µ–º–æ–π –æ—à–∏–±–∫–æ–π –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏
  const isExpectedCloseError = err instanceof Error && (
    err.message.includes('InvalidStateError') ||
    err.message.includes('wrong state') ||
    err.message.includes('already have a remote') ||
    err.message.includes('User-Initiated Abort') ||
    err.message.includes('OperationError: User-Initiated Abort') ||
    err.message.includes('Close called') ||
    err.message.includes('connection closed') ||
    err.message.includes('DataChannel closing') ||
    err.message.includes('RTCPeerConnection closed')
  )

  if (isExpectedCloseError) {
    // –¢–∏—Ö–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ–∂–∏–¥–∞–µ–º—ã—Ö –æ—à–∏–±–æ–∫ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏
    console.log(`üìû [User ${userId?.slice(0, 8)}] Expected peer close:`, err.message)
    return
  }

  // –õ–æ–≥–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–µ –æ—à–∏–±–∫–∏
  console.error(`üìû [User ${userId?.slice(0, 8)}] Unexpected peer error:`, err)

  const { setError, endCall } = useCallStore.getState()
  setError('–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: ' + err.message)
  endCall()
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª–Ω–æ–π –æ—á–∏—Å—Ç–∫–∏ –≤—Å–µ—Ö peer-—Ä–µ—Å—É—Ä—Å–æ–≤
export const cleanupAllPeerResources = (peerRefs: PeerRefs, userId: string | null) => {
  console.log(`üßπ [User ${userId?.slice(0, 8)}] Starting comprehensive cleanup`)
  
  // –û—á–∏—â–∞–µ–º –≤—Å–µ —Ç–∞–π–º–∞—É—Ç—ã –∏ –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã
  if (peerRefs.reconnectTimeoutRef.current) {
    clearTimeout(peerRefs.reconnectTimeoutRef.current)
    peerRefs.reconnectTimeoutRef.current = null
  }
  
  if (peerRefs.keepAliveIntervalRef.current) {
    clearInterval(peerRefs.keepAliveIntervalRef.current)
    peerRefs.keepAliveIntervalRef.current = null
  }
  
  if (peerRefs.connectionCheckIntervalRef.current) {
    clearInterval(peerRefs.connectionCheckIntervalRef.current)
    peerRefs.connectionCheckIntervalRef.current = null
  }
  
  // –û—á–∏—â–∞–µ–º –±—É—Ñ–µ—Ä—ã
  peerRefs.signalBufferRef.current = []
  peerRefs.lastKeepAliveRef.current = 0
  peerRefs.reconnectAttemptsRef.current = 0
  
  // –û—á–∏—â–∞–µ–º WebRTC –∫–∞–Ω–∞–ª—ã —á–µ—Ä–µ–∑ resilientChannelManager
  if (userId) {
    try {
      resilientChannelManager.removeChannel(`webrtc:${userId}`)
      console.log(`üßπ [User ${userId?.slice(0, 8)}] Cleaned up WebRTC channel`)
    } catch (err) {
      console.warn(`üßπ [User ${userId?.slice(0, 8)}] Error cleaning WebRTC channel:`, err)
    }
  }
  
  // –£–Ω–∏—á—Ç–æ–∂–∞–µ–º peer connection —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏
  if (peerRefs.peerRef.current) {
    try {
      if (!peerRefs.peerRef.current.destroyed) {
        // –£–¥–∞–ª—è–µ–º –≤—Å–µ event listeners –ø–µ—Ä–µ–¥ —É–Ω–∏—á—Ç–æ–∂–µ–Ω–∏–µ–º
        peerRefs.peerRef.current.removeAllListeners()
        peerRefs.peerRef.current.destroy()
      }
    } catch (err) {
      // –¢–∏—Ö–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ–∂–∏–¥–∞–µ–º—ã–µ –æ—à–∏–±–∫–∏ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏
      if (err instanceof Error && (
        err.message.includes('User-Initiated Abort') ||
        err.message.includes('Close called') ||
        err.message.includes('already destroyed')
      )) {
        console.log(`üßπ [User ${userId?.slice(0, 8)}] Expected error during peer cleanup:`, err.message)
      } else {
        console.warn(`üßπ [User ${userId?.slice(0, 8)}] Unexpected error during peer cleanup:`, err)
      }
    } finally {
      peerRefs.peerRef.current = null
    }
  }
  
  console.log(`üßπ [User ${userId?.slice(0, 8)}] Comprehensive cleanup completed`)
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–∫—Ä—ã—Ç–∏—è peer —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
export const handlePeerClose = (
  peerRefs: PeerRefs,
  userId: string | null,
  stopKeepAlive: (peerRefs: PeerRefs, userId: string | null) => void,
  stopConnectionMonitoring: (peerRefs: PeerRefs, userId: string | null) => void
) => {
  console.log('Peer connection closed')

  // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º keep-alive –∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
  stopKeepAlive(peerRefs, userId)
  stopConnectionMonitoring(peerRefs, userId)

  // –ù–µ –≤—ã–∑—ã–≤–∞–µ–º endCall() –∑–¥–µ—Å—å, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å —Ä–µ–∫—É—Ä—Å–∏–∏
  // endCall() –±—É–¥–µ—Ç –≤—ã–∑–≤–∞–Ω —á–µ—Ä–µ–∑ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏—è –≤ CallInterface
}
