import { createClient } from '@/utils/supabase/client'

// –ú–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è Supabase –∫–∞–Ω–∞–ª–∞–º–∏ —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ—á–∏—Å—Ç–∫–æ–π
class ChannelManager {
  private static instance: ChannelManager
  private activeChannels: Map<string, any> = new Map()
  private channelCleanupTimeouts: Map<string, NodeJS.Timeout> = new Map()
  private supabase = createClient()

  private constructor() {}

  static getInstance(): ChannelManager {
    if (!ChannelManager.instance) {
      ChannelManager.instance = new ChannelManager()
    }
    return ChannelManager.instance
  }

  // –°–æ–∑–¥–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞ —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ—á–∏—Å—Ç–∫–æ–π
  createManagedChannel(channelName: string, options: { 
    autoCleanup?: boolean
    cleanupDelayMs?: number
    userId?: string
  } = {}) {
    const { autoCleanup = true, cleanupDelayMs = 300000, userId } = options // 5 –º–∏–Ω—É—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    
    // –£–¥–∞–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫–∞–Ω–∞–ª –µ—Å–ª–∏ –µ—Å—Ç—å
    this.removeChannel(channelName)

    console.log(`üì∫ [User ${userId?.slice(0, 8)}] Creating managed channel: ${channelName}`)

    const channel = this.supabase.channel(channelName)
    this.activeChannels.set(channelName, channel)

    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—á–∏—Å—Ç–∫–∞
    if (autoCleanup) {
      const timeoutId = setTimeout(() => {
        console.log(`üì∫ [User ${userId?.slice(0, 8)}] Auto-cleaning channel: ${channelName}`)
        this.removeChannel(channelName)
      }, cleanupDelayMs)
      
      this.channelCleanupTimeouts.set(channelName, timeoutId)
    }

    return channel
  }

  // –£–¥–∞–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞ —Å –æ—á–∏—Å—Ç–∫–æ–π —Ç–∞–π–º–∞—É—Ç–∞
  removeChannel(channelName: string): void {
    const channel = this.activeChannels.get(channelName)
    if (channel) {
      try {
        this.supabase.removeChannel(channel)
        this.activeChannels.delete(channelName)
        console.log(`üì∫ Channel removed: ${channelName}`)
      } catch (err) {
        console.warn('Error removing channel:', err)
      }
    }

    // –û—á–∏—â–∞–µ–º —Ç–∞–π–º–∞—É—Ç
    const timeoutId = this.channelCleanupTimeouts.get(channelName)
    if (timeoutId) {
      clearTimeout(timeoutId)
      this.channelCleanupTimeouts.delete(channelName)
    }
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞
  getChannel(channelName: string) {
    return this.activeChannels.get(channelName)
  }

  // –ü—Ä–æ–¥–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –∂–∏–∑–Ω–∏ –∫–∞–Ω–∞–ª–∞
  extendChannelLifetime(channelName: string, additionalMs: number = 300000) {
    const timeoutId = this.channelCleanupTimeouts.get(channelName)
    if (timeoutId) {
      clearTimeout(timeoutId)
      
      const newTimeoutId = setTimeout(() => {
        this.removeChannel(channelName)
      }, additionalMs)
      
      this.channelCleanupTimeouts.set(channelName, newTimeoutId)
    }
  }

  // –û—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö –∫–∞–Ω–∞–ª–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  cleanupUserChannels(userId: string): void {
    console.log(`üì∫ [User ${userId?.slice(0, 8)}] Cleaning up all user channels`)
    
    for (const [channelName] of this.activeChannels) {
      if (channelName.includes(userId)) {
        this.removeChannel(channelName)
      }
    }
  }

  // –ü–æ–ª–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö –∫–∞–Ω–∞–ª–æ–≤ (–¥–ª—è —ç–∫—Å—Ç—Ä–µ–Ω–Ω—ã—Ö —Å–ª—É—á–∞–µ–≤)
  cleanupAllChannels(): void {
    console.log('üì∫ Emergency cleanup: removing all channels')
    
    // –û—á–∏—â–∞–µ–º –≤—Å–µ —Ç–∞–π–º–∞—É—Ç—ã
    for (const timeoutId of this.channelCleanupTimeouts.values()) {
      clearTimeout(timeoutId)
    }
    this.channelCleanupTimeouts.clear()

    // –£–¥–∞–ª—è–µ–º –≤—Å–µ –∫–∞–Ω–∞–ª—ã
    for (const channel of this.activeChannels.values()) {
      try {
        this.supabase.removeChannel(channel)
      } catch (err) {
        console.warn('Error during emergency channel cleanup:', err)
      }
    }
    this.activeChannels.clear()
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫–∞–Ω–∞–ª–æ–≤
  getChannelStats() {
    return {
      activeChannels: this.activeChannels.size,
      scheduledCleanups: this.channelCleanupTimeouts.size,
      channels: Array.from(this.activeChannels.keys())
    }
  }
}

export const channelManager = ChannelManager.getInstance()

// –•—É–∫ –æ—á–∏—Å—Ç–∫–∏ –∫–∞–Ω–∞–ª–æ–≤ –ø—Ä–∏ —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
if (typeof window !== 'undefined') {
  window.addEventListener('beforeunload', () => {
    channelManager.cleanupAllChannels()
  })
}
