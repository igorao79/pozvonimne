'use client'

import { useEffect, useRef } from 'react'
import SimplePeer from 'simple-peer'
import useCallStore from '@/store/useCallStore'
import { createClient } from '@/utils/supabase/client'
import type { WebRTCHooks, PeerRefs } from './types'
import { processBufferedSignals, handleIncomingSignal } from './signalHandlers'
import { startKeepAlive, stopKeepAlive } from './keepAlive'
import { startConnectionMonitoring, stopConnectionMonitoring } from './connectionMonitor'
import { attemptReconnection, resetReconnectionCounter } from './reconnection'
import { initializePeer } from './peerInitialization'

const useWebRTC = (): WebRTCHooks => {
  const peerRef = useRef<SimplePeer.Instance | null>(null)
  const signalBufferRef = useRef<Array<{signal: any, from: string}>>([])
  const keepAliveIntervalRef = useRef<NodeJS.Timeout | null>(null)
  const connectionCheckIntervalRef = useRef<NodeJS.Timeout | null>(null)
  const reconnectTimeoutRef = useRef<NodeJS.Timeout | null>(null)
  const lastKeepAliveRef = useRef<number>(0)
  const reconnectAttemptsRef = useRef<number>(0)
  
  // –î–æ–±–∞–≤–ª—è–µ–º –¥–µ–±–∞—É–Ω—Å–∏–Ω–≥ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–π
  const peerInitTimeoutRef = useRef<NodeJS.Timeout | null>(null)
  const isInitializingRef = useRef<boolean>(false) // –§–ª–∞–≥ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è race conditions
  const supabase = createClient()

  const peerRefs: PeerRefs = {
    peerRef,
    signalBufferRef,
    keepAliveIntervalRef,
    connectionCheckIntervalRef,
    reconnectTimeoutRef,
    lastKeepAliveRef,
    reconnectAttemptsRef
  }

  const {
    userId,
    targetUserId,
    isInCall,
    isCalling,
    isCallActive,
    isReceivingCall,
    callerId,
    setLocalStream,
    setRemoteStream,
    setPeer,
    setIsCallActive,
    setError,
    endCall,
    setTargetUserId
  } = useCallStore()

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –±—É—Ñ–µ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤ —Å –ø—Ä–∏–≤—è–∑–∫–æ–π –∫ —Ç–µ–∫—É—â–µ–º—É –∫–æ–Ω—Ç–µ–∫—Å—Ç—É
  const processSignals = () => processBufferedSignals(peerRefs, userId)

  // –î–µ–±–∞—É–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ peer
  const debouncedInitPeer = (isInitiator: boolean, delay = 100) => {
    // –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π —Ç–∞–π–º–∞—É—Ç –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–π
    if (peerInitTimeoutRef.current) {
      clearTimeout(peerInitTimeoutRef.current)
    }
    
    peerInitTimeoutRef.current = setTimeout(async () => {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ peer –≤—Å–µ –µ—â–µ –Ω—É–∂–µ–Ω –∏ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç—Å—è —É–∂–µ
      if (peerRef.current || !isInCall || isInitializingRef.current) return
      
      isInitializingRef.current = true
      console.log(`üéØ [User ${userId?.slice(0, 8)}] Debounced peer initialization (${isInitiator ? 'caller' : 'receiver'})`)
      
      try {
        await initializePeer(isInitiator, peerRefs, userId, targetUserId, isCallActive, processSignals)
      } finally {
        isInitializingRef.current = false
        peerInitTimeoutRef.current = null
      }
    }, delay)
  }

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ peer —Å –ø—Ä–∏–≤—è–∑–∫–æ–π –∫ —Ç–µ–∫—É—â–µ–º—É –∫–æ–Ω—Ç–µ–∫—Å—Ç—É
  const initPeer = (isInitiator: boolean) => initializePeer(
    isInitiator,
    peerRefs,
    userId,
    targetUserId,
    isCallActive,
    processSignals
  )

  // –õ–æ–≥–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏ –∫–∞–∂–¥–æ–º —Ä–µ–Ω–¥–µ—Ä–µ
  console.log(`üéØ [User ${userId?.slice(0, 8)}] useWebRTC render with state:`, {
    isInCall,
    isCalling,
    isCallActive,
    isReceivingCall,
    hasPeer: !!peerRef.current,
    targetUserId: targetUserId?.slice(0, 8),
    callerId: callerId?.slice(0, 8)
  })

  // Listen for WebRTC signals
  useEffect(() => {
    if (!userId) return

    console.log('Setting up WebRTC signal listener for user:', userId)

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏/–æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    const handleBeforeUnload = () => {
      if (peerRef.current && !peerRef.current.destroyed) {
        try {
          peerRef.current.destroy()
        } catch (err) {
          console.warn('Error destroying peer on page unload:', err)
        }
      }
    }

    window.addEventListener('beforeunload', handleBeforeUnload)

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤–∏–¥–∏–º–æ—Å—Ç–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    const handleVisibilityChange = () => {
      const isHidden = document.hidden
      console.log('Page visibility changed:', { hidden: isHidden, visibilityState: document.visibilityState })

      if (isHidden) {
        console.log('Page hidden during call - maintaining connection')
        // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –ª–æ–≥–∏–∫—É –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
      } else {
        console.log('Page visible again')
        // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –ª–æ–≥–∏–∫—É –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
      }
    }

    document.addEventListener('visibilitychange', handleVisibilityChange)

    const webrtcChannel = supabase
      .channel(`webrtc:${userId}`)
      .on('broadcast', { event: 'webrtc_signal' }, (payload) => {
        handleIncomingSignal(payload, peerRefs, userId, targetUserId)
      })
      .subscribe()

    return () => {
      console.log('Cleaning up WebRTC signal listener')
      // –û—á–∏—â–∞–µ–º –±—É—Ñ–µ—Ä —Å–∏–≥–Ω–∞–ª–æ–≤ –ø—Ä–∏ —Å–º–µ–Ω–µ targetUserId –∏–ª–∏ —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
      if (signalBufferRef.current.length > 0) {
        console.log(`üóëÔ∏è [User ${userId?.slice(0, 8)}] Clearing signal buffer (${signalBufferRef.current.length} signals)`)
        signalBufferRef.current = []
      }
      supabase.removeChannel(webrtcChannel)
      window.removeEventListener('beforeunload', handleBeforeUnload)
      document.removeEventListener('visibilitychange', handleVisibilityChange)
    }
  }, [userId, targetUserId, supabase])

  // Initialize peer when starting a call (—Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –ø—Ä–∏–Ω—è—Ç–∏—è –∑–≤–æ–Ω–∫–∞)
  useEffect(() => {
    console.log(`üîç [User ${userId?.slice(0, 8)}] Caller peer initialization check:`, {
      isInCall,
      isCalling,
      isCallActive,
      hasPeer: !!peerRef.current,
      originalCondition: isInCall && isCalling && !peerRef.current,
      newCondition: isInCall && isCalling && isCallActive && !peerRef.current,
      targetUserId: targetUserId?.slice(0, 8)
    })

    // Caller –¥–æ–ª–∂–µ–Ω –∂–¥–∞—Ç—å –ø—Ä–∏–Ω—è—Ç–∏—è –∑–≤–æ–Ω–∫–∞ (isCallActive = true)
    if (isInCall && isCalling && isCallActive && !peerRef.current) {
      console.log(`‚úÖ [User ${userId?.slice(0, 8)}] Initializing peer as caller (call accepted)`)
      initPeer(true) // Caller is initiator
    } else if (isInCall && isCalling && !isCallActive) {
      console.log(`‚è≥ [User ${userId?.slice(0, 8)}] Caller waiting for call acceptance...`)
    }
  }, [isInCall, isCalling, isCallActive])

  // Initialize peer when receiving call
  useEffect(() => {
    console.log(`üîç [User ${userId?.slice(0, 8)}] Receiver peer initialization check:`, {
      isInCall,
      isCallActive,
      isCalling,
      isReceivingCall,
      hasPeer: !!peerRef.current,
      callerId: callerId?.slice(0, 8),
      targetUserId: targetUserId?.slice(0, 8),
      conditions: {
        original: isInCall && isCallActive && !isCalling && !peerRef.current,
        simplified: isInCall && !isCalling && !peerRef.current,
        new: isReceivingCall && !peerRef.current
      }
    })

    // –ù–æ–≤–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è: –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º peer —Å—Ä–∞–∑—É –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≤—Ö–æ–¥—è—â–µ–≥–æ –∑–≤–æ–Ω–∫–∞
    if (isReceivingCall && !peerRef.current && callerId) {
      console.log(`‚úÖ [User ${userId?.slice(0, 8)}] Initializing peer as receiver (on incoming call)`)
      console.log(`üéØ [User ${userId?.slice(0, 8)}] Setting targetUserId to ${callerId.slice(0, 8)} before peer init`)

      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º targetUserId –∫–∞–∫ callerId –°–ù–ê–ß–ê–õ–ê
      setTargetUserId(callerId)

      // –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–µ–±–∞—É–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω—É—é –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é
      console.log(`üéØ [User ${userId?.slice(0, 8)}] Scheduling debounced peer initialization as receiver`)
      debouncedInitPeer(false) // Receiver is not initiator —Å –¥–µ–±–∞—É–Ω—Å–∏–Ω–≥–æ–º
    }
    // –û–°–ù–û–í–ù–û–ô Fallback: –µ—Å–ª–∏ –≤ –∑–≤–æ–Ω–∫–µ, –ù–ï caller, –∏ –Ω–µ—Ç peer - —ç—Ç–æ receiver!
    else if (isInCall && !isCalling && isCallActive && !peerRef.current && targetUserId) {
      console.log(`‚úÖ [User ${userId?.slice(0, 8)}] Initializing peer as receiver (main fallback - call active)`)
      debouncedInitPeer(false) // Receiver is not initiator —Å –¥–µ–±–∞—É–Ω—Å–∏–Ω–≥–æ–º
    }
    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π fallback: –ø—Ä–æ—Å—Ç–æ –≤ –∑–≤–æ–Ω–∫–µ –∏ –Ω–µ caller
    else if (isInCall && !isCalling && !peerRef.current) {
      console.log(`‚úÖ [User ${userId?.slice(0, 8)}] Initializing peer as receiver (simple fallback)`)
      debouncedInitPeer(false) // Receiver is not initiator —Å –¥–µ–±–∞—É–Ω—Å–∏–Ω–≥–æ–º
    } else {
      console.log(`‚ùå [User ${userId?.slice(0, 8)}] Receiver peer initialization skipped`)
    }
  }, [isInCall, isCalling, isCallActive, isReceivingCall, callerId || '', targetUserId || ''])

  // Cleanup on unmount or call end
  useEffect(() => {
    return () => {
      console.log('üßπ useWebRTC: Starting cleanup on unmount')

      // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã –∏ —Ç–∞–π–º–∞—É—Ç—ã
      stopKeepAlive(peerRefs, userId)
      stopConnectionMonitoring(peerRefs, userId)
      resetReconnectionCounter(peerRefs)
      
      // –û—á–∏—â–∞–µ–º –¥–µ–±–∞—É–Ω—Å —Ç–∞–π–º–∞—É—Ç
      if (peerInitTimeoutRef.current) {
        clearTimeout(peerInitTimeoutRef.current)
        peerInitTimeoutRef.current = null
      }

      if (peerRef.current && !peerRef.current.destroyed) {
        try {
          console.log('üßπ useWebRTC: Cleaning up peer connection')

          // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥, —á—Ç–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —É–Ω–∏—á—Ç–æ–∂–∞–µ—Ç—Å—è
          const peerToDestroy = peerRef.current
          peerRef.current = null

          // –î–∞–µ–º –≤—Ä–µ–º—è –Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ç–µ–∫—É—â–∏—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
          setTimeout(() => {
            if (peerToDestroy && !peerToDestroy.destroyed) {
              peerToDestroy.destroy()
            }
          }, 100)
        } catch (err) {
          console.log('üßπ useWebRTC: Peer cleanup error:', err)
        }
      }
    }
  }, [])

  // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ peer –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∑–≤–æ–Ω–∫–∞
  useEffect(() => {
    if (!isInCall && peerRef.current) {
      console.log(`üßπ [User ${userId?.slice(0, 8)}] Call ended, force cleanup peer`)

      // –û—á–∏—â–∞–µ–º –±—É—Ñ–µ—Ä —Å–∏–≥–Ω–∞–ª–æ–≤
      signalBufferRef.current = []

      // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–µ –ø—Ä–æ—Ü–µ—Å—Å—ã
      stopKeepAlive(peerRefs, userId)
      stopConnectionMonitoring(peerRefs, userId)
      resetReconnectionCounter(peerRefs)
      
      // –û—á–∏—â–∞–µ–º –¥–µ–±–∞—É–Ω—Å —Ç–∞–π–º–∞—É—Ç
      if (peerInitTimeoutRef.current) {
        clearTimeout(peerInitTimeoutRef.current)
        peerInitTimeoutRef.current = null
      }
      
      // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
      isInitializingRef.current = false

      try {
        if (!peerRef.current.destroyed) {
          peerRef.current.destroy()
        }
      } catch (err) {
        console.log('üßπ Force cleanup error:', err)
      }
      peerRef.current = null
    }
  }, [isInCall])

  // –£–±–∏—Ä–∞–µ–º –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é - –¥–µ–±–∞—É–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –¥–æ–ª–∂–Ω–∞ –ø–æ–∫—Ä—ã–≤–∞—Ç—å –≤—Å–µ —Å–ª—É—á–∞–∏

  return {
    peer: peerRef.current
  }
}

export default useWebRTC
