// –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ WebRTC –¥–ª—è –≤—ã—è–≤–ª–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º —Å–æ –≤—Ä–µ–º–µ–Ω–µ–º

interface PerformanceMetrics {
  connectionAttempts: number
  successfulConnections: number
  failedConnections: number
  reconnectionAttempts: number
  avgConnectionTime: number
  peakMemoryUsage: number
  activeResourcesCount: number
  lastCleanupTime: number
}

class WebRTCPerformanceMonitor {
  private static instance: WebRTCPerformanceMonitor
  private metrics: PerformanceMetrics = {
    connectionAttempts: 0,
    successfulConnections: 0,
    failedConnections: 0,
    reconnectionAttempts: 0,
    avgConnectionTime: 0,
    peakMemoryUsage: 0,
    activeResourcesCount: 0,
    lastCleanupTime: Date.now()
  }

  private connectionStartTimes: Map<string, number> = new Map()
  private performanceIntervalId: NodeJS.Timeout | null = null

  private constructor() {
    this.startPerformanceMonitoring()
  }

  static getInstance(): WebRTCPerformanceMonitor {
    if (!WebRTCPerformanceMonitor.instance) {
      WebRTCPerformanceMonitor.instance = new WebRTCPerformanceMonitor()
    }
    return WebRTCPerformanceMonitor.instance
  }

  // –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–∞—á–∞–ª–∞ –ø–æ–ø—ã—Ç–∫–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
  recordConnectionAttempt(userId: string): void {
    this.metrics.connectionAttempts++
    this.connectionStartTimes.set(userId, Date.now())
    console.log(`üìä Performance: Connection attempt #${this.metrics.connectionAttempts} for user ${userId?.slice(0, 8)}`)
  }

  // –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ–≥–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
  recordConnectionSuccess(userId: string): void {
    this.metrics.successfulConnections++
    
    const startTime = this.connectionStartTimes.get(userId)
    if (startTime) {
      const connectionTime = Date.now() - startTime
      this.metrics.avgConnectionTime = (this.metrics.avgConnectionTime + connectionTime) / 2
      this.connectionStartTimes.delete(userId)
      
      console.log(`‚úÖ Performance: Successful connection for user ${userId?.slice(0, 8)} in ${connectionTime}ms`)
    }

    this.checkPerformanceHealth()
  }

  // –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–µ—É–¥–∞—á–Ω–æ–≥–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
  recordConnectionFailure(userId: string, reason?: string): void {
    this.metrics.failedConnections++
    this.connectionStartTimes.delete(userId)
    
    console.log(`‚ùå Performance: Failed connection for user ${userId?.slice(0, 8)}, reason: ${reason}`)
    this.checkPerformanceHealth()
  }

  // –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ø—ã—Ç–∫–∏ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
  recordReconnectionAttempt(userId: string): void {
    this.metrics.reconnectionAttempts++
    console.log(`üîÑ Performance: Reconnection attempt #${this.metrics.reconnectionAttempts} for user ${userId?.slice(0, 8)}`)
  }

  // –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ—á–∏—Å—Ç–∫–∏ —Ä–µ—Å—É—Ä—Å–æ–≤
  recordResourceCleanup(resourceCount: number): void {
    this.metrics.activeResourcesCount = Math.max(0, this.metrics.activeResourcesCount - resourceCount)
    this.metrics.lastCleanupTime = Date.now()
    console.log(`üßπ Performance: Cleaned up ${resourceCount} resources, active: ${this.metrics.activeResourcesCount}`)
  }

  // –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤—ã—Ö —Ä–µ—Å—É—Ä—Å–æ–≤
  recordResourceCreation(resourceCount: number = 1): void {
    this.metrics.activeResourcesCount += resourceCount
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
  private checkPerformanceHealth(): void {
    const failureRate = this.metrics.failedConnections / Math.max(1, this.metrics.connectionAttempts)
    const timeSinceLastCleanup = Date.now() - this.metrics.lastCleanupTime

    // –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –æ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    if (failureRate > 0.3) {
      console.warn(`‚ö†Ô∏è Performance Warning: High failure rate (${(failureRate * 100).toFixed(1)}%)`)
    }

    if (this.metrics.activeResourcesCount > 10) {
      console.warn(`‚ö†Ô∏è Performance Warning: Too many active resources (${this.metrics.activeResourcesCount})`)
    }

    if (timeSinceLastCleanup > 300000) { // 5 –º–∏–Ω—É—Ç
      console.warn(`‚ö†Ô∏è Performance Warning: No cleanup for ${Math.round(timeSinceLastCleanup / 1000)}s`)
    }

    if (this.metrics.avgConnectionTime > 10000) { // 10 —Å–µ–∫—É–Ω–¥
      console.warn(`‚ö†Ô∏è Performance Warning: Slow connections (${this.metrics.avgConnectionTime}ms avg)`)
    }
  }

  // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
  private startPerformanceMonitoring(): void {
    this.performanceIntervalId = setInterval(() => {
      this.checkPerformanceHealth()
      
      // –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–π –≤—ã–≤–æ–¥ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
      if (this.metrics.connectionAttempts > 0) {
        console.log('üìä WebRTC Performance Stats:', this.getMetrics())
      }

      // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –∑–∞–ø–∏—Å–µ–π –≤—Ä–µ–º–µ–Ω–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
      const now = Date.now()
      for (const [userId, startTime] of this.connectionStartTimes) {
        if (now - startTime > 30000) { // 30 —Å–µ–∫—É–Ω–¥ timeout
          console.warn(`‚è±Ô∏è Performance: Removing stale connection record for ${userId?.slice(0, 8)}`)
          this.connectionStartTimes.delete(userId)
          this.recordConnectionFailure(userId, 'timeout')
        }
      }
    }, 60000) // –ö–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫
  getMetrics(): PerformanceMetrics {
    return { ...this.metrics }
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–µ—Ç–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
  getDetailedStats() {
    const failureRate = this.metrics.failedConnections / Math.max(1, this.metrics.connectionAttempts)
    const successRate = this.metrics.successfulConnections / Math.max(1, this.metrics.connectionAttempts)
    
    return {
      ...this.metrics,
      failureRate: parseFloat((failureRate * 100).toFixed(1)),
      successRate: parseFloat((successRate * 100).toFixed(1)),
      pendingConnections: this.connectionStartTimes.size,
      timeSinceLastCleanup: Date.now() - this.metrics.lastCleanupTime
    }
  }

  // –°–±—Ä–æ—Å –º–µ—Ç—Ä–∏–∫
  resetMetrics(): void {
    this.metrics = {
      connectionAttempts: 0,
      successfulConnections: 0,
      failedConnections: 0,
      reconnectionAttempts: 0,
      avgConnectionTime: 0,
      peakMemoryUsage: 0,
      activeResourcesCount: 0,
      lastCleanupTime: Date.now()
    }
    this.connectionStartTimes.clear()
    console.log('üìä Performance metrics reset')
  }

  // –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
  stopMonitoring(): void {
    if (this.performanceIntervalId) {
      clearInterval(this.performanceIntervalId)
      this.performanceIntervalId = null
    }
  }
}

export const performanceMonitor = WebRTCPerformanceMonitor.getInstance()

// –û—á–∏—Å—Ç–∫–∞ –ø—Ä–∏ —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
if (typeof window !== 'undefined') {
  window.addEventListener('beforeunload', () => {
    performanceMonitor.stopMonitoring()
  })
}
