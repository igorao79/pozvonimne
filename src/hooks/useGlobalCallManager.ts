'use client'

/**
 * –ì–ª–æ–±–∞–ª—å–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –∑–≤–æ–Ω–∫–æ–≤ - –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç 100% –¥–æ—Å—Ç–∞–≤–∫—É –≤—Ö–æ–¥—è—â–∏—Ö –≤—ã–∑–æ–≤–æ–≤
 * –†–∞–±–æ—Ç–∞–µ—Ç –ø–æ—Å—Ç–æ—è–Ω–Ω–æ –ø–æ—Å–ª–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏, –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç —Ç–µ–∫—É—â–µ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
 */

import { useEffect, useRef } from 'react'
import useCallStore from '@/store/useCallStore'
import { createClient } from '@/utils/supabase/client'
import { resilientChannelManager } from '@/utils/resilientChannelManager'
import { createReconnectionManager } from '@/utils/subscriptionHelpers'

interface UseGlobalCallManagerProps {
  isAuthenticated: boolean
  userId: string | null
}

export const useGlobalCallManager = ({ isAuthenticated, userId }: UseGlobalCallManagerProps) => {
  const {
    setIsReceivingCall,
    setIsCallActive,
    setError,
    endCall
  } = useCallStore()

  const supabase = createClient()
  const isInitializedRef = useRef(false)
  const reconnectionManagerRef = useRef<ReturnType<typeof createReconnectionManager> | null>(null)

  useEffect(() => {
    // –¢–æ–ª—å–∫–æ –µ—Å–ª–∏ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –∏ –µ—Å—Ç—å userId
    if (!isAuthenticated || !userId) {
      console.log('üåê GlobalCallManager: Not authenticated or no userId, skipping setup')
      return
    }

    // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –ø–æ–≤—Ç–æ—Ä–Ω—É—é –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é
    if (isInitializedRef.current) {
      console.log('üåê GlobalCallManager: Already initialized, skipping')
      return
    }

    console.log('üåê GlobalCallManager: Setting up global call listener for user:', userId.slice(0, 8))
    isInitializedRef.current = true

    const setupGlobalCallListener = async () => {
      const channelId = `calls:${userId}`
      
      console.log('üåê GlobalCallManager: Creating global resilient channel:', channelId)

      // –°–æ–∑–¥–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
      if (!reconnectionManagerRef.current) {
        reconnectionManagerRef.current = createReconnectionManager(
          () => {
            console.log('üåê GlobalCallManager: Reconnection callback triggered')
            // –ü—Ä–∏ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É
            setupGlobalCallListener()
          },
          5, // –±–æ–ª—å—à–µ –ø–æ–ø—ã—Ç–æ–∫ –¥–ª—è –∫—Ä–∏—Ç–∏—á–Ω–æ –≤–∞–∂–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞
          3000 // 3 —Å–µ–∫—É–Ω–¥—ã –º–µ–∂–¥—É –ø–æ–ø—ã—Ç–∫–∞–º–∏
        )
      }

      try {
        // –°–æ–∑–¥–∞–µ–º —É—Å—Ç–æ–π—á–∏–≤—ã–π –∫–∞–Ω–∞–ª –¥–ª—è –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è –∑–≤–æ–Ω–∫–æ–≤
        await resilientChannelManager.createResilientChannel({
          channelName: channelId,
          setup: (channel) => {
            console.log('üåê GlobalCallManager: Setting up channel listeners')
            
            return channel
              .on('broadcast', { event: 'incoming_call' }, (payload: any) => {
                console.log('üåê GlobalCallManager: üìû ========== INCOMING CALL EVENT ==========')
                console.log('üåê GlobalCallManager: üìû Raw payload:', payload)
                console.log('üåê GlobalCallManager: üìû Received for user:', userId.slice(0, 8))
                console.log('üåê GlobalCallManager: üìû Channel ID:', channelId)
                
                const { caller_id, caller_name, timestamp } = payload.payload || {}
                
                console.log('üåê GlobalCallManager: üìû Extracted data:', {
                  caller_id: caller_id?.slice(0, 8),
                  caller_name,
                  timestamp,
                  age: timestamp ? Date.now() - timestamp : 'no timestamp'
                })
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç—å –∑–≤–æ–Ω–∫–∞ (–Ω–µ —Å—Ç–∞—Ä—à–µ 30 —Å–µ–∫—É–Ω–¥)
                if (timestamp && Date.now() - timestamp > 30000) {
                  console.log('üåê GlobalCallManager: üìû Ignoring old call signal (age:', Date.now() - timestamp, 'ms)')
                  return
                }
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ª–∏ –º—ã —É–∂–µ –∑–≤–æ–Ω–æ–∫
                const currentState = useCallStore.getState()
                console.log('üåê GlobalCallManager: üìû Current call state:', {
                  isReceivingCall: currentState.isReceivingCall,
                  isInCall: currentState.isInCall,
                  isCalling: currentState.isCalling,
                  callerId: currentState.callerId?.slice(0, 8),
                  targetUserId: currentState.targetUserId?.slice(0, 8)
                })
                
                if (currentState.isReceivingCall || currentState.isInCall) {
                  console.log('üåê GlobalCallManager: üìû Already handling a call, ignoring duplicate')
                  return
                }
                
                console.log('üåê GlobalCallManager: üìû ‚úÖ Processing incoming call from:', caller_id?.slice(0, 8), 'name:', caller_name)
                console.log('üåê GlobalCallManager: üìû Setting incoming call state...')
                
                // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤—Ö–æ–¥—è—â–µ–≥–æ –∑–≤–æ–Ω–∫–∞
                setIsReceivingCall(true, caller_id, caller_name)
                
                console.log('üåê GlobalCallManager: üìû ‚úÖ Incoming call state set successfully!')
                console.log('üåê GlobalCallManager: üìû =============================================')
              })
              .on('broadcast', { event: 'call_accepted' }, (payload: any) => {
                console.log('üåê GlobalCallManager: üìû Call was accepted:', payload)
                const { accepter_id } = payload.payload
                
                // –ó–≤–æ–Ω—è—â–∏–π –ø–æ–ª—É—á–∞–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø—Ä–∏–Ω—è—Ç–∏–∏ –∑–≤–æ–Ω–∫–∞
                const currentState = useCallStore.getState()
                if (currentState.isCalling && currentState.targetUserId === accepter_id) {
                  console.log('üåê GlobalCallManager: üìû Our call was accepted, activating...')
                  setIsReceivingCall(false)
                  setIsCallActive(true)
                }
              })
              .on('broadcast', { event: 'call_rejected' }, (payload: any) => {
                console.log('üåê GlobalCallManager: üìû Call was rejected:', payload)
                const { rejector_id } = payload.payload

                // –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–∑ store
                const currentState = useCallStore.getState()

                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –Ω–∞—à–µ–≥–æ –∑–≤–æ–Ω–∫–∞
                if (currentState.isCalling && currentState.targetUserId === rejector_id) {
                  console.log('üåê GlobalCallManager: üìû Our call was rejected by:', rejector_id.slice(0, 8))
                  setError('CALL_REJECTED_VISUAL')
                  setTimeout(() => endCall(), 50)
                } else if (currentState.isReceivingCall && currentState.callerId === rejector_id) {
                  console.log('üåê GlobalCallManager: üìû Incoming call was rejected by:', rejector_id.slice(0, 8))
                  setError('CALL_REJECTED_VISUAL')
                  setTimeout(() => endCall(), 50)
                }
              })
              .on('broadcast', { event: 'call_ended' }, (payload: any) => {
                console.log('üåê GlobalCallManager: üìû Call ended by other user:', payload)
                endCall()
              })
              .on('broadcast', { event: 'call_cancelled' }, (payload: any) => {
                console.log('üåê GlobalCallManager: üìû Call cancelled by caller:', payload)
                const { caller_id } = payload.payload

                const currentState = useCallStore.getState()
                if (currentState.isReceivingCall && currentState.callerId === caller_id) {
                  console.log('üåê GlobalCallManager: üìû Our incoming call was cancelled by:', caller_id.slice(0, 8))
                  setError('–ó–≤–æ–Ω–æ–∫ –æ—Ç–º–µ–Ω–µ–Ω –∑–≤–æ–Ω—è—â–∏–º')
                  endCall()
                }
              })
          },
          onSubscribed: () => {
            console.log('‚úÖ GlobalCallManager: Global call listener successfully connected for user:', userId.slice(0, 8))
            console.log('üéØ GlobalCallManager: Channel ID:', channelId)
            console.log('üéØ GlobalCallManager: Ready to receive incoming calls!')
            setError(null) // –û—á–∏—â–∞–µ–º –æ—à–∏–±–∫–∏ –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏
            
            // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –ø—Ä–∏ —É—Å–ø–µ—Ö–µ
            if (reconnectionManagerRef.current) {
              reconnectionManagerRef.current.reset()
            }
          },
          onError: (errorMessage) => {
            console.error('‚ùå GlobalCallManager: Global call listener error:', errorMessage)
            
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
            if (reconnectionManagerRef.current) {
              const attempts = reconnectionManagerRef.current.getAttempts()
              setError(`–ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∑–≤–æ–Ω–∫–∞–º... (${attempts + 1}/5)`)
              
              const success = reconnectionManagerRef.current.reconnect()
              if (!success) {
                setError('–ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –¥–ª—è –∑–≤–æ–Ω–∫–æ–≤')
              }
            }
          },
          maxReconnectAttempts: 5, // –£–º–µ–Ω—å—à–∏–ª–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫
          reconnectDelay: 3000, // 3 —Å–µ–∫—É–Ω–¥—ã –º–µ–∂–¥—É –ø–æ–ø—ã—Ç–∫–∞–º–∏
          keepAliveInterval: 45000, // Keep-alive –∫–∞–∂–¥—ã–µ 45 —Å–µ–∫—É–Ω–¥
          healthCheckInterval: 90000 // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è –∫–∞–∂–¥—ã–µ 1.5 –º–∏–Ω—É—Ç—ã
        })
        
        console.log('‚úÖ GlobalCallManager: Global call listener setup completed')
        
      } catch (error) {
        console.error('üí• GlobalCallManager: Failed to create global call channel:', error)
        setError('–ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –¥–ª—è –∑–≤–æ–Ω–∫–æ–≤')
        
        // –ü—ã—Ç–∞–µ–º—Å—è –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è —á–µ—Ä–µ–∑ –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è
        setTimeout(() => {
          console.log('üîÑ GlobalCallManager: Retrying global call setup...')
          setupGlobalCallListener()
        }, 5000)
      }
    }

    // –ó–∞–ø—É—Å–∫–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É
    setupGlobalCallListener()

    // Cleanup —Ñ—É–Ω–∫—Ü–∏—è
    return () => {
      console.log('üåê GlobalCallManager: Cleaning up global call listener for user:', userId.slice(0, 8))
      
      // –£–¥–∞–ª—è–µ–º —É—Å—Ç–æ–π—á–∏–≤—ã–π –∫–∞–Ω–∞–ª
      const channelId = `calls:${userId}`
      resilientChannelManager.removeChannel(channelId)
      
      // –û—á–∏—â–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
      if (reconnectionManagerRef.current) {
        reconnectionManagerRef.current.cancel()
        reconnectionManagerRef.current = null
      }
      
      // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
      isInitializedRef.current = false
    }
  }, [isAuthenticated, userId, setIsReceivingCall, setIsCallActive, setError, endCall, supabase])

  // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ç–∞—Ç—É—Å –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
  return {
    isGlobalCallManagerActive: isAuthenticated && !!userId && isInitializedRef.current
  }
}

export default useGlobalCallManager
