'use client'

import { useCallback } from 'react'
import useCallStore from '@/store/useCallStore'

export const useScreenShare = () => {
  const {
    isScreenSharing,
    screenStream,
    setScreenStream,
    startScreenShare,
    toggleScreenShare,
    stopScreenShare,
    peer,
    userId,
    targetUserId
  } = useCallStore()

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–∂–∏–¥–∞–Ω–∏—è –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ peer connection
  const waitForPeerReady = useCallback(async (maxWaitTime = 5000): Promise<boolean> => {
    return new Promise((resolve) => {
      const checkInterval = 100
      let waited = 0
      
      const checkPeer = () => {
        if (peer && !peer.destroyed && peer.connected) {
          resolve(true)
          return
        }
        
        waited += checkInterval
        if (waited >= maxWaitTime) {
          resolve(false)
          return
        }
        
        setTimeout(checkPeer, checkInterval)
      }
      
      checkPeer()
    })
  }, [peer])

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è video —Ç—Ä–µ–∫–∞ –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–º—É peer connection
  const addVideoTrackToPeer = useCallback(async (videoTrack: MediaStreamTrack, stream: MediaStream): Promise<boolean> => {
    if (!peer || peer.destroyed || !peer.connected) {
      console.warn('üì∫ Peer not ready for adding video track')
      return false
    }

    try {
      const pc = (peer as any)._pc
      if (!pc) {
        console.warn('üì∫ RTCPeerConnection not available')
        return false
      }

      console.log('üì∫ Adding screen video track to peer connection...')

      // –î–æ–±–∞–≤–ª—è–µ–º track –∫ RTCPeerConnection
      const sender = pc.addTrack(videoTrack, stream)
      console.log('üì∫ Screen video track added via addTrack:', {
        sender: !!sender,
        trackId: videoTrack.id,
        streamId: stream.id
      })

      // –û–∂–∏–¥–∞–µ–º –Ω–µ–±–æ–ª—å—à—É—é –∑–∞–¥–µ—Ä–∂–∫—É –¥–ª—è —Å—Ç–∞–±–∏–ª–∏–∑–∞—Ü–∏–∏
      await new Promise(resolve => setTimeout(resolve, 100))

      // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π offer –¥–ª—è renegotiation
      console.log('üì∫ Creating offer for screen sharing renegotiation...')
      
      const offer = await pc.createOffer({
        iceRestart: false,
        offerToReceiveAudio: true,
        offerToReceiveVideo: true
      })

      console.log('üì∫ Created offer for screen sharing:', {
        type: offer.type,
        hasVideo: offer.sdp?.includes('m=video'),
        hasAudio: offer.sdp?.includes('m=audio'),
        sdpVideoLines: (offer.sdp?.match(/m=video/g) || []).length
      })

      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ
      await pc.setLocalDescription(offer)
      console.log('üì∫ Set local description for screen sharing')

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–∏–≥–Ω–∞–ª —á–µ—Ä–µ–∑ SimplePeer
      if (typeof (peer as any).emit === 'function') {
        console.log('üì∫ Sending screen sharing offer signal via SimplePeer')
        ;(peer as any).emit('signal', offer)
      }

      return true

    } catch (err: any) {
      console.warn('üì∫ Failed to add video track and renegotiate:', err)
      return false
    }
  }, [peer])

  // –ù–∞—á–∞—Ç—å –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—é —ç–∫—Ä–∞–Ω–∞
  const startScreenShareLocal = useCallback(async () => {
    try {
      console.log('üì∫ Starting screen share...')

      const displayStream = await navigator.mediaDevices.getDisplayMedia({
        video: {
          width: { ideal: 1920, max: 1920 },
          height: { ideal: 1080, max: 1080 },
          frameRate: { ideal: 30, max: 30 }
        },
        audio: false // –û—Ç–∫–ª—é—á–∞–µ–º –∞—É–¥–∏–æ –¥–ª—è —É–ø—Ä–æ—â–µ–Ω–∏—è
      })

      console.log('üì∫ Screen share stream obtained:', {
        id: displayStream.id,
        videoTracks: displayStream.getVideoTracks().length,
        audioTracks: displayStream.getAudioTracks().length
      })

      const videoTrack = displayStream.getVideoTracks()[0]
      if (!videoTrack) {
        throw new Error('No video track found in screen share stream')
      }

      // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–∫–æ–Ω—á–∞–Ω–∏—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
      videoTrack.onended = () => {
        console.log('üì∫ Screen share ended by user')
        stopScreenShare()
      }

      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ screen sharing –≤ true
      console.log('üì∫ Setting screen sharing state to true...')
      startScreenShare()

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º stream –≤ store
      console.log('üì∫ Setting screen stream in store...')
      setScreenStream(displayStream)

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å peer connection
      console.log('üì∫ Checking peer readiness for screen sharing...')
      const isPeerReady = await waitForPeerReady(3000) // –∂–¥–µ–º –¥–æ 3 —Å–µ–∫—É–Ω–¥

      if (isPeerReady) {
        console.log('üì∫ Peer is ready, adding video track...')
        const success = await addVideoTrackToPeer(videoTrack, displayStream)
        
        if (success) {
          console.log('üì∫ Screen sharing successfully started and transmitted')
        } else {
          console.warn('üì∫ Failed to add video track to peer, but screen sharing is local only')
        }
      } else {
        console.warn('üì∫ Peer not ready within timeout, screen sharing will be local only')
        console.log('üì∫ Peer state:', {
          hasPeer: !!peer,
          destroyed: peer?.destroyed,
          connected: peer?.connected
        })
      }

    } catch (err) {
      console.error('üì∫ Error starting screen share:', err)
      if (err instanceof Error) {
        if (err.name === 'NotAllowedError') {
          alert('–î–æ—Å—Ç—É–ø –∫ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ —ç–∫—Ä–∞–Ω–∞ –∑–∞–ø—Ä–µ—â–µ–Ω. –†–∞–∑—Ä–µ—à–∏—Ç–µ –¥–æ—Å—Ç—É–ø –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –±—Ä–∞—É–∑–µ—Ä–∞.')
        } else if (err.name === 'NotFoundError') {
          alert('–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —ç–∫—Ä–∞–Ω–∞ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –Ω–∞ —ç—Ç–æ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ.')
        } else {
          alert(`–û—à–∏–±–∫–∞ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ —ç–∫—Ä–∞–Ω–∞: ${err.message}`)
        }
      }
      // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
      setScreenStream(null)
      stopScreenShare()
    }
  }, [peer, setScreenStream, stopScreenShare, startScreenShare, waitForPeerReady, addVideoTrackToPeer])

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è video —Ç—Ä–µ–∫–∞ –∏–∑ peer connection
  const removeVideoTrackFromPeer = useCallback(async (): Promise<boolean> => {
    if (!peer || peer.destroyed || !screenStream) {
      console.log('üì∫ No peer or screen stream to remove tracks from')
      return false
    }

    try {
      const pc = (peer as any)._pc
      if (!pc || typeof pc.getSenders !== 'function') {
        console.warn('üì∫ RTCPeerConnection or getSenders not available')
        return false
      }

      console.log('üì∫ Removing screen tracks from peer connection...')
      const senders = pc.getSenders()
      let tracksRemoved = 0
      
      // –ù–∞–π–¥–µ–º –∏ —É–¥–∞–ª–∏–º –≤—Å–µ video —Ç—Ä–µ–∫–∏, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å screen sharing
      for (const sender of senders) {
        if (sender.track && sender.track.kind === 'video') {
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –ª–∏ —Ç—Ä–µ–∫ –Ω–∞—à–µ–º—É screen stream
          const belongsToScreenStream = screenStream.getTracks().some(track => track === sender.track)
          
          if (belongsToScreenStream) {
            await pc.removeTrack(sender)
            tracksRemoved++
            console.log('üì∫ Removed screen track sender:', {
              trackId: sender.track.id,
              trackKind: sender.track.kind
            })
          }
        }
      }
      
      console.log('üì∫ Screen tracks removed from peer connection:', tracksRemoved)
      
      // –ò–Ω–∏—Ü–∏–∏—Ä—É–µ–º renegotiation –µ—Å–ª–∏ —É–¥–∞–ª–∏–ª–∏ —Ç—Ä–µ–∫–∏
      if (tracksRemoved > 0) {
        console.log('üì∫ Creating offer after removing screen tracks...')
        
        // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è —Å—Ç–∞–±–∏–ª–∏–∑–∞—Ü–∏–∏
        await new Promise(resolve => setTimeout(resolve, 100))
        
        const offer = await pc.createOffer({
          iceRestart: false,
          offerToReceiveAudio: true,
          offerToReceiveVideo: true // –û—Å—Ç–∞–≤–ª—è–µ–º true, –Ω–∞ —Å–ª—É—á–∞–π –µ—Å–ª–∏ –µ—Å—Ç—å –¥—Ä—É–≥–∏–µ video —Ç—Ä–µ–∫–∏
        })

        console.log('üì∫ Created offer after removing screen tracks:', {
          type: offer.type,
          hasVideo: offer.sdp?.includes('m=video'),
          hasAudio: offer.sdp?.includes('m=audio')
        })

        await pc.setLocalDescription(offer)
        console.log('üì∫ Set local description after track removal')

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–∏–≥–Ω–∞–ª
        if (typeof (peer as any).emit === 'function') {
          console.log('üì∫ Sending track removal offer signal via SimplePeer')
          ;(peer as any).emit('signal', offer)
        }
      }

      return true

    } catch (err: any) {
      console.warn('üì∫ Error removing screen tracks from peer:', err)
      return false
    }
  }, [peer, screenStream])

  // –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—é —ç–∫—Ä–∞–Ω–∞
  const handleStopScreenShare = useCallback(async () => {
    console.log('üì∫ Stopping screen share...')

    // –°–Ω–∞—á–∞–ª–∞ —É–¥–∞–ª—è–µ–º —Ç—Ä–µ–∫–∏ –∏–∑ peer connection
    if (peer && !peer.destroyed && screenStream) {
      console.log('üì∫ Removing screen tracks from WebRTC peer...')
      await removeVideoTrackFromPeer()
    }

    // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–µ —Ç—Ä–µ–∫–∏ –≤ local stream
    if (screenStream) {
      screenStream.getTracks().forEach(track => {
        track.stop()
        console.log('üì∫ Stopped screen track:', track.id)
      })
    }

    // –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    stopScreenShare()
  }, [peer, screenStream, stopScreenShare, removeVideoTrackFromPeer])

  // –ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—é —ç–∫—Ä–∞–Ω–∞
  const handleToggleScreenShare = useCallback(async () => {
    console.log('üì∫ Toggle screen share called:', {
      currentState: isScreenSharing,
      hasScreenStream: !!screenStream
    })

    if (isScreenSharing) {
      console.log('üì∫ Stopping screen share...')
      handleStopScreenShare()
    } else {
      console.log('üì∫ Starting screen share...')
      await startScreenShareLocal()
    }
  }, [isScreenSharing, handleStopScreenShare, startScreenShareLocal, screenStream])

  return {
    isScreenSharing,
    screenStream,
    startScreenShare: startScreenShareLocal,
    stopScreenShare: handleStopScreenShare,
    toggleScreenShare: handleToggleScreenShare
  }
}

export default useScreenShare
