import { useState, useEffect, useCallback } from 'react'
import { Message, RealtimeMessagePayload } from '@/components/Chat/ChatInterface/types'
import useSupabaseStore from '@/store/useSupabaseStore'
import useChatSyncStore from '@/store/useChatSyncStore'

interface UseChatMessagesProps {
  chatId: string
  userId?: string
}

export const useChatMessages = ({ chatId, userId }: UseChatMessagesProps) => {
  const [messages, setMessages] = useState<Message[]>([])
  const [loading, setLoading] = useState(true)
  const [sending, setSending] = useState(false)
  const [error, setError] = useState<string | undefined>(undefined)

  const { supabase } = useSupabaseStore()
  const { refreshChatList } = useChatSyncStore()

  // –ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
  const loadMessages = useCallback(async () => {
    try {
      setLoading(true)
      setError(null)

      // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è —Ä–µ–∫—É—Ä—Å–∏–∏ RLS
      // –§—É–Ω–∫—Ü–∏—è get_chat_messages —É–∂–µ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø –≤–Ω—É—Ç—Ä–∏

      // –¢–µ–ø–µ—Ä—å –±–µ–∑–æ–ø–∞—Å–Ω–æ –∑–∞–≥—Ä—É–∂–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
      const { data, error: messagesError } = await supabase.rpc('get_chat_messages', {
        chat_uuid: chatId,
        limit_count: 50
      })

      if (messagesError) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π:', messagesError)

        // –ï—Å–ª–∏ —ç—Ç–æ –Ω–æ–≤—ã–π —á–∞—Ç –±–µ–∑ —Å–æ–æ–±—â–µ–Ω–∏–π, —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ
        if (messagesError.message?.includes('not a participant')) {
          console.log('–ù–æ–≤—ã–π —á–∞—Ç –∏–ª–∏ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —Å–æ–æ–±—â–µ–Ω–∏—è–º')
          setMessages([])
        } else {
          setError('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π')
        }
        return
      }

      // –°–æ–æ–±—â–µ–Ω–∏—è –ø—Ä–∏—Ö–æ–¥—è—Ç –≤ –æ–±—Ä–∞—Ç–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ (–Ω–æ–≤—ã–µ –ø–µ—Ä–≤—ã–µ), –ø–µ—Ä–µ–≤–æ—Ä–∞—á–∏–≤–∞–µ–º
      const reversedMessages = (data || []).reverse()
      console.log('üì® –ó–∞–≥—Ä—É–∂–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π:', reversedMessages.length)
      setMessages(reversedMessages)

      // –ü–æ–º–µ—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏
      if (messages.length > 0) {
        try {
          console.log('üìñ –ü–æ–º–µ—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ –¥–ª—è —á–∞—Ç–∞:', chatId)
          await supabase.rpc('mark_messages_as_read', { chat_uuid: chatId })
          console.log('‚úÖ –°–æ–æ–±—â–µ–Ω–∏—è –ø–æ–º–µ—á–µ–Ω—ã –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ')
        } catch (markError) {
          console.warn('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–º–µ—Ç–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ:', markError)
          // –≠—Ç–æ –Ω–µ –∫—Ä–∏—Ç–∏—á–Ω–∞—è –æ—à–∏–±–∫–∞
        }
      }
    } catch (err) {
      console.error('–û—à–∏–±–∫–∞:', err)
      setError('–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è')
    } finally {
      setLoading(false)
    }
  }, [chatId, supabase])

  // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
  useEffect(() => {
    console.log('üîÑ –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —á–∞—Ç–∞:', chatId)
    loadMessages()
  }, [chatId, loadMessages])

  // –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
  const sendMessage = useCallback(async (messageText: string) => {
    if (!messageText.trim() || sending || !userId) return { success: false, text: messageText }

    const text = messageText.trim()
    setSending(true)

    try {
      // –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
      const tempMessage: Message = {
        id: `temp_${Date.now()}`, // –í—Ä–µ–º–µ–Ω–Ω—ã–π ID
        chat_id: chatId,
        sender_id: userId,
        sender_name: '–í—ã',
        sender_avatar: undefined,
        content: text,
        type: 'text',
        created_at: new Date().toISOString(),
        updated_at: new Date().toISOString(),
        is_deleted: false,
        metadata: {}
      }

      // –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ª–æ–∫–∞–ª—å–Ω–æ –¥–ª—è –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
      setMessages(prev => [...prev, tempMessage])

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ —Å–µ—Ä–≤–µ—Ä
      const { data: messageId, error: sendError } = await supabase.rpc('send_message', {
        chat_uuid: chatId,
        message_content: text,
        message_type: 'text'
      })

      if (sendError) {
        console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:', sendError)
        // –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É
        setMessages(prev => prev.filter(msg => msg.id !== tempMessage.id))
        setError('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è')
        return { success: false, text }
      }

      console.log('‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ:', messageId)

      // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Ä–µ–∞–ª—å–Ω—ã–º ID
      setMessages(prev => prev.map(msg =>
        msg.id === tempMessage.id
          ? { ...msg, id: messageId }
          : msg
      ))

      return { success: true }

    } catch (err) {
      console.error('–û—à–∏–±–∫–∞:', err)
      setError('–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è')
      return { success: false, text }
    } finally {
      setSending(false)
    }
  }, [chatId, userId, sending, supabase])

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ realtime
  const handleNewMessage = useCallback((messageData: RealtimeMessagePayload) => {
    if (!messageData.id || !messageData.chat_id) {
      console.warn('üì° –ù–µ–ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è:', messageData)
      return
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –∫ —Ç–µ–∫—É—â–µ–º—É —á–∞—Ç—É
    if (messageData.chat_id !== chatId) {
      console.log('üì° –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –¥–ª—è —ç—Ç–æ–≥–æ —á–∞—Ç–∞, –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º')
      return
    }

    setMessages(prev => {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –¥–æ–±–∞–≤–ª—è–ª–∏ –ª–∏ —É–∂–µ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
      const existingMessage = prev.find(msg => msg.id === messageData.id)
      if (existingMessage) {
        console.log('üì° –°–æ–æ–±—â–µ–Ω–∏–µ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º')
        return prev
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –¥—É–±–ª–∏–∫–∞—Ç—ã –ø–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º—É (–¥–ª—è –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π)
      const duplicateByContent = prev.find(msg =>
        msg.content === messageData.content &&
        msg.sender_id === messageData.sender_id &&
        Math.abs(new Date(msg.created_at).getTime() - new Date(messageData.created_at).getTime()) < 5000
      )

      if (duplicateByContent) {
        console.log('üì° –ù–∞–π–¥–µ–Ω –¥—É–±–ª–∏–∫–∞—Ç –ø–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º—É, –æ–±–Ω–æ–≤–ª—è–µ–º ID')
        return prev.map(msg =>
          msg.id === duplicateByContent.id
            ? { ...msg, id: messageData.id, updated_at: messageData.updated_at }
            : msg
        )
      }

      // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
      const newMessage: Message = {
        id: messageData.id,
        chat_id: messageData.chat_id,
        sender_id: messageData.sender_id,
        sender_name: messageData.sender_id === userId ? '–í—ã' : '–°–æ–±–µ—Å–µ–¥–Ω–∏–∫',
        sender_avatar: undefined,
        content: messageData.content,
        type: messageData.type || 'text',
        created_at: messageData.created_at,
        updated_at: messageData.updated_at,
        is_deleted: messageData.is_deleted || false,
        metadata: messageData.metadata || {}
      }

      return [...prev, newMessage]
    })

    // –ü–æ–º–µ—á–∞–µ–º –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–µ, –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ –Ω–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    if (messageData.sender_id !== userId) {
      setTimeout(async () => {
        try {
          await supabase.rpc('mark_messages_as_read', { chat_uuid: chatId })
        } catch (err) {
          console.warn('–û—à–∏–±–∫–∞ –ø–æ–º–µ—Ç–∫–∏ –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–≥–æ:', err)
        }
      }, 200)
    }

    // –£–≤–µ–¥–æ–º–ª—è–µ–º –æ –Ω–æ–≤–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ —á–µ—Ä–µ–∑ Zustand –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —á–∞—Ç–æ–≤
    refreshChatList()
  }, [chatId, userId, supabase, refreshChatList])

  return {
    messages,
    loading,
    sending,
    error,
    loadMessages,
    sendMessage,
    handleNewMessage,
    setError
  }
}
